<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ANSI_X_9.17的伪随机数产生器</title>
    <url>/2020/12/02/ansi-x-9-17-de-wei-sui-ji-shu-chan-sheng-qi/</url>
    <content><![CDATA[<h1 id="ANSI-X-9-17的伪随机数产生器"><a href="#ANSI-X-9-17的伪随机数产生器" class="headerlink" title="ANSI_X_9.17的伪随机数产生器"></a>ANSI_X_9.17的伪随机数产生器</h1><blockquote>
<p>  第5章密钥分配与管理.ppt <a href="https://github.com/mednight4/Cryptography-course-ppt/blob/main/%E7%AC%AC5%E7%AB%A0%E5%AF%86%E9%92%A5%E5%88%86%E9%85%8D%E4%B8%8E%E7%AE%A1%E7%90%86.ppt?raw=true">下载</a> </p>
</blockquote>
<blockquote>
<p>  代码用到了三重DES加密，正好之前写分组时写完了DES，直接导来用了。</p>
<p>  <a href="https://mednight4.github.io/2020/11/11/des-jia-jie-mi-ji-chu-shi-xian/">DES加解密基础实现 | mednight4</a></p>
</blockquote>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/ANSI_X_9.17%E7%9A%84%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BA%A7%E7%94%9F%E5%99%A8/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BA%A7%E7%94%9F%E5%99%A8.png"></p>
<p>可以简单理解为不用random来实现随机数的生成。</p>
<h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><p><strong>64位日期的生成。</strong>由于之前写DES时底层的0和1用的是字符而不是位运算，所以在此日期转64位bit只能转为字符串了。</p>
<p>64位日期格式，我想到了<code>np.datetime.now()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">now = datetime.now()</span><br><span class="line">now=np.datetime64(now)</span><br><span class="line">print(now,<span class="built_in">type</span>(now))</span><br><span class="line"><span class="comment"># 2020-12-02T20:06:20.571603 &lt;class &#x27;numpy.datetime64&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 是numpy的64位日期对象哦。</span></span><br></pre></td></tr></table></figure>

<p>然后既然要字符串，就把对象序列化好了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">print(pickle.dumps(now))</span><br><span class="line"><span class="comment"># b&#x27;\x80\x03cnumpy.core.multiarray\nscalar\nq\x00cnumpy\ndtype\nq\x01X\x02\x00\x00\x00M8q\x02\x89\x88\x87q\x03Rq\x04(K\x04X\x01\x00\x00\x00&lt;q\x05NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00&#125;q\x06(C\x02usq\x07K\x01K\x01K\x01tq\x08\x86q\ttq\nbC\x08\xd3\x1f\xe0\xc6\x80\xb5\x05\x00q\x0b\x86q\x0cRq\r.&#x27;</span></span><br></pre></td></tr></table></figure>

<p>出来了一坨神奇的东西。。。暂定这种办法是无效的，但似乎也没有直接生成64位日期的函数，无奈之下，只有自己转了。</p>
<p>python的<code>time.time()</code>来生成一个当下的时间戳，时间应该是精确到秒以下的，能保证每一轮取时间参数时它的值都不一样。格式大概这个样子：</p>
<p>1606909814.5311575</p>
<p>去掉标点符号后15-17位不等，4位bin表示一个hex，64的话我们需要16个数，我直接将dec当成hex了，问题不大。位数不够的话右边填个零补齐，<code>list.ljust(16,&#39;0&#39;))</code>。</p>
<p>原理要求每次从初态读取数据，结合当下的时间与密钥K1，K2，经过异或，DES等操作，得到一个伪随机数。这样的话哪怕知道了初态和生成时间，不知道K1和K2，所以随机数是很难破解的。</p>
<p>那么为了保证每次的初态不同，干脆把每次运行完的末态存进文件，下一次运行直接从文件读取上次运行的状态作为初态。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><code>ANSI_X9_17.py</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;ANSI X 9.17的伪随机数产生器&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> DES.function <span class="keyword">import</span> xor</span><br><span class="line"><span class="keyword">from</span> DES.function <span class="keyword">import</span> hex2bin</span><br><span class="line"><span class="keyword">from</span> DES.function <span class="keyword">import</span> bin2hex</span><br><span class="line"><span class="keyword">from</span> DES.en_for3 <span class="keyword">import</span> en_for3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TD</span>(<span class="params">DT, K1, K2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;三重DES&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> en_for3(DT, K1, K2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DTi</span>(<span class="params">present</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;DTi(64):当前日期与时间, 每产生一个Ri后,自动更新一次&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 这64位时间的生成应该也是仅此一家了</span></span><br><span class="line">    now = <span class="built_in">list</span>(<span class="built_in">str</span>(present).ljust(<span class="number">16</span>, <span class="string">&#x27;0&#x27;</span>))</span><br><span class="line">    now.remove(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">hex</span>(<span class="built_in">int</span>(i))[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> (now[:<span class="number">16</span>])])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_circle</span>(<span class="params">present, K1, K2, Vi</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;一轮加密&quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;present,Vi,K1,K2\n&quot;</span>, present, Vi, K1, K2)</span><br><span class="line">    value1 = TD(DTi(present), K1, K2)</span><br><span class="line">    value2 = bin2hex(<span class="string">&quot;&quot;</span>.join(xor(hex2bin(Vi), hex2bin(value1))))</span><br><span class="line">    Ri = TD(value2, K1, K2)</span><br><span class="line">    value4 = bin2hex(<span class="string">&quot;&quot;</span>.join(xor(hex2bin(value1), hex2bin(Ri))))</span><br><span class="line">    Vi_next = TD(value4, K1, K2)</span><br><span class="line">    <span class="comment"># 生成随机数</span></span><br><span class="line">    print(<span class="string">&quot;种子:&quot;</span>, Ri, <span class="string">&quot;\tVi+1:&quot;</span>, Vi_next)</span><br><span class="line">    <span class="keyword">return</span> Ri, Vi_next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span>(<span class="params">from_file=<span class="literal">False</span></span>):</span></span><br><span class="line">    Vi = <span class="string">&quot;AAAAAAAAAAAAAAAA&quot;</span></span><br><span class="line">    K1 = <span class="string">&quot;AAAAAAAAAAAAAAAA&quot;</span></span><br><span class="line">    K2 = <span class="string">&quot;AAAAAAAAAAAAAAAA&quot;</span></span><br><span class="line">    <span class="keyword">if</span> from_file:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;init.yaml&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                params = yaml.load(f.read(), Loader=yaml.SafeLoader)</span><br><span class="line">            Vi, K1, K2 = params[<span class="string">&#x27;Vi&#x27;</span>], params[<span class="string">&#x27;K1&#x27;</span>], params[<span class="string">&#x27;K2&#x27;</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> Vi, K1, K2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generation</span>(<span class="params">num_circle</span>):</span></span><br><span class="line">    Vi, K1, K2 = init(<span class="literal">True</span>)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(num_circle):</span><br><span class="line">        present = time.time()</span><br><span class="line">        Ri, Vi = one_circle(present, K1, K2, Vi)</span><br><span class="line">        result.append(Ri)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&quot;Vi&quot;</span>: Vi,</span><br><span class="line">        <span class="string">&quot;K1&quot;</span>: K1,</span><br><span class="line">        <span class="string">&quot;K2&quot;</span>: K2,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;init.yaml&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(yaml.dump(params))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(generation(<span class="number">1</span>))</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7挂载本地镜像</title>
    <url>/2020/12/14/centos-7-gua-zai-ben-di-jing-xiang/</url>
    <content><![CDATA[<h1 id="CentOS-7挂载本地镜像"><a href="#CentOS-7挂载本地镜像" class="headerlink" title="CentOS 7挂载本地镜像"></a>CentOS 7挂载本地镜像</h1><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><ol>
<li> 在设置项里把选项勾上：</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/CentOS%207%E6%8C%82%E8%BD%BD%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E7%BD%AE.png"></p>
<ol start="2">
<li><p>创建挂载点的目录</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /media/cdrom </span><br></pre></td></tr></table></figure>
</li>
<li><p>挂载镜像，默认的镜像是放在/dev/cdrom</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/cdrom  /media/cdrom/  </span><br></pre></td></tr></table></figure>

<p> 这一步可能会提醒镜像只读方式挂载，不用在意。</p>
</li>
<li><p>查看镜像是否挂载成功</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -HT</span><br></pre></td></tr></table></figure>
</li>
<li><p>备份</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">mkdir ./bak	</span><br><span class="line">mv ./*.repo ./bak/</span><br><span class="line">cp ./bak/CentOS-Media.repo  .</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi  CentOS-Media.repo</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/CentOS%207%E6%8C%82%E8%BD%BD%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F/%E8%AE%BE%E7%BD%AE.png"></p>
<ol start="7">
<li><p>清除缓存</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="物理机"><a href="#物理机" class="headerlink" title="物理机"></a>物理机</h2><ol>
<li><p> 上传iso镜像到目录/home (eg)</p>
</li>
<li><p>创建挂载点并挂载镜像文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /media/cdrom </span><br><span class="line">mount -o  loop /home/CentOS-7-x86_64-DVD-1708.iso   /media/cdrom</span><br></pre></td></tr></table></figure>

<p> 备注： -o参数，loop是把一个文件当成硬盘分区挂载到目录</p>
</li>
<li><p>检查挂载成功</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -HT</span><br></pre></td></tr></table></figure>
</li>
<li><p>备份源</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">mkdir ./bak</span><br><span class="line">mv ./*.repo ./bak/</span><br><span class="line">cp ./bak/CentOS-Media.repo .</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim  CentOS-Media.repo</span><br></pre></td></tr></table></figure>

<p> <img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/CentOS%207%E6%8C%82%E8%BD%BD%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F/%E8%AE%BE%E7%BD%AE.png"></p>
</li>
<li><p>清除缓存</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum clean all </span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ELGamal公钥体制加密加签</title>
    <url>/2020/12/24/elgamal-gong-yao-ti-zhi-jia-mi-jia-qian/</url>
    <content><![CDATA[<h1 id="ELGamal公钥体制加密加签"><a href="#ELGamal公钥体制加密加签" class="headerlink" title="ELGamal公钥体制加密加签"></a>ELGamal公钥体制加密加签</h1><blockquote>
<p>  第4章 公钥密码体制.ppt <a href="https://github.com/mednight4/Cryptography-course-ppt/blob/main/%E7%AC%AC4%E7%AB%A0%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6.ppt?raw=true">下载</a></p>
<p>  第7章 数字签名.ppt <a href="https://github.com/mednight4/Cryptography-course-ppt/blob/main/%E7%AC%AC7%E7%AB%A0%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.ppt?raw=true">下载</a></p>
</blockquote>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>注意事项：（关于ElGamal数字签名体制的参数p）</p>
<ul>
<li><p>  p的选择与在<strong>Zp</strong>中计算离散对数的算法有直接关系。从目前的计算水平来看，p至少应该是二进制512位的素数，从长期安全性考虑，应使用1024位或更长的素数。</p>
</li>
<li><p>  p-1最好有大的素因子</p>
</li>
<li><p>  私钥x最好是Zp的素数阶子群的生成元。</p>
</li>
</ul>
<p>关键点：</p>
<ul>
<li>  不要泄露随机数k，否则，根据：</li>
</ul>
<p>$$<br>s\equiv(M-x*r)k^{-1}\pmod{p-1}<br>$$</p>
<p>​            可以计算出私钥<br>$$<br>x\equiv(M-x*k)r^{-1}\pmod{p-1}<br>$$</p>
<ul>
<li>  不要使用同一个随机数k给两个不同的消息签名</li>
</ul>
<h2 id="大素数生成"><a href="#大素数生成" class="headerlink" title="大素数生成"></a>大素数生成</h2><p>知识点：</p>
<ul>
<li><p>  <strong>Miller-Rabin 素性检测</strong></p>
</li>
<li><p>  <strong>Miller-Rabin 测试</strong></p>
</li>
</ul>
<p><code>function.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fastExpMod</span>(<span class="params">b, e, m</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模N大数的幂乘的快速算法</span></span><br><span class="line"><span class="string">    b底数，e幂，m大数N</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    e = <span class="built_in">int</span>(e)</span><br><span class="line">    <span class="keyword">while</span> e != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> e % <span class="number">2</span> != <span class="number">0</span>:  <span class="comment"># 按位与</span></span><br><span class="line">            e -= <span class="number">1</span></span><br><span class="line">            result = (result * b) % m</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        e &gt;&gt;= <span class="number">1</span></span><br><span class="line">        b = (b * b) % m</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">    <span class="comment"># 测试案例</span></span><br><span class="line">    <span class="comment"># c = fastExpMod(3,22,12)</span></span><br><span class="line">    <span class="comment"># print(c) 9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">miller_rabin_test</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;针对随机取得p的素性检测&quot;&quot;&quot;</span></span><br><span class="line">    p = n - <span class="number">1</span>  <span class="comment"># p为要检验得数</span></span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> p % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 最后得到为奇数的p(即m)</span></span><br><span class="line">        r += <span class="number">1</span></span><br><span class="line">        p /= <span class="number">2</span></span><br><span class="line">    b = random.randint(<span class="number">2</span>, n - <span class="number">2</span>)  <span class="comment"># 随机取b=（0.n）</span></span><br><span class="line">    <span class="comment"># 如果情况1    b得p次方  与1  同余  mod n</span></span><br><span class="line">    <span class="keyword">if</span> fastExpMod(b, <span class="built_in">int</span>(p), n) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 通过测试,可能为素数</span></span><br><span class="line">    <span class="comment"># 情况2  b得（2^r  *p）次方  与-1 (n-1) 同余  mod n</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):  <span class="comment"># 检验六次</span></span><br><span class="line">        <span class="keyword">if</span> fastExpMod(b, (<span class="number">2</span> ** i) * p, n) == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 如果该数可能为素数，</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 不可能是素数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_prime_num</span>(<span class="params">start, end</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成大素数 start-end为素数取值区间&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = random.randint(start, end)</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 如果经过10次素性检测，那么很大概率上，这个数就是素数</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">                <span class="keyword">if</span> miller_rabin_test(n):</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    found = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> found:</span><br><span class="line">                <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ex_gcd</span>(<span class="params">a, mod</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;扩展欧几里德算法，内置&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> math.gcd(a, mod) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    u1, u2, u3 = <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    v1, v2, v3 = <span class="number">0</span>, <span class="number">1</span>, mod</span><br><span class="line">    <span class="keyword">while</span> v3 != <span class="number">0</span>:</span><br><span class="line">        q = u3 // v3</span><br><span class="line">        v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3</span><br><span class="line">    <span class="keyword">return</span> u1 % mod</span><br></pre></td></tr></table></figure>

<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p><code>ELGamal.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> funtion <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成密钥，p和g的随机范围可调整&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># todo 可选：0&lt;m&lt;p用为ascii码表表长为255，此处将start初始化为255</span></span><br><span class="line">    start = <span class="number">255</span>  <span class="comment"># ascii长度为起始，保证输入数m一定小于p</span></span><br><span class="line">    end = <span class="number">1024</span>  <span class="comment"># p的最大取值范围</span></span><br><span class="line">    p = create_prime_num(start, end)</span><br><span class="line">    <span class="comment"># todo 可选：g的随机取值范围</span></span><br><span class="line">    g = random.randint(<span class="number">0</span>, <span class="number">100</span>)  <span class="comment"># g是一个本原元</span></span><br><span class="line">    x = random.randint(<span class="number">0</span>, p)</span><br><span class="line">    y = g ** x % p</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;pk&#x27;</span>: (p, g, y), <span class="string">&#x27;sk&#x27;</span>: (p, g, y, x)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">m, pk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;加密算法0&lt;m&lt;p&quot;&quot;&quot;</span></span><br><span class="line">    p, g, y = pk</span><br><span class="line">    k = random.randint(<span class="number">0</span>, p)</span><br><span class="line">    c1 = g ** k % p</span><br><span class="line">    c2 = (m * (y ** k)) % p</span><br><span class="line">    <span class="keyword">return</span> c1, c2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">c, sk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;解密算法&quot;&quot;&quot;</span></span><br><span class="line">    c1, c2 = c</span><br><span class="line">    p, g, y, x = sk</span><br><span class="line">    m = c2 * ex_gcd(c1 ** x, p) % p</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span></span><br><span class="line">    k = get_key()</span><br><span class="line">    print(k)</span><br><span class="line">    raw_m = <span class="built_in">input</span>(<span class="string">&quot;请输入待加密字符串：\n&gt; &quot;</span>)</span><br><span class="line">    m = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>, raw_m))</span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        c_unit = encode(i, k[<span class="string">&#x27;pk&#x27;</span>])</span><br><span class="line">        c.append(c_unit)</span><br><span class="line">    print(<span class="string">&#x27;密文&#x27;</span>, c)</span><br><span class="line">    m = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">        m_unit = decode(i, k[<span class="string">&#x27;sk&#x27;</span>])</span><br><span class="line">        m.append(m_unit)</span><br><span class="line">    print(<span class="string">&#x27;明文&#x27;</span>, m)</span><br><span class="line">    print(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">chr</span>, m))))</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&quot;G:\python environment\python.exe&quot; &quot;G:/Code/IntelliJ Pycharm/Cryptology/ElGamal/ELGamal.py&quot;</span><br><span class="line">&#123;&#x27;pk&#x27;: (829, 89, 795), &#x27;sk&#x27;: (829, 89, 795, 579)&#125;</span><br><span class="line">请输入待加密字符串：</span><br><span class="line">&gt; mednight4</span><br><span class="line">密文 [(221, 605), (131, 383), (269, 346), (688, 505), (597, 77), (394, 485), (223, 178), (89, 201), (616, 665)]</span><br><span class="line">明文 [109, 101, 100, 110, 105, 103, 104, 116, 52]</span><br><span class="line">mednight4</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h2 id="加签"><a href="#加签" class="headerlink" title="加签"></a>加签</h2><p><code>ELGamal_sig.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> funtion <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_key</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成加签的私钥和公钥，p和g的随机范围可调整&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># todo 可选：p和g的随机取值范围</span></span><br><span class="line">    p = create_prime_num(<span class="number">0</span>, <span class="number">1024</span>)</span><br><span class="line">    g = random.randint(<span class="number">0</span>, p)</span><br><span class="line">    x = random.randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">    y = g ** x % p</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;pk&#x27;</span>: (p, g, y), <span class="string">&#x27;sk&#x27;</span>: (p, g, y, x)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">value_k</span>(<span class="params">p</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;选择k时，k应该与p-1互素，否则没有逆元&quot;&quot;&quot;</span></span><br><span class="line">    k_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, p - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> math.gcd(i, p - <span class="number">1</span>) == <span class="number">1</span>:</span><br><span class="line">            k_list.append(i)</span><br><span class="line">    <span class="keyword">return</span> k_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sig</span>(<span class="params">m, sk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;签名算法&quot;&quot;&quot;</span></span><br><span class="line">    p, g, y, x = sk</span><br><span class="line">    k = random.choice(value_k(p))</span><br><span class="line">    r = (g ** k) % p</span><br><span class="line">    s = ((m - x * r) * ex_gcd(k, p - <span class="number">1</span>)) % (p - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">m, sig, pk</span>):</span></span><br><span class="line">    r, s = sig</span><br><span class="line">    p, g, y = pk</span><br><span class="line">    <span class="keyword">return</span> (y ** r) * (r ** s) % p == g ** m % p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="string">&quot;&#123;&#x27;pk&#x27;: (p, g, y), &#x27;sk&#x27;: (p, g, y, x)&#125;&quot;</span>)</span><br><span class="line">    k = get_key()</span><br><span class="line">    print(k)</span><br><span class="line">    raw_m = <span class="built_in">input</span>(<span class="string">&quot;请输入待签名字符串：\n&gt; &quot;</span>)</span><br><span class="line">    m = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>, raw_m))</span><br><span class="line">    sign = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        sign_unit = sig(i, k[<span class="string">&#x27;sk&#x27;</span>])</span><br><span class="line">        sign.append(sign_unit)</span><br><span class="line">    print(<span class="string">&#x27;签名&#x27;</span>, sign)</span><br><span class="line">    tip = <span class="string">&#x27;验签成功&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i,s <span class="keyword">in</span> <span class="built_in">zip</span>(m,sign):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check(i, s, k[<span class="string">&#x27;pk&#x27;</span>]):</span><br><span class="line">            tip = <span class="string">&#x27;验签失败&#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    print(tip)</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">&quot;G:\python environment\python.exe&quot; &quot;G:/Code/IntelliJ Pycharm/Cryptology/ElGamal/ELGamal_sig.py&quot;</span><br><span class="line">&#123;&#x27;pk&#x27;: (p, g, y), &#x27;sk&#x27;: (p, g, y, x)&#125;</span><br><span class="line">&#123;&#x27;pk&#x27;: (101, 31, 58), &#x27;sk&#x27;: (101, 31, 58, 63)&#125;</span><br><span class="line">请输入待签名字符串：</span><br><span class="line">&gt; mednight4</span><br><span class="line">签名 [(54, 11), (24, 83), (19, 37), (78, 24), (37, 86), (25, 24), (81, 59), (24, 88), (88, 92)]</span><br><span class="line">验签成功</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>DES加解密基础实现</title>
    <url>/2020/11/11/des-jia-jie-mi-ji-chu-shi-xian/</url>
    <content><![CDATA[<h1 id="DES加解密基础实现"><a href="#DES加解密基础实现" class="headerlink" title="DES加解密基础实现"></a>DES加解密基础实现</h1><blockquote>
<p>  第3章 分组密码.ppt <a href="https://github.com/mednight4/Cryptography-course-ppt/blob/main/%E7%AC%AC3%E7%AB%A0%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81.ppt?raw=true">下载</a></p>
</blockquote>
<p>大概就是各种乱七八糟的盒子换来换去吧。看了点别人的代码，感觉还能写。</p>
<p><code>funtion.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;function&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 16轮</span></span><br><span class="line">MAX_TIME = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IP置换表</span></span><br><span class="line">ip_table = [<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line">            <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">            <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">            <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">            <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line">            <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆IP置换表</span></span><br><span class="line">inv_ip_table = [<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">                <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">                <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">                <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">                <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">                <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">                <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">                <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># S盒中的S1盒</span></span><br><span class="line">S1 = [<span class="number">14</span>,  <span class="number">4</span>, <span class="number">13</span>,  <span class="number">1</span>,  <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>,  <span class="number">8</span>,  <span class="number">3</span>, <span class="number">10</span>,  <span class="number">6</span>, <span class="number">12</span>,  <span class="number">5</span>,  <span class="number">9</span>,  <span class="number">0</span>,  <span class="number">7</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">15</span>,  <span class="number">7</span>,  <span class="number">4</span>, <span class="number">14</span>,  <span class="number">2</span>, <span class="number">13</span>,  <span class="number">1</span>, <span class="number">10</span>,  <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>,  <span class="number">9</span>,  <span class="number">5</span>,  <span class="number">3</span>,  <span class="number">8</span>,</span><br><span class="line">       <span class="number">4</span>,  <span class="number">1</span>, <span class="number">14</span>,  <span class="number">8</span>, <span class="number">13</span>,  <span class="number">6</span>,  <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">7</span>,  <span class="number">3</span>, <span class="number">10</span>,  <span class="number">5</span>,  <span class="number">0</span>,</span><br><span class="line">      <span class="number">15</span>, <span class="number">12</span>,  <span class="number">8</span>,  <span class="number">2</span>,  <span class="number">4</span>,  <span class="number">9</span>,  <span class="number">1</span>,  <span class="number">7</span>,  <span class="number">5</span>, <span class="number">11</span>,  <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>,  <span class="number">0</span>,  <span class="number">6</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># S盒中的S2盒</span></span><br><span class="line">S2 = [<span class="number">15</span>,  <span class="number">1</span>,  <span class="number">8</span>, <span class="number">14</span>,  <span class="number">6</span>, <span class="number">11</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">9</span>,  <span class="number">7</span>,  <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>,  <span class="number">0</span>,  <span class="number">5</span>, <span class="number">10</span>,</span><br><span class="line">       <span class="number">3</span>, <span class="number">13</span>,  <span class="number">4</span>,  <span class="number">7</span>, <span class="number">15</span>,  <span class="number">2</span>,  <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>,  <span class="number">0</span>,  <span class="number">1</span>, <span class="number">10</span>,  <span class="number">6</span>,  <span class="number">9</span>, <span class="number">11</span>,  <span class="number">5</span>,</span><br><span class="line">       <span class="number">0</span>, <span class="number">14</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>,  <span class="number">4</span>, <span class="number">13</span>,  <span class="number">1</span>,  <span class="number">5</span>,  <span class="number">8</span>, <span class="number">12</span>,  <span class="number">6</span>,  <span class="number">9</span>,  <span class="number">3</span>,  <span class="number">2</span>, <span class="number">15</span>,</span><br><span class="line">      <span class="number">13</span>,  <span class="number">8</span>, <span class="number">10</span>,  <span class="number">1</span>,  <span class="number">3</span>, <span class="number">15</span>,  <span class="number">4</span>,  <span class="number">2</span>, <span class="number">11</span>,  <span class="number">6</span>,  <span class="number">7</span>, <span class="number">12</span>,  <span class="number">0</span>,  <span class="number">5</span>, <span class="number">14</span>,  <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># S盒中的S3盒</span></span><br><span class="line">S3 = [<span class="number">10</span>,  <span class="number">0</span>,  <span class="number">9</span>, <span class="number">14</span>,  <span class="number">6</span>,  <span class="number">3</span>, <span class="number">15</span>,  <span class="number">5</span>,  <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>,  <span class="number">7</span>, <span class="number">11</span>,  <span class="number">4</span>,  <span class="number">2</span>,  <span class="number">8</span>,</span><br><span class="line">      <span class="number">13</span>,  <span class="number">7</span>,  <span class="number">0</span>,  <span class="number">9</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">6</span>, <span class="number">10</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>,  <span class="number">1</span>,</span><br><span class="line">      <span class="number">13</span>,  <span class="number">6</span>,  <span class="number">4</span>,  <span class="number">9</span>,  <span class="number">8</span>, <span class="number">15</span>,  <span class="number">3</span>,  <span class="number">0</span>, <span class="number">11</span>,  <span class="number">1</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>,  <span class="number">7</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>,  <span class="number">0</span>,  <span class="number">6</span>,  <span class="number">9</span>,  <span class="number">8</span>,  <span class="number">7</span>,  <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>,  <span class="number">3</span>, <span class="number">11</span>,  <span class="number">5</span>,  <span class="number">2</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># S盒中的S4盒</span></span><br><span class="line">S4 = [ <span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>,  <span class="number">3</span>,  <span class="number">0</span>,  <span class="number">6</span>,  <span class="number">9</span>, <span class="number">10</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>,  <span class="number">4</span>, <span class="number">15</span>,</span><br><span class="line">      <span class="number">13</span>,  <span class="number">8</span>, <span class="number">11</span>,  <span class="number">5</span>,  <span class="number">6</span>, <span class="number">15</span>,  <span class="number">0</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">7</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>,  <span class="number">9</span>,</span><br><span class="line">      <span class="number">10</span>,  <span class="number">6</span>,  <span class="number">9</span>,  <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>,  <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>,  <span class="number">1</span>,  <span class="number">3</span>, <span class="number">14</span>,  <span class="number">5</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">4</span>,</span><br><span class="line">       <span class="number">3</span>, <span class="number">15</span>,  <span class="number">0</span>,  <span class="number">6</span>, <span class="number">10</span>,  <span class="number">1</span>, <span class="number">13</span>,  <span class="number">8</span>,  <span class="number">9</span>,  <span class="number">4</span>,  <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>,  <span class="number">7</span>,  <span class="number">2</span>, <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># S盒中的S5盒</span></span><br><span class="line">S5 = [ <span class="number">2</span>, <span class="number">12</span>,  <span class="number">4</span>,  <span class="number">1</span>,  <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">5</span>,  <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>,  <span class="number">0</span>, <span class="number">14</span>,  <span class="number">9</span>,</span><br><span class="line">      <span class="number">14</span>, <span class="number">11</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">4</span>,  <span class="number">7</span>, <span class="number">13</span>,  <span class="number">1</span>,  <span class="number">5</span>,  <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>,  <span class="number">3</span>,  <span class="number">9</span>,  <span class="number">8</span>,  <span class="number">6</span>,</span><br><span class="line">       <span class="number">4</span>,  <span class="number">2</span>,  <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>,  <span class="number">7</span>,  <span class="number">8</span>, <span class="number">15</span>,  <span class="number">9</span>, <span class="number">12</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">3</span>,  <span class="number">0</span>, <span class="number">14</span>,</span><br><span class="line">      <span class="number">11</span>,  <span class="number">8</span>, <span class="number">12</span>,  <span class="number">7</span>,  <span class="number">1</span>, <span class="number">14</span>,  <span class="number">2</span>, <span class="number">13</span>,  <span class="number">6</span>, <span class="number">15</span>,  <span class="number">0</span>,  <span class="number">9</span>, <span class="number">10</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># S盒中的S6盒</span></span><br><span class="line">S6 = [<span class="number">12</span>,  <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>,  <span class="number">9</span>,  <span class="number">2</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">0</span>, <span class="number">13</span>,  <span class="number">3</span>,  <span class="number">4</span>, <span class="number">14</span>,  <span class="number">7</span>,  <span class="number">5</span>, <span class="number">11</span>,</span><br><span class="line">      <span class="number">10</span>, <span class="number">15</span>,  <span class="number">4</span>,  <span class="number">2</span>,  <span class="number">7</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>,  <span class="number">0</span>, <span class="number">11</span>,  <span class="number">3</span>,  <span class="number">8</span>,</span><br><span class="line">       <span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>,  <span class="number">5</span>,  <span class="number">2</span>,  <span class="number">8</span>, <span class="number">12</span>,  <span class="number">3</span>,  <span class="number">7</span>,  <span class="number">0</span>,  <span class="number">4</span>, <span class="number">10</span>,  <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>,  <span class="number">6</span>,</span><br><span class="line">       <span class="number">4</span>,  <span class="number">3</span>,  <span class="number">2</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>,  <span class="number">1</span>,  <span class="number">7</span>,  <span class="number">6</span>,  <span class="number">0</span>,  <span class="number">8</span>, <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># S盒中的S7盒</span></span><br><span class="line">S7 = [ <span class="number">4</span>, <span class="number">11</span>,  <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>,  <span class="number">0</span>,  <span class="number">8</span>, <span class="number">13</span>,  <span class="number">3</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">7</span>,  <span class="number">5</span>, <span class="number">10</span>,  <span class="number">6</span>,  <span class="number">1</span>,</span><br><span class="line">      <span class="number">13</span>,  <span class="number">0</span>, <span class="number">11</span>,  <span class="number">7</span>,  <span class="number">4</span>,  <span class="number">9</span>,  <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>,  <span class="number">3</span>,  <span class="number">5</span>, <span class="number">12</span>,  <span class="number">2</span>, <span class="number">15</span>,  <span class="number">8</span>,  <span class="number">6</span>,</span><br><span class="line">       <span class="number">1</span>,  <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>,  <span class="number">3</span>,  <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>,  <span class="number">6</span>,  <span class="number">8</span>,  <span class="number">0</span>,  <span class="number">5</span>,  <span class="number">9</span>,  <span class="number">2</span>,</span><br><span class="line">       <span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>,  <span class="number">8</span>,  <span class="number">1</span>,  <span class="number">4</span>, <span class="number">10</span>,  <span class="number">7</span>,  <span class="number">9</span>,  <span class="number">5</span>,  <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>,  <span class="number">2</span>,  <span class="number">3</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># S盒中的S8盒</span></span><br><span class="line">S8 = [<span class="number">13</span>,  <span class="number">2</span>,  <span class="number">8</span>,  <span class="number">4</span>,  <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>,  <span class="number">1</span>, <span class="number">10</span>,  <span class="number">9</span>,  <span class="number">3</span>, <span class="number">14</span>,  <span class="number">5</span>,  <span class="number">0</span>, <span class="number">12</span>,  <span class="number">7</span>,</span><br><span class="line">       <span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>,  <span class="number">8</span>, <span class="number">10</span>,  <span class="number">3</span>,  <span class="number">7</span>,  <span class="number">4</span>, <span class="number">12</span>,  <span class="number">5</span>,  <span class="number">6</span>, <span class="number">11</span>,  <span class="number">0</span>, <span class="number">14</span>,  <span class="number">9</span>,  <span class="number">2</span>,</span><br><span class="line">       <span class="number">7</span>, <span class="number">11</span>,  <span class="number">4</span>,  <span class="number">1</span>,  <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>,  <span class="number">2</span>,  <span class="number">0</span>,  <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">8</span>,</span><br><span class="line">       <span class="number">2</span>,  <span class="number">1</span>, <span class="number">14</span>,  <span class="number">7</span>,  <span class="number">4</span>, <span class="number">10</span>,  <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>,  <span class="number">9</span>,  <span class="number">0</span>,  <span class="number">3</span>,  <span class="number">5</span>,  <span class="number">6</span>, <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># S盒</span></span><br><span class="line">s_box = [S1, S2, S3, S4, S5, S6, S7, S8]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于对数据进行扩展置换，将32bit数据扩展为48bit</span></span><br><span class="line">extend_table = [<span class="number">32</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,</span><br><span class="line">                 <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>,</span><br><span class="line">                 <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">                <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">                <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">                <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">                <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">                <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>,  <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">p_table = [<span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">            <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>,</span><br><span class="line">           <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex2bin</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;十六进制转二进制比特串&quot;&quot;&quot;</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">        result.extend(int2bit(<span class="built_in">int</span>(text[i], <span class="number">16</span>)))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin2hex</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;二进制比特串转十六进制&quot;&quot;&quot;</span></span><br><span class="line">    result = []</span><br><span class="line">    q = <span class="built_in">len</span>(text) // <span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q):</span><br><span class="line">        dec = <span class="built_in">int</span>(text[<span class="number">4</span> * i]) * <span class="number">8</span> + <span class="built_in">int</span>(text[<span class="number">4</span> * i + <span class="number">1</span>]) * <span class="number">4</span> + \</span><br><span class="line">              <span class="built_in">int</span>(text[<span class="number">4</span> * i + <span class="number">2</span>]) * <span class="number">2</span> + <span class="built_in">int</span>(text[<span class="number">4</span> * i + <span class="number">3</span>]) * <span class="number">1</span></span><br><span class="line">        x = <span class="built_in">hex</span>(dec)[<span class="number">2</span>:].upper()</span><br><span class="line">        result.extend(x)</span><br><span class="line">    rs = <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line">    <span class="keyword">return</span> rs</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2bit</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;0~15整数转比特&quot;&quot;&quot;</span></span><br><span class="line">    a = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        a.insert(<span class="number">0</span>, <span class="built_in">str</span>(n % <span class="number">2</span>))</span><br><span class="line">        n = <span class="built_in">int</span>(n/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ip_replace</span>(<span class="params">text, op</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;IP置换部分，op为0表示正置换，op为1表示逆置换&quot;&quot;&quot;</span></span><br><span class="line">    tmp = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line">    <span class="keyword">if</span> op == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            tmp[i] = text[ip_table[i] - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line">    <span class="keyword">if</span> op == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">            tmp[i] = text[inv_ip_table[i] - <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">e_extend</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;进行扩展，将32位扩展为48位&quot;&quot;&quot;</span></span><br><span class="line">    extend = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">        extend[i] = text[extend_table[i] - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> extend</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s_replace</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;S盒变换部分&quot;&quot;&quot;</span></span><br><span class="line">    s_result = [<span class="number">0</span> <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        row = <span class="number">2</span>*<span class="built_in">int</span>(text[k*<span class="number">6</span>]) + <span class="built_in">int</span>(text[k*<span class="number">6</span>+<span class="number">5</span>])</span><br><span class="line">        column = <span class="number">8</span>*<span class="built_in">int</span>(text[k*<span class="number">6</span>+<span class="number">1</span>]) + <span class="number">4</span>*<span class="built_in">int</span>(text[k*<span class="number">6</span>+<span class="number">2</span>]) + \</span><br><span class="line">            <span class="number">2</span>*<span class="built_in">int</span>(text[k*<span class="number">6</span>+<span class="number">3</span>]) + <span class="built_in">int</span>(text[k*<span class="number">6</span>+<span class="number">4</span>])</span><br><span class="line">        tmp = s_box[k][row * <span class="number">16</span> + column]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            s_result[<span class="number">4</span> * k + i] = int2bit(tmp)[i]</span><br><span class="line">    <span class="keyword">return</span> s_result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_replace</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;P置换部分&quot;&quot;&quot;</span></span><br><span class="line">    presult = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        presult[i] = text[p_table[i] - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> presult</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">bit1, bit2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;异或运算&quot;&quot;&quot;</span></span><br><span class="line">    xor_result = [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bit1))]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bit1)):</span><br><span class="line">        xor_result[i] = <span class="built_in">str</span>(<span class="built_in">int</span>(bit1[i]) ^ <span class="built_in">int</span>(bit2[i]))</span><br><span class="line">    <span class="keyword">return</span> xor_result</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; key_bulid : 生成密钥&quot;&quot;&quot;</span></span><br><span class="line">MaxTime = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成子密钥的置换表1，将64位的密钥转换为56位</span></span><br><span class="line">PC_1 = [<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">        <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">        <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">        <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">        <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">        <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">        <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成子密钥的置换表2，将56位的密钥转换为48位</span></span><br><span class="line">PC_2 = [<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>,</span><br><span class="line">        <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>,</span><br><span class="line">        <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">26</span>, <span class="number">8</span>,</span><br><span class="line">        <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>,</span><br><span class="line">        <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>,</span><br><span class="line">        <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>,</span><br><span class="line">        <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>,</span><br><span class="line">        <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_move</span>(<span class="params">bin_list, step</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;将列表中的元素循环左移&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> bin_list[step:] + bin_list[:step]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成子密钥&quot;&quot;&quot;</span></span><br><span class="line">    key_result = []</span><br><span class="line">    key0 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">56</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(PC_1)):</span><br><span class="line">        key0[i] = key[PC_1[i] - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MaxTime):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成16个密钥&quot;&quot;&quot;</span></span><br><span class="line">        key1 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)]</span><br><span class="line">        <span class="comment"># 确定每次左移的步数</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> i == <span class="number">1</span> <span class="keyword">or</span> i == <span class="number">8</span> <span class="keyword">or</span> i == <span class="number">15</span>:</span><br><span class="line">            step = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            step = <span class="number">2</span></span><br><span class="line">        <span class="comment"># 分成两组</span></span><br><span class="line">        tmp1 = key0[<span class="number">0</span>:<span class="number">28</span>]</span><br><span class="line">        tmp2 = key0[<span class="number">28</span>:<span class="number">56</span>]</span><br><span class="line">        <span class="comment"># 循环左移</span></span><br><span class="line">        tmp1 = list_move(tmp1, step)</span><br><span class="line">        tmp2 = list_move(tmp2, step)</span><br><span class="line">        <span class="comment"># 左右连接</span></span><br><span class="line">        key0 = tmp1 + tmp2</span><br><span class="line">        <span class="comment"># 置换选择</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(PC_2)):</span><br><span class="line">            key1[i] = key0[PC_2[i] - <span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 生成密钥</span></span><br><span class="line">        key_result.append(key1)</span><br><span class="line">    <span class="comment"># 返回的是一个集合包含了每次的密钥</span></span><br><span class="line">    <span class="keyword">return</span> key_result</span><br></pre></td></tr></table></figure>

<p><code>encode.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;encode:加密函数&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> function <span class="keyword">as</span> f</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryption</span>(<span class="params">text, keybit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;text明文,key密钥&quot;&quot;&quot;</span></span><br><span class="line">    keylist = f.build(keybit)</span><br><span class="line">    text1 = f.ip_replace(text, <span class="number">0</span>)  <span class="comment"># IP置换</span></span><br><span class="line">    L = [text1[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">    R = [text1[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">64</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        tmp = R</span><br><span class="line">        tmp = f.e_extend(tmp)</span><br><span class="line">        tmp = f.xor(tmp, keylist[i])</span><br><span class="line">        tmp = f.s_replace(tmp)</span><br><span class="line">        <span class="comment"># print(&quot;轮数:&quot;, i+1, &#x27;\t&#x27;,&quot;S盒压缩后：&quot;, &quot;&quot;.join(tmp))</span></span><br><span class="line">        tmp = f.p_replace(tmp)</span><br><span class="line">        tmp = f.xor(tmp, L)</span><br><span class="line">        L = R</span><br><span class="line">        R = tmp</span><br><span class="line">        <span class="comment"># print(&quot;轮数:&quot;, i+1, &#x27;\t&#x27;,&quot;L值：&quot;, &quot;&quot;.join(L), &#x27;\t&#x27;, &quot;，R值：&quot;, &quot;&quot;.join(R))</span></span><br><span class="line">    L, R = R, L</span><br><span class="line">    ctext = L</span><br><span class="line">    ctext.extend(R)</span><br><span class="line">    ctext = f.ip_replace(ctext, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># print(&quot;\t完成inv_IP初始逆置换:&quot;,&quot;&quot;.join(ctext))</span></span><br><span class="line">    <span class="keyword">return</span> f.bin2hex(ctext)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件作为脚本直接执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    choose = <span class="built_in">input</span>(<span class="string">&quot;请输入选择\n二进制 &gt; 1\n十六进制 &gt; 2\n&gt; &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        plaintext = <span class="built_in">input</span>(<span class="string">&#x27;请输入用二进制表示的明文 \n &gt; &#x27;</span>)</span><br><span class="line">        key = (<span class="built_in">input</span>(<span class="string">&#x27;请输入用二进制表示的密钥 \n &gt; &#x27;</span>))</span><br><span class="line">        ptext = plaintext</span><br><span class="line">        keybit = key</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        plaintext = <span class="built_in">input</span>(<span class="string">&#x27;请输入用十六进制表示的明文 \n &gt; &#x27;</span>)</span><br><span class="line">        <span class="comment"># key = (input(&quot;8位字符集密钥 \n &gt;&quot;).encode().hex())</span></span><br><span class="line">        key = (<span class="built_in">input</span>(<span class="string">&#x27;请输入用十六进制表示的密钥 \n &gt; &#x27;</span>))</span><br><span class="line">        ptext = f.hex2bin(plaintext)</span><br><span class="line">        keybit = f.hex2bin(key)</span><br><span class="line">    <span class="comment"># print(&quot;获取原文：&quot;,&quot;&quot;.join(ptext),&quot;\n获取密钥：&quot;,&quot;&quot;.join(keybit))</span></span><br><span class="line">    print(<span class="string">&#x27;输出的密文为：&#x27;</span> + encryption(ptext, keybit))</span><br><span class="line"></span><br><span class="line"><span class="comment">#  16进制明文 636f6d7075746572</span></span><br><span class="line"><span class="comment">#  16进制密钥 70389aec769284da</span></span><br><span class="line"><span class="comment">#  输出密文  2461029B5988CFB4</span></span><br></pre></td></tr></table></figure>

<p><code>decode.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;decode:解密函数&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> function <span class="keyword">as</span> f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryption</span>(<span class="params">text, keybit</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    text:明文</span></span><br><span class="line"><span class="string">    key:密钥</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    key_list = f.build(keybit)</span><br><span class="line">    text1 = f.ip_replace(text, <span class="number">0</span>)  <span class="comment"># IP置换</span></span><br><span class="line">    L = [text1[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>)]</span><br><span class="line">    R = [text1[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">64</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        tmp = R</span><br><span class="line">        tmp = f.e_extend(tmp)</span><br><span class="line">        tmp = f.xor(tmp, key_list[<span class="number">15</span> - i])</span><br><span class="line">        tmp = f.s_replace(tmp)</span><br><span class="line">        <span class="comment"># print(&quot;轮数:&quot;, i + 1, &#x27;\t&#x27;, &quot;S盒压缩后：&quot;, &quot;&quot;.join(tmp))</span></span><br><span class="line">        tmp = f.p_replace(tmp)</span><br><span class="line">        tmp = f.xor(tmp, L)</span><br><span class="line">        L = R</span><br><span class="line">        R = tmp</span><br><span class="line">        <span class="comment"># print(&quot;轮数:&quot;, i + 1, &quot;L值：&quot;, &quot;&quot;.join(L), &#x27;\t&#x27;, &quot;，R值：&quot;, &quot;&quot;.join(R))</span></span><br><span class="line">    L, R = R, L</span><br><span class="line">    ctext = L</span><br><span class="line">    ctext.extend(R)</span><br><span class="line">    ctext = f.ip_replace(ctext, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># print(&quot;\t完成inv_IP初始逆置换:&quot;, &quot;&quot;.join(ctext))</span></span><br><span class="line">    <span class="keyword">return</span> f.bin2hex(ctext)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件作为脚本直接执行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    choose = <span class="built_in">input</span>(<span class="string">&quot;请输入选择\n二进制 &gt; 1\n十六进制 &gt; 2\n&gt; &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">        print(<span class="string">&quot;64bit的M和K&quot;</span>)</span><br><span class="line">        plaintext = <span class="built_in">input</span>(<span class="string">&#x27;请输入用二进制表示的密文 \n &gt; &#x27;</span>)</span><br><span class="line">        key = (<span class="built_in">input</span>(<span class="string">&#x27;请输入用二进制表示的密钥 \n &gt; &#x27;</span>))</span><br><span class="line">        ptext = plaintext</span><br><span class="line">        keybit = key</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="string">&quot;2&quot;</span>:</span><br><span class="line">        print(<span class="string">&quot;64bit的C和K&quot;</span>)</span><br><span class="line">        plaintext = <span class="built_in">input</span>(<span class="string">&#x27;请输入用十六进制表示的密文 \n &gt; &#x27;</span>)</span><br><span class="line">        <span class="comment"># key = (input(&quot;8位字符集密钥 \n &gt;&quot;).encode().hex())</span></span><br><span class="line">        key = (<span class="built_in">input</span>(<span class="string">&#x27;请输入用十六进制表示的密钥 \n &gt; &#x27;</span>))</span><br><span class="line">        ptext = f.hex2bin(plaintext)</span><br><span class="line">        keybit = f.hex2bin(key)</span><br><span class="line">    <span class="comment"># print(&quot;获取密文：&quot;, &quot;&quot;.join(ptext), &quot;\n获取密钥：&quot;, &quot;&quot;.join(keybit))</span></span><br><span class="line">    print(<span class="string">&#x27;输出的明文为：&#x27;</span> + decryption(ptext, keybit))</span><br><span class="line"></span><br><span class="line"><span class="comment">#  16进制明文 636f6d7075746572</span></span><br><span class="line"><span class="comment">#  16进制密钥 70389aec769284da</span></span><br><span class="line"><span class="comment">#  输出密文  2461029B5988CFB4</span></span><br></pre></td></tr></table></figure>

<p><code>en_for3.py</code>三重DES加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> DES.encode <span class="keyword">as</span> encode</span><br><span class="line"><span class="keyword">import</span> DES.decode <span class="keyword">as</span> decode</span><br><span class="line"><span class="keyword">import</span> DES.function <span class="keyword">as</span> f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">en_for3</span>(<span class="params">plaintext: <span class="built_in">str</span>, key1: <span class="built_in">str</span>, key2: <span class="built_in">str</span></span>) -&gt; str:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    len(str)=16,bit=16</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    en1 = f.hex2bin(encode.encryption(f.hex2bin(plaintext), f.hex2bin(key1)))</span><br><span class="line">    de2 = f.hex2bin(decode.decryption(en1, f.hex2bin(key2)))</span><br><span class="line">    en2 = encode.encryption(de2, f.hex2bin(key1))</span><br><span class="line">    <span class="keyword">return</span> en2</span><br></pre></td></tr></table></figure>

<p>三重DES在后面的生成随机数需要用到。</p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础</title>
    <url>/2020/02/23/html-ji-chu/</url>
    <content><![CDATA[<blockquote>
<p>编辑器：VScode</p>
<p>自用的VScode插件：</p>
<ol>
<li><a href="https://marketplace.visualstudio.com/items?itemName=auchenberg.vscode-browser-preview">Browser Preview</a> : 浏览器内嵌在VScode拆分页</li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a> ：在本地生成静态和动态页面</li>
</ol>
<p>可能会用到的快捷键：</p>
<ol>
<li><code>ctrl + end</code>：光标从头选中一行</li>
<li><code>ctrl + home</code>：光标从尾选中一行</li>
<li><code>ctrl + enter</code>：在下行插入空行</li>
<li>ctrl + ` ：打开集成终端</li>
<li><code>shift + alt + ↓ 和 ↑</code>：向下复制一行</li>
<li><code>alt + ↓ 或 ↑</code>：快速移动一行</li>
<li><code>alt + 鼠标左键</code>：多光标</li>
<li><code>alt + d</code>：转到相同元素的下一个，并开启多光标</li>
<li><code>shift + alt + A  </code>：块注释</li>
<li><code>标签 + Tab</code>：快速补全</li>
</ol>
<p>教程：</p>
<p>视频 <a href="https://www.bilibili.com/video/av52670599?p=1">千锋教育</a></p>
<p>文档 <a href="https://www.w3school.com.cn/html/index.asp">W3school</a></p>
</blockquote>
<br />

<hr>
<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><h2 id="1-三剑客"><a href="#1-三剑客" class="headerlink" title="1. 三剑客"></a>1. 三剑客</h2><p>HTML：结构-&gt;房子的结构<br>CSS：样式-&gt;房子的装修<br>JavaScript：行为-&gt;房子的家具</p>
<h2 id="2-HTML基本结构"><a href="#2-HTML基本结构" class="headerlink" title="2. HTML基本结构"></a>2. HTML基本结构</h2><p>定义：超文本 标记 语言<br>超文本：文本内容 + 非文本内容（文字类信息之外信息：图片、视频、音频等）<br>标记：HTML语法，也叫标签<code> &lt;header&gt;</code>  </p>
<h3 id="1-标签"><a href="#1-标签" class="headerlink" title="1. 标签"></a>1. 标签</h3><p>写法分为两种：</p>
<ul>
<li>单标签 <code>&lt;br /&gt;</code></li>
<li>双标签 <code>&lt;header&gt;&lt;/header&gt;</code><br>上下排列、可以嵌套</li>
</ul>
<p><a href="http://www.html5star.com/manual/html5label-meaning/">HTML5标签含义之元素周期表</a></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/HTML%E5%9F%BA%E7%A1%80/%E5%85%83%E7%B4%A0%E5%91%A8%E6%9C%9F%E8%A1%A8.jpg"></p>
<h3 id="2-属性"><a href="#2-属性" class="headerlink" title="2. 属性"></a>2. 属性</h3><p>来修饰标签，设置当前标签的一些功能<br><code>&lt;标签  属性=&quot;值1&quot;  属性2=&quot;值2&quot;&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span> <span class="attr">title</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    hello world</span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-初始代码"><a href="#3-初始代码" class="headerlink" title="3.初始代码"></a>3.初始代码</h3><p>每个.html文件都有的代码叫做初始代码，要符合html文件的规范写法<br>使用<code>! + Tab</code>生成初始代码，默认生成的代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>介绍</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>				   文档申明：告诉浏览器这是一个html文件</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>			   html最外层标签：包裹着所以html标签代码</span><br><span class="line">    						  lang=&quot;en&quot;表示是一个英文网站</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>	    元信息：编写网页的辅助信息，采用国际编码</span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        Document			   浏览器页面的标签，网页标题</span><br><span class="line">    <span class="tag">&lt;/<span class="name">title</span>&gt;</span>				</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    content					   显示内容的区域</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>body中的属性：<br><code>&lt; body bgcolor=&quot;red&quot;&gt;</code>红色背景<br><code>&lt; body text=&quot;#0000ff&quot;&gt;</code>蓝色文本<br><code>&lt; body link=&quot;blue&quot;&gt;</code>链接为蓝色<br><code>&lt; body vlink =&quot;#H0000&quot;&gt;</code>设置已使用的链接的颜色<br><code>&lt; body alink =&quot;yellow&quot;&gt;</code>设置正在被击中的链接的颜色</p>
<h3 id="4-注释"><a href="#4-注释" class="headerlink" title="4. 注释"></a>4. 注释</h3><p><code>&lt;!-- 已被注释 --&gt;</code></p>
<h3 id="5-HTML语义化"><a href="#5-HTML语义化" class="headerlink" title="5. HTML语义化"></a>5. HTML语义化</h3><p>概念：根据网页中内容的结构，选择适合的HTML标签进行编写。</p>
<p>好处：</p>
<ol>
<li>在没有CSS的情况下，页面也能呈现出很好的内容结构。</li>
<li>有利于SEO，让搜索引擎爬虫更好的理解网页。</li>
<li>方便其他设备解析（如<a href="https://h5o.github.io/">屏幕阅读器</a>、盲人闯读器等）。</li>
<li>便于团队开发与维护。</li>
</ol>
<h3 id="6-标题与段落"><a href="#6-标题与段落" class="headerlink" title="6. 标题与段落"></a>6. 标题与段落</h3><ol>
<li><p>标题<br>双标签：<code>&lt;h1&gt;&lt;/h1&gt; </code>   到   <code> &lt;h6&gt;&lt;/h6&gt;</code>   共六级<br>在一个网页中，h1标题最重要，且一个.html只能出现一次，其他级随意<br>h5 , h6标签不常使用</p>
</li>
<li><p>段落<br>双标签：<code>&lt;p&gt;&lt;/p&gt;</code>  一个p标签就是一个段落</p>
</li>
</ol>
<h3 id="7-强调"><a href="#7-强调" class="headerlink" title="7. 强调"></a>7. 强调</h3><ul>
<li>粗体<code>&lt;strong&gt;&lt;/strong&gt;</code></li>
<li>斜体<code>&lt;em&gt;&lt;/em&gt;</code>，比粗体的强调更轻</li>
<li>设置字体大小<code>&lt;font size=&quot;&quot;&gt;&lt;/font&gt;</code>，1~7</li>
<li>设置字体的颜色<code>&lt;font color = &quot;&quot;&gt;&lt;/font&gt;</code>，使用名字或RGB的十六进制值</li>
<li>下标<code>&lt;sub&gt;&lt;/sub&gt;</code>比如<code>H&lt;sub&gt;2&lt;/sub&gt;O</code>表示H<sub>2</sub>O</li>
<li>上标<code>&lt;sup&gt;&lt;/sup&gt;</code>比如<code>X&lt;sup&gt;2&lt;/sup&gt;</code>表示X<sup>2</sup></li>
<li>删除文本（<del>狗头线</del>）：<code>&lt;del&gt;&lt;/del&gt;</code></li>
<li>插入文本（<u>下划线</u>）：<code>&lt;ins&gt;&lt;/ins&gt;</code></li>
<li>水平线<code>---</code>：<code>&lt;hr&gt;</code><br><code>&lt;hr size=&quot;1&quot;&gt;</code>厚度=1<br><code>&lt;hr width=&quot;1&quot;&gt;</code>宽度可以是百分比或者绝对值<br><code>&lt;hr noshade&gt;</code>没有阴影的水平线</li>
</ul>
<h3 id="8-图片"><a href="#8-图片" class="headerlink" title="8. 图片"></a>8. 图片</h3><p>单标签：<code>&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;</code> alt提示当且仅当图片有问题时会显示</p>
<p>属性：</p>
<ul>
<li><p>titile：<code>&lt;img src=&quot;&quot; alt=&quot;&quot; title=&quot;inf&quot;&gt;</code>鼠标停滞时，提示信息inf</p>
</li>
<li><p>width、height：图片的大小，也可以使用CSS来设置<br><code>&lt;img src=&quot;&quot; alt=&quot;pic&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;</code><br>当图片未设置大小时，也会按照图片默认大小展示。对此不同之处在于：当网络加载速度很慢时，已设置完图片大小的标签，加载完图片前会预留图片的空位；而未设置大小属性的图片则不会。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/HTML%E5%9F%BA%E7%A1%80/slow3G.jpg"></p>
</li>
</ul>
<h3 id="9-文件"><a href="#9-文件" class="headerlink" title="9. 文件"></a>9. 文件</h3><p>相对路径和绝对路径<br>巨硬很喜欢<code>反斜线 \</code>，但是网络地址只允许<code>斜线 /</code>，不要被巨硬带偏</p>
<h3 id="10-链接"><a href="#10-链接" class="headerlink" title="10. 链接"></a>10. 链接</h3><h4 id="1-链接："><a href="#1-链接：" class="headerlink" title="1. 链接："></a>1. 链接：</h4><p>双标签：<code>&lt;a&gt;&lt;/a&gt;</code><br>默认方式下，会在当前页面打开链接</p>
<p>属性：</p>
<ul>
<li><p><code>href</code>：链接地址，需要指明网络协议，https中的secure随意填写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>target</code>：可以改变链接打开方式，是否新建页面打开链接<br>默认在当前页面打开 <code>_self</code><br>在新建页面打开 <code>_blank</code></p>
</li>
</ul>
<h4 id="2-默认设置："><a href="#2-默认设置：" class="headerlink" title="2. 默认设置："></a>2. 默认设置：</h4><p>单标签：<code>&lt;base&gt;</code><br>改变链接的默认行为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>       <span class="comment">&lt;!--默认在当前页面打开_self--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span>访问百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    <span class="comment">&lt;!--未填协议，不能访问--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>访问百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--可以访问--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>访问百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!--可以访问--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="11-跳转锚点"><a href="#11-跳转锚点" class="headerlink" title="11.跳转锚点"></a>11.跳转锚点</h3><ul>
<li><p>方法1：#号 + id<br>起点：<code>&lt;a href=&quot;#html&quot;&gt; HTML &lt;/a&gt;</code><br>终点：<code>&lt;h2 id=&quot;html&quot;&gt; &lt;/h2&gt;</code></p>
</li>
<li><p>方法2：#号 + name              (类似<code>goto</code>+<code>flag：</code>)<br>起点：<code>&lt;a href=&quot;#html&quot;&gt; HTML &lt;/a&gt;</code><br>终点：<code>&lt;a name=&quot;html&quot;&gt; &lt;/a&gt;</code></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#html&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#CSS&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#JavaScript&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#Python&quot;</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;html&quot;</span>&gt;</span>HTML超文本标记语言</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;CSS&quot;</span>&gt;</span>CSS层叠样式表</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第二个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;JavaScript&quot;</span>&gt;</span>JS脚本</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第三个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第三个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;Python&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Python</span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第四个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是第四个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="12-特殊符号"><a href="#12-特殊符号" class="headerlink" title="12.特殊符号"></a>12.特殊符号</h3><p>一些符号不能输出；需要进行转义：可以采用特殊符号</p>
<table>
<thead>
<tr>
<th align="center">特殊字符</th>
<th align="center">含义</th>
<th align="center">特殊字符代码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[space]</td>
<td align="center">空格符</td>
<td align="center"><code>&amp;nbsp;</code></td>
</tr>
<tr>
<td align="center">&copy;</td>
<td align="center">版权</td>
<td align="center"><code>&amp;copy;</code></td>
</tr>
<tr>
<td align="center">&reg;</td>
<td align="center">注册商标</td>
<td align="center"><code>&amp;reg;</code></td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于号</td>
<td align="center"><code>&amp;lt;</code></td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于号</td>
<td align="center"><code>&amp;gt;</code></td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center">和号</td>
<td align="center"><code>&amp;amp;</code></td>
</tr>
<tr>
<td align="center">&yen;</td>
<td align="center">人民币</td>
<td align="center"><code>&amp;yen;</code></td>
</tr>
<tr>
<td align="center">&deg;</td>
<td align="center">摄氏度</td>
<td align="center"><code>&amp;deg;</code></td>
</tr>
</tbody></table>
<p>给HTML表示为<code>&lt;HTML&gt;</code>可以这样 <code>&amp;lt;</code>HTML<code>&amp;gt;</code><br>要使得空格生效 <code>hello &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; world</code></p>
<h3 id="13-列表"><a href="#13-列表" class="headerlink" title="13.列表"></a>13.列表</h3><h4 id="1-无序列表"><a href="#1-无序列表" class="headerlink" title="1. 无序列表"></a>1. 无序列表</h4><p><code>&lt;ul&gt;&lt;li&gt; &lt;/li&gt;&lt;/ul&gt;</code> ：列表的最外层容器、列表顶<br>嵌套规范：ul和li必须是组合出现的，他们之间不能夹有其他标签<br>tips：若想快速创建5个<code>&lt;li&gt; &lt;/li&gt;</code>标签，可以<code>li*5 + Tab</code> </p>
<p>属性：</p>
<ul>
<li>type：（一般用CSS实现）</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>disc</td>
<td>实心圆（默认值）</td>
</tr>
<tr>
<td>circle</td>
<td>空心圆</td>
</tr>
<tr>
<td>square</td>
<td>实行方块</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url</span> <span class="attr">type</span>=<span class="string">&quot;circle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-有序列表"><a href="#2-有序列表" class="headerlink" title="2. 有序列表"></a>2. 有序列表</h4><p><code>&lt;ol&gt;&lt;li&gt; &lt;/li&gt;&lt;/ol&gt;</code> ：列表的最外层容器、列表<br>一般用的比较少，可以用无序列表代替</p>
<p>属性：</p>
<ul>
<li>type：(一般用CSS实现)</li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>( 1 , 2 , 3 , 4 )</td>
</tr>
<tr>
<td>a</td>
<td>( a , b , c  , d )</td>
</tr>
<tr>
<td>A</td>
<td>( A , B , C , D )</td>
</tr>
<tr>
<td>i</td>
<td>罗马字母小写</td>
</tr>
<tr>
<td>I</td>
<td>罗马字母大写</td>
</tr>
</tbody></table>
<h4 id="3-定义列表"><a href="#3-定义列表" class="headerlink" title="3. 定义列表"></a>3. 定义列表</h4><p>列表项需要添加标题进行描述的内容时，常用于footer</p>
<p><code>&lt;dl&gt; &lt;/dl&gt;</code>：定义列表<br><code>&lt;dt&gt; &lt;/dt&gt;</code>：定义专业术语或名词<br><code>&lt;dd&gt; &lt;/dd&gt;</code>：对名词进行解释和描述</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>超文本标记语言<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>超文本标记语言<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>层叠样式表<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>层叠样式表<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>网页脚本语言<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>网页脚本语言<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-嵌套列表"><a href="#4-嵌套列表" class="headerlink" title="4. 嵌套列表"></a>4. 嵌套列表</h4><p>一个层级的列表下的<code>&lt;li&gt; &lt;/li&gt;</code>目录里可以嵌套另外的列表</p>
<h3 id="14-表格标签"><a href="#14-表格标签" class="headerlink" title="14.表格标签"></a>14.表格标签</h3><p><code>&lt;table&gt; &lt;/table&gt;</code>：表格的最外层容器<br><code>&lt;tr&gt; &lt;/tr&gt;</code>：定义表格行<br><code>&lt;th&gt; &lt;/th&gt;</code>：定义表头<br><code>&lt;td&gt; &lt;/td&gt;</code>：定义表格单元<br><code>&lt;caption&gt; &lt;/caption&gt;</code>：定义表格标题<br>之间有嵌套关系，需要符合嵌套规范</p>
<p>语义化标签：有利于形成标准，团队合作和爬虫<br><code>&lt;tHead&gt;&lt;/tHead&gt;</code><br><code>&lt;tBody&gt;&lt;/tBody&gt;</code><br><code>&lt;tFood&gt;&lt;/tFood&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>天气预报<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tHead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>天气<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tHead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tBody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2020年1月1日<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>阴天<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2020年1月1日<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>雨天<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2020年1月1日<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>晴天<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tBody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tFood</span>&gt;</span><span class="tag">&lt;/<span class="name">tFood</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>属性<br>border：表格边框<br>cellpadding：单元格内的空间<br>cellspacing：单元格之间的空间<br>rowspan：合并行<br>colspan：合并列<br>align：左右对齐方式<br>valign：上下对齐方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;30&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;30&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>天气预报<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tHead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>天气<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tHead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tBody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2020年1月1日<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>白天<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>阴天<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>晚上<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>雨天<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2020年1月2日<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>白天<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>晴天<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>网上<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>晴天<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tBody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tFood</span>&gt;</span><span class="tag">&lt;/<span class="name">tFood</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>表格的边框显示状态属性 frame<br><code>&lt;table frame=&quot;边框显示值&quot;&gt;</code></p>
<table>
<thead>
<tr>
<th>frame的值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>box</td>
<td>显示整个表格边框</td>
</tr>
<tr>
<td>void</td>
<td>不显示表格边框</td>
</tr>
<tr>
<td>hsides</td>
<td>只显示表格的上下边框</td>
</tr>
<tr>
<td>vsides</td>
<td>只显示表格的左右边框</td>
</tr>
<tr>
<td>alove</td>
<td>只显示表格的上边框</td>
</tr>
<tr>
<td>below</td>
<td>只显示表格的下边框</td>
</tr>
<tr>
<td>lhs</td>
<td>只显示表格的左边框</td>
</tr>
<tr>
<td>rhs</td>
<td>只显示表格的右边框</td>
</tr>
</tbody></table>
</li>
<li><p><a href="https://www.w3school.com.cn/html/html_tables.asp">W3schoolHTML表格</a></p>
</li>
</ul>
<h3 id="15-表单标签"><a href="#15-表单标签" class="headerlink" title="15.表单标签"></a>15.表单标签</h3><p><code>&lt;form&gt;&lt;/form&gt;</code>：表单的最外层容器，对于嵌套没有规则<br><code>&lt;input&gt;</code>：标签用于搜索用户的信息，根据不同的type属性值，展示不同的控件，比如输入框、密码框、复选框等<br>常用属性：checked、disabled、name、for …</p>
<table>
<thead>
<tr>
<th>type属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>普通的文本输入框</td>
</tr>
<tr>
<td>password</td>
<td>密码输入框</td>
</tr>
<tr>
<td>checkbox</td>
<td>复选框</td>
</tr>
<tr>
<td>radio</td>
<td>单选框</td>
</tr>
<tr>
<td>file</td>
<td>上传文件</td>
</tr>
<tr>
<td>submit</td>
<td>提交按钮</td>
</tr>
<tr>
<td>reset</td>
<td>重置按钮</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>输入框<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>密码框<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>复选框<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>苹果</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>栗子</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">disabled</span>&gt;</span>香蕉</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>单选框<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;man&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;man&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;woman&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;woman&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>上传文件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>提交按钮<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;textarea&gt;&lt;/textarea&gt;</code>：多行文本框，与自带的俩属性cols、rows配合<br><code>&lt;select&gt;&lt;/select&gt;</code> <code> &lt;option&gt;&lt;/option&gt;</code>：下拉菜单</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>下拉菜单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">disabled</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="16-块"><a href="#16-块" class="headerlink" title="16.块"></a>16.块</h3><p><code>&lt;div&gt; &lt;/div&gt;</code>(块)：div全称为divisision，“分割、分区”的意思，<code>&lt;div&gt;</code>标签用来划分一个区域，相当于一块区域容器，可以容纳段落、标题、表格、图像等各种网页元素。HTML中大多数的标签都可以嵌套在<code>&lt;div&gt;</code>标签中，<code>&lt;div&gt;</code>中还可以嵌套多层<code>&lt;div&gt;</code>，用来将网页分割成独立的、不同的部分，来实现网页的规划和布局。<br><code>span</code>(内联)：用来修饰文字</p>
<ul>
<li>div与span都没有任何默认样式，需要配合CS5才行。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        这是一个 <span class="tag">&lt;<span class="name">span</span>&gt;</span>块<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5算法基础实现</title>
    <url>/2020/12/09/md5-suan-fa-ji-chu-shi-xian/</url>
    <content><![CDATA[<h1 id="MD5算法基础实现"><a href="#MD5算法基础实现" class="headerlink" title="MD5算法基础实现"></a>MD5算法基础实现</h1><blockquote>
<p>  第6章Hash函数与消息认证.ppt <a href="https://github.com/mednight4/Cryptography-course-ppt/blob/main/%E7%AC%AC6%E7%AB%A0Hash%E5%87%BD%E6%95%B0%E4%B8%8E%E6%B6%88%E6%81%AF%E8%AE%A4%E8%AF%81.ppt?raw=true">下载</a></p>
</blockquote>
<blockquote>
<p>  源码：<a href="https://blog.csdn.net/adidala/article/details/28677393">https://blog.csdn.net/adidala/article/details/28677393</a>  ，为python2实现</p>
<p>  改为python3：<a href="https://blog.csdn.net/sjxgghg/article/details/106361977">https://blog.csdn.net/sjxgghg/article/details/106361977</a></p>
<p>  本贴代码引用自后者</p>
</blockquote>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>python内置<strong>map()</strong> 会根据提供的函数对指定序列做映射。</p>
<p>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</p>
<p>总之就是可以少写很多range</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># map(function, iterable, ...)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>) :</span>            <span class="comment"># 计算平方数</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])   <span class="comment"># 计算列表各个元素的平方</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment"># 使用 lambda 匿名函数</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提供了两个列表，对相同位置的列表数据进行相加</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>])</span><br><span class="line">[<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">19</span>]</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入math模块，因为要用到sin函数</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义常量，用于初始化128位变量，注意字节顺序，文中的A=0x01234567，这里低值存放低字节，即01 23 45 67，所以运算时A=0x67452301，其他类似。</span></span><br><span class="line"><span class="comment"># 这里用字符串的形势，是为了和hex函数的输出统一，hex(10)输出为&#x27;0xA&#x27;,注意结果为字符串。</span></span><br><span class="line">A = <span class="string">&#x27;0x67452301&#x27;</span></span><br><span class="line">B = <span class="string">&#x27;0xefcdab89&#x27;</span></span><br><span class="line">C = <span class="string">&#x27;0x98badcfe&#x27;</span></span><br><span class="line">D = <span class="string">&#x27;0x10325476&#x27;</span></span><br><span class="line"><span class="comment"># 定义每轮中用到的函数。L为循环左移，注意左移之后可能会超过32位，所以要和0xffffffff做与运算，确保结果为32位。</span></span><br><span class="line">F = <span class="keyword">lambda</span> x, y, z: ((x &amp; y) | ((~x) &amp; z))</span><br><span class="line">G = <span class="keyword">lambda</span> x, y, z: ((x &amp; z) | (y &amp; (~z)))</span><br><span class="line">H = <span class="keyword">lambda</span> x, y, z: (x ^ y ^ z)</span><br><span class="line">I = <span class="keyword">lambda</span> x, y, z: (y ^ (x | (~z)))</span><br><span class="line">L = <span class="keyword">lambda</span> x, n: (((x &lt;&lt; n) | (x &gt;&gt; (<span class="number">32</span> - n))) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line"><span class="comment"># 定义每轮中循环左移的位数，这里用4个元组表示,用元组是因为速度比列表快。</span></span><br><span class="line">shi_1 = (<span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span>) * <span class="number">4</span></span><br><span class="line">shi_2 = (<span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span>) * <span class="number">4</span></span><br><span class="line">shi_3 = (<span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span>) * <span class="number">4</span></span><br><span class="line">shi_4 = (<span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>) * <span class="number">4</span></span><br><span class="line"><span class="comment"># 定义每轮中用到的M[i]次序。</span></span><br><span class="line">m_1 = (i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>))</span><br><span class="line">m_2 = ((<span class="number">1</span> + <span class="number">5</span> * i) % <span class="number">16</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>))</span><br><span class="line">m_3 = ((<span class="number">5</span> + <span class="number">3</span> * i) % <span class="number">16</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>))</span><br><span class="line">m_4 = (<span class="number">7</span> * i % <span class="number">16</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_hex</span>(<span class="params">hex_str</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;翻转十六进制数的顺序：&#x27;0x01234567&#x27; =&gt; &#x27;0x67452301&#x27;&quot;&quot;&quot;</span></span><br><span class="line">    hex_str = hex_str[<span class="number">2</span>:]</span><br><span class="line">    hex_str_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_str), <span class="number">2</span>):</span><br><span class="line">        hex_str_list.append(hex_str[i:i + <span class="number">2</span>])</span><br><span class="line">    hex_str_list.reverse()</span><br><span class="line">    hex_str_result = <span class="string">&#x27;0x&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join(hex_str_list)</span><br><span class="line">    <span class="keyword">return</span> hex_str_result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">T</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义函数，用来产生常数T[i]，常数有可能超过32位，同样需要&amp;0xffffffff操作。注意返回的是十进制的数。&quot;&quot;&quot;</span></span><br><span class="line">    result = (<span class="built_in">int</span>(<span class="number">2</span> ** <span class="number">32</span> * <span class="built_in">abs</span>(math.sin(i)))) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift</span>(<span class="params">shift_list</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;用来将列表中的元素循环右移。&quot;&quot;&quot;</span></span><br><span class="line">    shift_list = [shift_list[<span class="number">3</span>], shift_list[<span class="number">0</span>], shift_list[<span class="number">1</span>], shift_list[<span class="number">2</span>]]</span><br><span class="line">    <span class="keyword">return</span> shift_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">fun_list, f, m, shi</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;主要的函数，参数为当做种子的列表，每轮用到的F，G，H，I，生成的M[]，以及循环左移的位数。该函数完成一轮运算。&quot;&quot;&quot;</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">global</span> Ti_count</span><br><span class="line">    <span class="comment"># 引入全局变量，T(i)是从1到64循环的。</span></span><br><span class="line">    <span class="keyword">while</span> count &lt; <span class="number">16</span>:</span><br><span class="line">        xx = <span class="built_in">int</span>(fun_list[<span class="number">0</span>], <span class="number">16</span>) + f(<span class="built_in">int</span>(fun_list[<span class="number">1</span>], <span class="number">16</span>), <span class="built_in">int</span>(fun_list[<span class="number">2</span>], <span class="number">16</span>), <span class="built_in">int</span>(fun_list[<span class="number">3</span>], <span class="number">16</span>)) + <span class="built_in">int</span>(m[count],<span class="number">16</span>) + T(Ti_count)</span><br><span class="line">        xx = xx &amp; <span class="number">0xffffffff</span></span><br><span class="line">        ll = L(xx, shi[count])</span><br><span class="line">        fun_list[<span class="number">0</span>] = <span class="built_in">hex</span>((<span class="built_in">int</span>(fun_list[<span class="number">1</span>], <span class="number">16</span>) + ll) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        fun_list = shift(fun_list)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        Ti_count += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print (fun_list)</span></span><br><span class="line">    <span class="keyword">return</span> fun_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genM16</span>(<span class="params">order, ascii_list, f_offset</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;该函数生成每轮需要的M[]，最后的参数是为了当有很多分组时，进行偏移。&quot;&quot;&quot;</span></span><br><span class="line">    ii = <span class="number">0</span></span><br><span class="line">    m16 = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    f_offset = f_offset * <span class="number">64</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> order:</span><br><span class="line">        i = i * <span class="number">4</span></span><br><span class="line">        m16[ii] = <span class="string">&#x27;0x&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join((ascii_list[i + f_offset] + ascii_list[i + <span class="number">1</span> + f_offset] + ascii_list[</span><br><span class="line">            i + <span class="number">2</span> + f_offset] + ascii_list[i + <span class="number">3</span> + f_offset]).split(<span class="string">&#x27;0x&#x27;</span>))</span><br><span class="line">        ii += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> m16:</span><br><span class="line">        ind = m16.index(c)</span><br><span class="line">        m16[ind] = reverse_hex(c)</span><br><span class="line">    <span class="keyword">return</span> m16</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_result</span>(<span class="params">f_list</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示结果函数，将最后运算的结果列表进行翻转，合并成字符串的操作。&quot;&quot;&quot;</span></span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    f_list1 = [<span class="number">0</span>] * <span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f_list:</span><br><span class="line">        f_list1[f_list.index(i)] = reverse_hex(i)[<span class="number">2</span>:]</span><br><span class="line">        result = result + f_list1[f_list.index(i)]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill_input</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;输入数据并填充，非中文&quot;&quot;&quot;</span></span><br><span class="line">    input_m = <span class="built_in">input</span>(<span class="string">&#x27;msg &gt; &#x27;</span>)</span><br><span class="line">    <span class="comment"># 填充过程中需要1个‘1’和(488-msg_lenth-1)个‘0’</span></span><br><span class="line">    ascii_list = <span class="built_in">list</span>((<span class="built_in">map</span>(<span class="built_in">hex</span>, <span class="built_in">map</span>(<span class="built_in">ord</span>, input_m))))</span><br><span class="line">    msg_lenth = <span class="built_in">len</span>(ascii_list) * <span class="number">8</span></span><br><span class="line">    <span class="comment"># 对每一个输入先添加一个&#x27;0x80&#x27;，即&#x27;10000000&#x27;,后填入(488-msg_lenth-8)个0</span></span><br><span class="line">    ascii_list.append(<span class="string">&#x27;0x80&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(ascii_list) * <span class="number">8</span> + <span class="number">64</span>) % <span class="number">512</span> != <span class="number">0</span>:</span><br><span class="line">        ascii_list.append(<span class="string">&#x27;0x00&#x27;</span>)</span><br><span class="line">    <span class="comment"># 附加消息，如果附加消息长度大于2**64，使用低64位</span></span><br><span class="line">    <span class="comment"># 最后64为存放消息长度，注意长度存放顺序低位在前,所以是左填充0后反转</span></span><br><span class="line">    msg_lenth_0x = <span class="built_in">hex</span>(msg_lenth)[<span class="number">2</span>:]</span><br><span class="line">    msg_lenth_0x = <span class="string">&#x27;0x&#x27;</span> + msg_lenth_0x.rjust(<span class="number">16</span>, <span class="string">&#x27;0&#x27;</span>) <span class="comment"># 0，高位，低位</span></span><br><span class="line">    msg_lenth_0x_big_order = reverse_hex(msg_lenth_0x)[<span class="number">2</span>:]  <span class="comment"># 低位，高位，0</span></span><br><span class="line">    msg_lenth_0x_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(msg_lenth_0x_big_order), <span class="number">2</span>):</span><br><span class="line">        msg_lenth_0x_list.append(<span class="string">&#x27;0x&#x27;</span> + msg_lenth_0x_big_order[i:i + <span class="number">2</span>])</span><br><span class="line">    ascii_list.extend(msg_lenth_0x_list)</span><br><span class="line">    <span class="keyword">return</span> ascii_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主函数&quot;&quot;&quot;</span></span><br><span class="line">    abcd_list = [A, B, C, D]</span><br><span class="line">    Ti_count = <span class="number">1</span></span><br><span class="line">    ascii_list = fill_input()</span><br><span class="line">    <span class="comment"># 对每个分组进行4轮运算</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(ascii_list) // <span class="number">64</span>):</span><br><span class="line">        <span class="comment"># 将最初128位种子存放在变量中，</span></span><br><span class="line">        aa, bb, cc, dd = abcd_list</span><br><span class="line">        <span class="comment"># 根据顺序产生每轮M[]列表</span></span><br><span class="line">        order_1 = genM16(m_1, ascii_list, i)</span><br><span class="line">        order_2 = genM16(m_2, ascii_list, i)</span><br><span class="line">        order_3 = genM16(m_3, ascii_list, i)</span><br><span class="line">        order_4 = genM16(m_4, ascii_list, i)</span><br><span class="line">        <span class="comment"># 主要四轮运算，注意打印结果列表已经被进行过右移操作！</span></span><br><span class="line">        abcd_list = fun(abcd_list, F, order_1, shi_1)</span><br><span class="line">        <span class="comment"># print (&#x27;--------------------------------------&#x27;)</span></span><br><span class="line">        abcd_list = fun(abcd_list, G, order_2, shi_2)</span><br><span class="line">        <span class="comment"># print (&#x27;--------------------------------------&#x27;)</span></span><br><span class="line">        abcd_list = fun(abcd_list, H, order_3, shi_3)</span><br><span class="line">        <span class="comment"># print (&#x27;--------------------------------------&#x27;)</span></span><br><span class="line">        abcd_list = fun(abcd_list, I, order_4, shi_4)</span><br><span class="line">        <span class="comment"># print (&#x27;--------------------------------------&#x27;)</span></span><br><span class="line">        <span class="comment"># 将最后输出与最初128位种子相加，注意，最初种子不能直接使用abcd_list[0]等，因为abcd_list已经被改变</span></span><br><span class="line">        output_a = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">0</span>], <span class="number">16</span>) + <span class="built_in">int</span>(aa, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_b = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">1</span>], <span class="number">16</span>) + <span class="built_in">int</span>(bb, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_c = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">2</span>], <span class="number">16</span>) + <span class="built_in">int</span>(cc, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        output_d = <span class="built_in">hex</span>((<span class="built_in">int</span>(abcd_list[<span class="number">3</span>], <span class="number">16</span>) + <span class="built_in">int</span>(dd, <span class="number">16</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">        <span class="comment"># 将输出放到列表中，作为下一次128位种子</span></span><br><span class="line">        abcd_list = [output_a, output_b, output_c, output_d]</span><br><span class="line">        <span class="comment"># 将全局变量Ti_count恢复，一遍开始下一个分组的操作。</span></span><br><span class="line">        Ti_count = <span class="number">1</span></span><br><span class="line">        <span class="comment"># 最后调用函数，格式化输出</span></span><br><span class="line">    print(<span class="string">&#x27;md5 &gt; &#x27;</span> + show_result(abcd_list))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP状态码</title>
    <url>/2020/10/30/http-zhuang-tai-ma/</url>
    <content><![CDATA[<h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><p>上回说到了<code>r.status code</code>，记录一下HTTP常见的状态码</p>
<table>
<thead>
<tr>
<th>已定义范围</th>
<th>分类</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1XX</td>
<td>100-101</td>
<td>信息提示</td>
</tr>
<tr>
<td>2XX</td>
<td>200-206</td>
<td>成功</td>
</tr>
<tr>
<td>3XX</td>
<td>300-305</td>
<td>重定向</td>
</tr>
<tr>
<td>4XX</td>
<td>400-415</td>
<td>客户端错误</td>
</tr>
<tr>
<td>5XX</td>
<td>500-505</td>
<td>服务器错误</td>
</tr>
</tbody></table>
<p>其实知道状态码<strong>200</strong>没毛病就可以了。</p>
<h2 id="1XX信息性状态码"><a href="#1XX信息性状态码" class="headerlink" title="1XX信息性状态码"></a>1XX信息性状态码</h2><table>
<thead>
<tr>
<th>状态码</th>
<th>状态消息</th>
<th>含义</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>100</td>
<td>Continue(继续)</td>
<td>收到了请求的起始部分，客户端应该继续请求</td>
<td></td>
</tr>
<tr>
<td>101</td>
<td>Switching Protocols（切换协议）</td>
<td>服务器正根据客户端的指示将协议切换成Update Header列出的协议</td>
<td></td>
</tr>
</tbody></table>
<h2 id="2XX成功状态码"><a href="#2XX成功状态码" class="headerlink" title="2XX成功状态码"></a>2XX成功状态码</h2><ul>
<li><p><strong>204 No Content</strong> (没有内容)</p>
<p>返回的Response中只有一些Header和一个状态行， 没有实体的主题内容（没有response body）<br>204状态码的作用在于： </p>
<ol>
<li>在不获取资源的情况下了解资源的情况（比如判断其类型）</li>
<li>通过查看Response中的状态码， 看看某个对象是否存在</li>
<li>通过查看Header, 测试资源是否被修改了。</li>
</ol>
</li>
<li><p><strong>206 Partial Content</strong> (部分内容)</p>
<p>206状态码代表服务器已经成功处理了部分GET请求（只有发送GET 方法的request, web服务器才可能返回206）</p>
<ul>
<li>FlashGet , 迅雷或者HTTP下载工具都是使用206状态码来实现断点续传</li>
<li>将以个大文档分解为多个下载段同时下载 比如，在线看视频。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态消息</th>
<th>含义</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>OK</td>
<td>服务器成功处理了请求（这个是我们见到最多的）</td>
<td>HTTP协议详解-200</td>
</tr>
<tr>
<td>201</td>
<td>Created（已创建）</td>
<td>对于那些要服务器创建对象的请求来说，资源已创建完毕。</td>
<td></td>
</tr>
<tr>
<td>202</td>
<td>Accepted（已接受）</td>
<td>请求已接受， 但服务器尚未处理</td>
<td></td>
</tr>
<tr>
<td>203</td>
<td>Non-Authoritative Information（非权威信息）</td>
<td>服务器已将事务成功处理，只是实体Header包含的信息不是来自原始服务器，而是来自资源的副本。</td>
<td></td>
</tr>
<tr>
<td>204</td>
<td>No Content(没有内容)</td>
<td>Response中包含一些Header和一个状态行， 但不包括实体的主题内容（没有response body）</td>
<td>状态码204</td>
</tr>
<tr>
<td>205</td>
<td>Reset Content(重置内容)</td>
<td>另一个主要用于浏览器的代码。意思是浏览器应该重置当前页面上所有的HTML表单。</td>
<td></td>
</tr>
<tr>
<td>206</td>
<td>Partial Content（部分内容）</td>
<td>部分请求成功</td>
<td>状态码206</td>
</tr>
</tbody></table>
<h2 id="3XX重定向状态码"><a href="#3XX重定向状态码" class="headerlink" title="3XX重定向状态码"></a>3XX重定向状态码</h2><ul>
<li><p><strong>301 Moved Permanently</strong>（永久移除)</p>
<p>请求的URL已移走。Response中应该包含一个Location URL, 说明资源现在所处的位置</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态消息</th>
<th>含义</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>300</td>
<td>Multiple Choices（多项选择）</td>
<td>客户端请求了实际指向多个资源的URL。这个代码是和一个选项列表一起返回的，然后用户就可以选择他希望的选项了</td>
<td></td>
</tr>
<tr>
<td>301</td>
<td>Moved Permanently（永久移除)</td>
<td>请求的URL已移走。Response中应该包含一个Location URL, 说明资源现在所处的位置</td>
<td>状态码301</td>
</tr>
<tr>
<td>302</td>
<td>Found（已找到）</td>
<td>与状态码301类似。但这里的移除是临时的。 客户端会使用Location中给出的URL，重新发送新的HTTP request</td>
<td>HTTP协议详解-302</td>
</tr>
<tr>
<td><strong>303</strong></td>
<td><strong>See Other（参见其他）</strong></td>
<td><strong>类似302</strong></td>
<td></td>
</tr>
<tr>
<td><strong>304</strong></td>
<td><strong>Not Modified（未修改）</strong></td>
<td><strong>客户的缓存资源是最新的， 要客户端使用缓存</strong></td>
<td><strong>HTTP协议之缓存-304</strong></td>
</tr>
<tr>
<td>305</td>
<td>Use Proxy（使用代理）</td>
<td>必须通过代理访问资源， 代理的地址在Response 的Location中</td>
<td></td>
</tr>
<tr>
<td>306</td>
<td>未使用</td>
<td>这个状态码当前没使用</td>
<td></td>
</tr>
<tr>
<td>307</td>
<td>Temporary Redirect（临时重定向</td>
<td>类似302</td>
<td></td>
</tr>
</tbody></table>
<h2 id="4XX客户端错误状态码"><a href="#4XX客户端错误状态码" class="headerlink" title="4XX客户端错误状态码"></a>4XX客户端错误状态码</h2><ul>
<li><p><strong>400 Bad Request</strong>（坏请求)</p>
<p>发送的Request中的数据有错误(比如：表单有错误，Cookie有错误)， 这个我们也经常见到。 </p>
</li>
<li><p><strong>403 Forbidden</strong> (禁止)</p>
<p>Web客户端发送的请求被Web服务器拒绝了， 如果服务器想说明为什么拒绝请求，可以包含实体的主体部分来对原因进行描述。但这个状态码通常是服务器不想说明拒绝原因。</p>
</li>
<li><p><strong>405 Method Not Allowed</strong> (不允许使用的方法)</p>
<p>405是指Web服务器不支持Request中的方法。</p>
</li>
<li><p><strong>411 Length Required</strong>（要求长度指示）</p>
<p>服务器要求在Request中包含Content-Length。</p>
<p>当浏览器使用Post方法，发送数据给Web服务器时， 必须要有Content-Length。这样Web服务器才知道你要发送多少数据，否则Web服务器会返回411状态码</p>
</li>
<li><p><strong>413 Request Entity Too Large</strong>（请求实体太大）</p>
<p>客户端发送的实体主体部分比服务器能够或者希望处理的要大。 一般情况下我们看不到这个状态码。 因为浏览器不会发送太大的数据给网站，但是机器人可能会。</p>
</li>
<li><p><strong>414 Request URL Too Long</strong> (请求URI太长)</p>
<p>就是说Request URL太长， 一般浏览器本身对URL的长度就会有限制，所以不会发送URL很长的Request.。我们平常是根本看不到414错误的。 但是机器人可以发送很长URL。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态消息</th>
<th>含义</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>400</td>
<td>Bad Request（坏请求）</td>
<td>告诉客户端，它发送了一个错误的请求。</td>
<td>状态码400</td>
</tr>
<tr>
<td>401</td>
<td>Unauthorized（未授权）</td>
<td>需要客户端对自己认证</td>
<td>HTTP协议之基本认证-401</td>
</tr>
<tr>
<td>402</td>
<td>Payment Required（要求付款）</td>
<td>这个状态还没被使用， 保留给将来用</td>
<td></td>
</tr>
<tr>
<td>403</td>
<td>Forbidden（禁止）</td>
<td>请求被服务器拒绝了</td>
<td>状态码403</td>
</tr>
<tr>
<td>404</td>
<td>Not Found（未找到）</td>
<td>未找到资源</td>
<td>HTTP协议详解-404</td>
</tr>
<tr>
<td>405</td>
<td>Method Not Allowed（不允许使用的方法）</td>
<td>不支持该Request的方法。</td>
<td>状态码405</td>
</tr>
<tr>
<td>406</td>
<td>Not Acceptable（无法接受）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>407</td>
<td>Proxy Authentication Required(要求进行代理认证)</td>
<td>与状态码401类似， 用于需要进行认证的代理服务器</td>
<td>HTTP协议之代理-407</td>
</tr>
<tr>
<td>408</td>
<td>Request Timeout（请求超时）</td>
<td>如果客户端完成请求时花费的时间太长， 服务器可以回送这个状态码并关闭连接</td>
<td></td>
</tr>
<tr>
<td>409</td>
<td>Conflict（冲突）</td>
<td>发出的请求在资源上造成了一些冲突</td>
<td></td>
</tr>
<tr>
<td>410</td>
<td>Gone（消失了）</td>
<td>服务器曾经有这个资源，现在没有了， 与状态码404类似</td>
<td></td>
</tr>
<tr>
<td>411</td>
<td>Length Required（要求长度指示）</td>
<td>服务器要求在Request中包含Content-Length。</td>
<td>状态码411</td>
</tr>
<tr>
<td>412</td>
<td>Precondition Failed（先决条件失败）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>413</td>
<td>Request Entity Too Large（请求实体太大）</td>
<td>客户端发送的实体主体部分比服务器能够或者希望处理的要大</td>
<td>状态码413</td>
</tr>
<tr>
<td>414</td>
<td>Request URI Too Long（请求URI太长）</td>
<td>客户端发送的请求所携带的URL超过了服务器能够或者希望处理的长度</td>
<td>状态码414</td>
</tr>
<tr>
<td>415</td>
<td>Unsupported Media Type（不支持的媒体类型）</td>
<td>服务器无法理解或不支持客户端所发送的实体的内容类型</td>
<td></td>
</tr>
<tr>
<td>416</td>
<td>Requested Range Not Satisfiable（所请求的范围未得到满足）</td>
<td></td>
<td></td>
</tr>
<tr>
<td>417</td>
<td>Expectation Failed（无法满足期望）</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="5XX服务器错误状态码"><a href="#5XX服务器错误状态码" class="headerlink" title="5XX服务器错误状态码"></a>5XX服务器错误状态码</h2><ul>
<li><p><strong>500 Internal Server Error</strong> (内部服务器错误)</p>
<p>这个太常见了， 我们开发网站的时候，当我们的程序出错了时，就会返回500错误。</p>
</li>
<li><p><strong>501 Not Implemented</strong> (未实现)</p>
<p>客户端发起的请求超出服务器的能力范围(比如，使用了服务器不支持的请求方法)时，使用此状态码）。 一般的Web服务器只支持GET和POST方法。</p>
</li>
<li><p><strong>502 Bad Gateway</strong>（网关故障）</p>
<p>代理使用的服务器遇到了上游的无效响应。 </p>
</li>
<li><p><strong>505 HTTP Version Not Supported</strong> (不支持的HTTP版本)</p>
<p>表示Web服务器不支持此HTTP协议的版本。 </p>
<p>众所周知我们现在使用的HTTP协议版本是HTTP/1.1， 如果我们发送一个HTTP/2.0 的request 给博客园， 博客园肯定不能支持HTTP/2.0，所以会返回505 </p>
</li>
</ul>
<table>
<thead>
<tr>
<th>状态码</th>
<th>状态消息</th>
<th>含义</th>
<th>实例</th>
</tr>
</thead>
<tbody><tr>
<td>500</td>
<td>Internal Server Error(内部服务器错误)</td>
<td>服务器遇到一个错误，使其无法为请求提供服务</td>
<td>状态码500</td>
</tr>
<tr>
<td>501</td>
<td>Not Implemented（未实现）</td>
<td>客户端发起的请求超出服务器的能力范围(比如，使用了服务器不支持的请求方法)时，使用此状态码。</td>
<td>状态码501</td>
</tr>
<tr>
<td>502</td>
<td>Bad Gateway（网关故障）</td>
<td>代理使用的服务器遇到了上游的无效响应</td>
<td>状态码502</td>
</tr>
<tr>
<td>503</td>
<td>Service Unavailable（未提供此服务）</td>
<td>服务器目前无法为请求提供服务，但过一段时间就可以恢复服务</td>
<td></td>
</tr>
<tr>
<td>504</td>
<td>Gateway Timeout（网关超时）</td>
<td>与状态吗408类似， 但是响应来自网关或代理，此网关或代理在等待另一台服务器的响应时出现了超时</td>
<td></td>
</tr>
<tr>
<td>505</td>
<td>HTTP Version Not Supported（不支持的HTTP版本）</td>
<td>服务器收到的请求使用了它不支持的HTTP协议版本。 有些服务器不支持HTTP早期的HTTP协议版本，也不支持太高的协议版本</td>
<td>状态码505</td>
</tr>
</tbody></table>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>状态码：  <a href="https://blog.csdn.net/hzw05103020/article/details/47276005">https://blog.csdn.net/hzw05103020/article/details/47276005</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA加解密基础实现</title>
    <url>/2020/11/11/idea-jia-jie-mi-ji-chu-shi-xian/</url>
    <content><![CDATA[<h1 id="IDEA加解密基础实现"><a href="#IDEA加解密基础实现" class="headerlink" title="IDEA加解密基础实现"></a>IDEA加解密基础实现</h1><blockquote>
<p>  第3章 分组密码.ppt <a href="https://github.com/mednight4/Cryptography-course-ppt/blob/main/%E7%AC%AC3%E7%AB%A0%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81.ppt?raw=true">下载</a></p>
</blockquote>
<p>idea加密过程非常很清晰，码字人表示很喜欢，就是解密有点折腾。</p>
<p>解密是在加密的K上进行变动的，按理说可以直接由k序列生成de_k，我懒。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Message = <span class="string">&quot;1010101011100110010101010000111111001100001100111001100101100110&quot;</span>  <span class="comment"># 64</span></span><br><span class="line">Key = <span class="string">&quot;00000000111111110000000011111111111111110000111111110000111111110000111111110000111111110000000000001111111111111111000000001111&quot;</span>  <span class="comment"># 128</span></span><br><span class="line">ADDMOD = <span class="number">65536</span>  <span class="comment"># 加法模</span></span><br><span class="line">MULMOD = <span class="number">65537</span>  <span class="comment"># 乘法模</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin2dec</span>(<span class="params"><span class="built_in">bin</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;二进制转十进制,输入二进制位数应该为16位&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="built_in">bin</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int2bin</span>(<span class="params">Int</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;二进制转十进制输出二进制位数应该为16位&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bin</span>(Int)[<span class="number">2</span>:].zfill(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">bit1, bit2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;异或运算 输入参数str16&quot;&quot;&quot;</span></span><br><span class="line">    xor_result = [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bit1))]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bit1)):</span><br><span class="line">        xor_result[i] = <span class="built_in">str</span>(<span class="built_in">int</span>(bit1[i]) ^ <span class="built_in">int</span>(bit2[i]))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(xor_result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addmod</span>(<span class="params">bit1, bit2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;加模运算16位 输入参数str16 str16&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> int2bin((bin2dec(bit1) + bin2dec(bit2)) % ADDMOD)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mulmod</span>(<span class="params">bit1, bit2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;乘模运算16位 输入参数str16 str16&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> bin2dec(bit1) == <span class="number">0</span>:</span><br><span class="line">        bit1 = int2bin(ADDMOD)</span><br><span class="line">    <span class="keyword">if</span> bin2dec(bit2) == <span class="number">0</span>:</span><br><span class="line">        bit2 = int2bin(ADDMOD)</span><br><span class="line">    result = ((bin2dec(bit1) * bin2dec(bit2)) % MULMOD) % ADDMOD</span><br><span class="line">    <span class="keyword">return</span> int2bin(result) <span class="keyword">if</span> result != mulmod <span class="keyword">else</span> int2bin(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_X</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;将输入的64位 分解压缩成16*4 返回&#123;X[3][16]&quot;&quot;&quot;</span></span><br><span class="line">    X = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(x), <span class="number">16</span>):</span><br><span class="line">        X.append(x[i:i + <span class="number">16</span>])</span><br><span class="line">    <span class="keyword">return</span> X</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left_move</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;循环左移&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> key[<span class="number">25</span>:] + key[:<span class="number">25</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_Z</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取Z1-Z52 返回&#123;Z[0][6]-Z[7][6]&#125; + Z[8][4]&quot;&quot;&quot;</span></span><br><span class="line">    num, z_all, Z = <span class="number">0</span>, [], []  <span class="comment"># z_all未进行6,6,6...4分类的Z列表;Z进行6,6,6...4分类的Z列表</span></span><br><span class="line">    <span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">51</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">128</span>, <span class="number">16</span>):</span><br><span class="line">            z_all.append(Key[i:(i + <span class="number">16</span>)])</span><br><span class="line">            <span class="keyword">if</span> (num &gt;= <span class="number">51</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        key = left_move(key)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(z_all), <span class="number">6</span>):  <span class="comment"># z为52位</span></span><br><span class="line">        Z.append(z_all[i:(i + <span class="number">6</span>)])</span><br><span class="line">    <span class="keyword">return</span> Z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_circle</span>(<span class="params">x, z</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;一轮的算法，输入X[3],Z[5],返回&#123;W[0]-W[3]&#125; result的值每部计算从左往右，从上到下命名&quot;&quot;&quot;</span></span><br><span class="line">    result = [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">14</span>)]</span><br><span class="line">    result[<span class="number">0</span>] = mulmod(x[<span class="number">0</span>], z[<span class="number">0</span>])</span><br><span class="line">    result[<span class="number">1</span>] = addmod(x[<span class="number">2</span>], z[<span class="number">2</span>])</span><br><span class="line">    result[<span class="number">2</span>] = addmod(x[<span class="number">1</span>], z[<span class="number">1</span>])</span><br><span class="line">    result[<span class="number">3</span>] = mulmod(x[<span class="number">3</span>], z[<span class="number">3</span>])</span><br><span class="line">    result[<span class="number">4</span>] = xor(result[<span class="number">0</span>], result[<span class="number">1</span>])</span><br><span class="line">    result[<span class="number">5</span>] = xor(result[<span class="number">2</span>], result[<span class="number">3</span>])</span><br><span class="line">    result[<span class="number">6</span>] = mulmod(result[<span class="number">4</span>], z[<span class="number">4</span>])</span><br><span class="line">    result[<span class="number">7</span>] = addmod(result[<span class="number">5</span>], result[<span class="number">6</span>])</span><br><span class="line">    result[<span class="number">8</span>] = mulmod(result[<span class="number">7</span>], z[<span class="number">5</span>])</span><br><span class="line">    result[<span class="number">9</span>] = addmod(result[<span class="number">8</span>], result[<span class="number">6</span>])</span><br><span class="line">    result[<span class="number">10</span>] = xor(result[<span class="number">0</span>], result[<span class="number">8</span>])</span><br><span class="line">    result[<span class="number">11</span>] = xor(result[<span class="number">9</span>], result[<span class="number">3</span>])</span><br><span class="line">    result[<span class="number">12</span>] = xor(result[<span class="number">2</span>], result[<span class="number">9</span>])</span><br><span class="line">    result[<span class="number">13</span>] = xor(result[<span class="number">8</span>], result[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">10</span>], result[<span class="number">13</span>], result[<span class="number">12</span>], result[<span class="number">11</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">last_circle</span>(<span class="params">w, z</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;最后一轮&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> mulmod(w[<span class="number">0</span>], z[<span class="number">0</span>]), addmod(w[<span class="number">2</span>], z[<span class="number">1</span>]), addmod(w[<span class="number">1</span>], z[<span class="number">2</span>]), mulmod(w[<span class="number">3</span>], z[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">message, key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;加密&quot;&quot;&quot;</span></span><br><span class="line">    Z = get_Z(key)</span><br><span class="line">    X = get_X(message)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        X = one_circle(X, Z[i])</span><br><span class="line">        <span class="comment"># if i == 0 or i == 1:</span></span><br><span class="line">        <span class="comment">#     print(&quot;第一轮和第二轮的值为&quot;, X)  # 作业</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(last_circle(X, Z[<span class="number">8</span>]))</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;原文&quot;</span>,Message)</span><br><span class="line">secret = encode(Message, Key)</span><br><span class="line">print(<span class="string">&quot;加密结果为：&quot;</span>, secret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_niyuan_mul</span>(<span class="params">a</span>):</span></span><br><span class="line">    a = bin2dec(a)</span><br><span class="line">    niyuan = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (a * niyuan) % MULMOD != <span class="number">1</span>:</span><br><span class="line">        niyuan += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> int2bin(niyuan)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_niyuan_add</span>(<span class="params">a</span>):</span></span><br><span class="line">    <span class="keyword">return</span> int2bin(ADDMOD - bin2dec(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_de_Z</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取Z1-Z52 返回&#123;Z[0][6]-Z[7][6]&#125; + Z[8][4]&quot;&quot;&quot;</span></span><br><span class="line">    num, z_all, Z = <span class="number">0</span>, [], []  <span class="comment"># z_all未进行6,6,6...4分类的Z列表;Z进行6,6,6...4分类的Z列表</span></span><br><span class="line">    <span class="keyword">for</span> time <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">51</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">128</span>, <span class="number">16</span>):</span><br><span class="line">            z_all.append(Key[i:(i + <span class="number">16</span>)])</span><br><span class="line">            <span class="keyword">if</span> (num &gt;= <span class="number">51</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        key = left_move(key)</span><br><span class="line">    <span class="comment"># print(z_all)</span></span><br><span class="line">    <span class="comment"># 解密过程中的变换</span></span><br><span class="line">    z=z_all[:]  <span class="comment"># 深拷贝</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(z_all), <span class="number">6</span>):</span><br><span class="line">        z_all[i] = get_niyuan_mul(z[<span class="number">48</span> - i])</span><br><span class="line">    z_all[<span class="number">1</span>], z_all[<span class="number">49</span>] = get_niyuan_add(z[<span class="number">49</span>]), get_niyuan_add(z[<span class="number">1</span>])</span><br><span class="line">    z_all[<span class="number">2</span>], z_all[<span class="number">50</span>] = get_niyuan_add(z[<span class="number">50</span>]), get_niyuan_add(z[<span class="number">2</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, <span class="number">45</span>, <span class="number">6</span>):</span><br><span class="line">        z_all[i], z_all[i + <span class="number">1</span>], z_all[<span class="number">50</span> - i], z_all[<span class="number">50</span> - i + <span class="number">1</span>] = get_niyuan_add(z[<span class="number">50</span> - i + <span class="number">1</span>]), get_niyuan_add(</span><br><span class="line">            z[<span class="number">50</span> - i]), get_niyuan_add(z[i+<span class="number">1</span>]), get_niyuan_add(z[i])</span><br><span class="line">        <span class="comment"># 7 8 43 44 = 44 43 8 7</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="built_in">len</span>(z_all), <span class="number">6</span>):</span><br><span class="line">        z_all[i] = get_niyuan_mul(z[<span class="number">54</span> - i])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="built_in">len</span>(z_all), <span class="number">6</span>):</span><br><span class="line">        z_all[i] = z[<span class="number">50</span> - i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>, <span class="built_in">len</span>(z_all), <span class="number">6</span>):</span><br><span class="line">        z_all[i] = z[<span class="number">52</span> - i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(z_all), <span class="number">6</span>):  <span class="comment"># z为52位</span></span><br><span class="line">        Z.append(z_all[i:(i + <span class="number">6</span>)])</span><br><span class="line">    <span class="comment"># print(Z)</span></span><br><span class="line">    <span class="keyword">return</span> Z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">message, key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;加密&quot;&quot;&quot;</span></span><br><span class="line">    Z = get_de_Z(key)</span><br><span class="line">    X = get_X(secret)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        X = one_circle(X, Z[i])</span><br><span class="line">        <span class="comment"># if i == 0 or i == 1:</span></span><br><span class="line">        <span class="comment">#     print(&quot;第一轮和第二轮的值为&quot;, X)  # 作业</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(last_circle(X, Z[<span class="number">8</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;解密结果为&quot;</span>, decode(secret,Key))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>NFS服务器配置</title>
    <url>/2020/12/24/nfs-fu-wu-qi-pei-zhi/</url>
    <content><![CDATA[<h1 id="NFS服务器配置"><a href="#NFS服务器配置" class="headerlink" title="NFS服务器配置"></a>NFS服务器配置</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>在Vmware虚拟机中启动两台Linux系统</p>
<p>一台作为NFS服务器，本例中给出的IP地址为192.168.5.20</p>
<p>一台作为NFS客户端，本例中给出的IP地址为192.168.5.10</p>
<p>配置一个NFS服务器，使得客户机可以浏览NFS服务器中/home/ftp目录下的内容，但不可以修改。</p>
<p>虚拟机网络采用nat静态，与Vmnet8同一网段。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="服务器的配置"><a href="#服务器的配置" class="headerlink" title="服务器的配置"></a>服务器的配置</h3><ol>
<li> <strong>检测安装NFS所需的软件包</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rpm -qa nfs-utils</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm -qa rpcbind</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm install nfs-utils</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm install rpcbind</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li> <strong>修改配置文件</strong></li>
</ol>
<p>修改配置文件/etc/exports，添加行：/home/ftp 192.168.5.10（ro）</p>
<p>ro表示只读</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vi /etc/exports</span></span><br></pre></td></tr></table></figure>

<p>添加允许的ip</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /home/ftp 192.168.5.10(ro)</span></span><br></pre></td></tr></table></figure>

<p>表示将文件共享到IP为192.168..10的主机，方式为只读。修改后，存盘退出</p>
<ol start="3">
<li> <strong>启动NFS服务</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl start rpcbind</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">enable</span> rpcbind</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl start nfs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl <span class="built_in">enable</span> nfs</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li> <strong>配置并重启防火墙</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --permanent --add-port=111/tcp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --permanent --add-port=111/udp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --permanent --add-port=2049/tcp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --permanent --add-port=2049/udp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --permanent --add-port=20048/tcp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --permanent --add-port=20048/udp</span></span><br></pre></td></tr></table></figure>

<p>或者直接开启相关服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> firewall-cmd --permanent --add-service=nfs</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li> <strong>检查NFS服务器的状态</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> showmount -e 127.0.0.1</span></span><br><span class="line">Export list for 127.0.0.1:</span><br><span class="line">/home/ftp 192.168.5.20</span><br></pre></td></tr></table></figure>

<ol start="6">
<li> <strong>创建一个文件</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> /home/ftp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;hello&quot;</span> &gt; text.txt</span></span><br></pre></td></tr></table></figure>

<h3 id="客户机的配置"><a href="#客户机的配置" class="headerlink" title="客户机的配置"></a>客户机的配置</h3><ol>
<li> <strong>安装nfs-utils客户端</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install nfs-utils</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li> <strong>显示NFS服务器上的共享目录</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> showmount -e 192.168.5.20</span></span><br><span class="line">Export list for 192.168.5.20</span><br><span class="line">/home/ftp/192.168.5.10</span><br></pre></td></tr></table></figure>

<ol start="3">
<li> <strong>挂载服务器网络文件夹</strong></li>
</ol>
<p>将NFS服务器（192.168.5.20）上的/home/ftp目录安装到本地机192.168.222.2的/home/test目录下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mount 192.168.5.20:/home/ftp /home/<span class="built_in">test</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mount | grep nfs</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li> <strong>查看文件夹内容</strong></li>
</ol>
<p>挂载成功后可以利用ls等命令操作/home/test目录，实际操作的为192.168.5.20服务器上/home/ftp目录下的内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ls /home/<span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li> <strong>卸载共享目录</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> umount /home/<span class="built_in">test</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls /home/<span class="built_in">test</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mount | grep nfs</span></span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li><p>控制客户端读写权限的参数是/etc/exports文件路径里的：</p>
<p>  ro：只读设置，这样NFS客户端只能读、不能写（默认设置）</p>
<p>  rw：读写设置，NFS 客户端可读写</p>
</li>
<li><p>  客户机只需要安装nfs客户端nfs-utils,不需要rpcbind服务</p>
</li>
<li><p>  NFS服务开启后，还需要给服务器的防火墙端口配置启动状态，否则，即使客户机能找到服务器地址也不能访问NFS服务。NFS默认端口为111、2049、20048</p>
</li>
<li><p>未配置好防火墙或者服务器主机未将客户机IP纳入exports允许范围时，出现：</p>
  <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">mount.nfs:access denied by server while mounting 192.168.5.20:/home/ftp </span><br></pre></td></tr></table></figure>
</li>
<li><p>若想同时允许一个网段192.168.5.0的所有主机读写访问，可以在exports里编辑：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">home/ftp 192.168.5.*(rw)</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MD技巧</title>
    <url>/2021/01/25/md-ji-qiao/</url>
    <content><![CDATA[<h1 id="MD技巧"><a href="#MD技巧" class="headerlink" title="MD技巧"></a>MD技巧</h1><blockquote>
<p>  基于hexo-theme-next-8.0.2自带的hexo插件实现</p>
</blockquote>
<p>在hexo这个框架下可以使用的一些特别的md排版技巧，这里用的next默认自带的插件，如果你这么写了却无效，那是因为你的hexo主题没有默认安装对应的依赖插件，可以搜索对应的hexo插件并使用npm安装。</p>
<p>对了，这里用到了大量的<code>&#123;&#123;&#125;&#125;，&#123;% %&#125;</code>这种hexo无法转义的字符。如果会出现<code>hexo g</code>或者<code>hexo s</code>报错的情况，考虑你的文档里是否存在<code>&#123;% %&#125;</code>这样单独的，没有写成一对<code>&#123;% %&#125;&#123;% %&#125;</code>的语法。</p>
<h2 id="mathjax公式"><a href="#mathjax公式" class="headerlink" title="mathjax公式"></a>mathjax公式</h2><p>在yaml配置文件里打开开关：</p>
<p>一般数学公式用mathjax就行了，katex专业排论文的，关于katex，我以后会开一篇帖子记录一下语法。</p>
<blockquote>
<p>  mathjax项目地址：<a href="https://github.com/mathjax/MathJax">https://github.com/mathjax/MathJax</a></p>
<p>  katex项目地址：<a href="https://github.com/KaTeX/KaTeX">https://github.com/KaTeX/KaTeX</a></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Math Formulas Render Support</span></span><br><span class="line"><span class="comment"># Warning: Please install / uninstall the relevant renderer according to the documentation.</span></span><br><span class="line"><span class="comment"># See: https://theme-next.js.org/docs/third-party-services/math-equations</span></span><br><span class="line"><span class="comment"># Server-side plugin: https://github.com/next-theme/hexo-filter-mathjax</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (false) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to true, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>mathjax语法看这里：<a href="https://www.jianshu.com/p/25f0139637b7">markdown中公式编辑教程 - 简书 (jianshu.com)</a>，比较多，就不复制粘贴了。跳转页面预览：</p>
<iframe id="m4_iframe" src="https://www.jianshu.com/p/25f0139637b7" scrolling="yes" frameborder="no" width=100%> </iframe>
<script type="text/javascript">  
document.getElementById("m4_iframe").style.height=document.getElementById("m4_iframe").scrollWidth*0.76+"px";</script>

<p>更多介绍公式语法的博客：</p>
<blockquote>
<p>  <a href="https://blog.csdn.net/dabokele/article/details/79577072">Mathjax公式教程_dabokele的博客</a></p>
<p>  <a href="https://blog.csdn.net/ethmery/article/details/50670297">基本数学公式语法(of MathJax)_树屋Treehouse-CSDN博客</a></p>
<p>  <a href="https://blog.csdn.net/lilongsy/article/details/79378620">常用数学符号的LaTeX表示方法_小龙在线</a></p>
</blockquote>
<h2 id="iframe的响应式"><a href="#iframe的响应式" class="headerlink" title="iframe的响应式"></a>iframe的响应式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;m4_iframe&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://www.jianshu.com/p/25f0139637b7&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">scrolling</span>=<span class="string">&quot;yes&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">100%</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span>  </span><br><span class="line"><span class="javascript">	<span class="built_in">document</span>.getElementById(<span class="string">&quot;m4_iframe&quot;</span>).style.height</span></span><br><span class="line"><span class="javascript">        =<span class="built_in">document</span>.getElementById(<span class="string">&quot;m4_iframe&quot;</span>).scrollWidth*<span class="number">0.76</span>+<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Center-quote引用"><a href="#Center-quote引用" class="headerlink" title="Center-quote引用"></a>Center-quote引用</h2><p>md写法：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% centerquote %&#125;Quote1&#123;% endcenterquote %&#125;</span><br></pre></td></tr></table></figure>

<p>可以简写为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;Quote2&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<p>呈现效果：</p>
<blockquote class="blockquote-center">
<p>may the flame guide thee</p>

</blockquote>

<h2 id="Button按钮"><a href="#Button按钮" class="headerlink" title="Button按钮"></a>Button按钮</h2><p>基础写法：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% button #, Text,Icons %&#125;</span><br></pre></td></tr></table></figure>

<p><code>&#123;% btn 链接, 按钮名称, 本地图标 %&#125;</code></p>
<p>md:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% btn https://example.com/sample.pdf,1%&#125;</span><br><span class="line">&#123;% btn #,Ⅱ%&#125;</span><br><span class="line">&#123;% btn #,叁,fa fa-heart%&#125;</span><br><span class="line">&#123;% btn #,,fa fa-heart%&#125;</span><br></pre></td></tr></table></figure>

<p>呈现效果：</p>
<a class="btn" href="http://image.sciencenet.cn/olddata/kexue.com.cn/upload/blog/file/2010/5/2010510183555815223.pdf ">1</a>
<a class="btn" href="#">Ⅱ</a>
<a class="btn" href="#"><i class="fa fa-heart"></i>叁</a>
<a class="btn" href="#"><i class="fa fa-heart"></i></a>

<h2 id="Group-pictures图片组"><a href="#Group-pictures图片组" class="headerlink" title="Group-pictures图片组"></a>Group-pictures图片组</h2><p>next主题默认开启此功能。<br>md里这么写：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% grouppicture m4-1 %&#125;</span><br><span class="line">  ![](http://www.example.com/pic1.png)</span><br><span class="line">  ![](http://www.example.com/pic2.png)</span><br><span class="line">  ![](http://www.example.com/pic3.png)</span><br><span class="line">&#123;% endgrouppicture %&#125;</span><br></pre></td></tr></table></figure>

<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/MD%E6%8A%80%E5%B7%A7/20210125223550.png"></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/MD%E6%8A%80%E5%B7%A7/20210125223609.png"></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/MD%E6%8A%80%E5%B7%A7/20210125224105.png"></div></div></div>


<h2 id="Video视频"><a href="#Video视频" class="headerlink" title="Video视频"></a>Video视频</h2><p>md:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% video https://example.com/sample.mp4 %&#125;</span><br></pre></td></tr></table></figure>

<p>呈现效果：</p>
<video src="https://cdn.videvo.net/videvo_files/video/free/2017-08/small_watermarked/170724_15_Setangibeach_preview.webm" preload="metadata" controlslist="nodownload" controls playsinline poster=""></video>

<h2 id="PDF文档"><a href="#PDF文档" class="headerlink" title="PDF文档"></a>PDF文档</h2><p>yaml配置文件设置了默认高度为1000px，在具体使用的时候可以自定大小覆盖。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># PDF tag</span></span><br><span class="line"><span class="comment"># NexT will try to load pdf files natively, if failed, pdf.js will be used.</span></span><br><span class="line"><span class="comment"># So, you have to install the dependency of pdf.js if you want to use pdf tag and make it available to all browsers.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/theme-next-pdf</span></span><br><span class="line"><span class="attr">pdf:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Default height</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">1000px</span></span><br></pre></td></tr></table></figure>

<p>md:</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% pdf https://example.com/sample.pdf 600px %&#125;</span><br></pre></td></tr></table></figure>

<p>呈现效果:</p>
<div class="pdfobject-container" data-target="https://www.lob.de/pdf/helloworld.pdf" data-height="600px"></div>

<h2 id="Note便签"><a href="#Note便签" class="headerlink" title="Note便签"></a>Note便签</h2><p>在Next的主题配置文件里：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Note tag (bs-callout)</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span> </span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>md可以这么写：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;default&#123;% endnote %&#125;</span><br><span class="line">&#123;% note primary %&#125;primary&#123;% endnote %&#125;</span><br><span class="line">&#123;% note success %&#125;success&#123;% endnote %&#125;</span><br><span class="line">&#123;% note info %&#125;info&#123;% endnote %&#125;</span><br><span class="line">&#123;% note warning %&#125;warning&#123;% endnote %&#125;</span><br><span class="line">&#123;% note danger %&#125;danger&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<p>呈现效果：</p>
<div class="note default"><p>default</p>
</div>

 <div class="note primary"><p>primary</p>
</div>

 <div class="note success"><p>success</p>
</div>

 <div class="note info"><p>info</p>
</div>

 <div class="note warning"><p>warning</p>
</div>

 <div class="note danger"><p>danger</p>
</div>

<p>这里icons开关已经设置成打开了，如果想不带图标，可以这么写：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% note info no-icon %&#125;info&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note info no-icon"><p>info</p>
</div>

<h2 id="Tabs标签"><a href="#Tabs标签" class="headerlink" title="Tabs标签"></a>Tabs标签</h2><p>yaml设置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tabs tag</span></span><br><span class="line"><span class="attr">tabs:</span></span><br><span class="line">  <span class="attr">transition:</span></span><br><span class="line">    <span class="attr">tabs:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">labels:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>文档说明：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line"><span class="comment">&lt;!-- tab [Tab caption] [@icon] --&gt;</span></span><br><span class="line">Any content (support inline tags too).</span><br><span class="line"><span class="comment">&lt;!-- endtab --&gt;</span></span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span><br><span class="line">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span><br><span class="line">                Only for current url of post/page must be unique!</span><br><span class="line">[index]       : Index number of active tab.</span><br><span class="line">                If not specified, first tab (1) will be selected.</span><br><span class="line">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[Tab caption] : Caption of current tab.</span><br><span class="line">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span><br><span class="line">                If not caption specified, but specified icon, caption will empty.</span><br><span class="line">                Optional parameter.</span><br><span class="line">[@icon]       : FontAwesome icon name (without &#x27;fa-&#x27; at the begining).</span><br><span class="line">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span><br><span class="line">                Optional parameter.</span><br></pre></td></tr></table></figure>

<p>注意这里的<code>&lt;!-- tab --&gt;</code>并非省略，而是起到了标志的作用；此处的逗号是英文格式。</p>
<ul>
<li>  <strong>写法1：</strong></li>
</ul>
<p>参数默认，展开一项：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% tabs First unique name %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">This is Tab 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">This is Tab 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">This is Tab 3</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p>呈现效果：</p>
<div class="tabs" id="first-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#first-unique-name-1">First unique name 1</a></li><li class="tab"><a href="#first-unique-name-2">First unique name 2</a></li><li class="tab"><a href="#first-unique-name-3">First unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p>This is Tab 1</p></div><div class="tab-pane" id="first-unique-name-2"><p>This is Tab 2</p></div><div class="tab-pane" id="first-unique-name-3"><p>This is Tab 3</p></div></div></div>

<ul>
<li>  <strong>写法2：</strong></li>
</ul>
<p>添加标签名称，-1表示折叠，2表示展开第二项：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 标签集,-1 %&#125;</span><br><span class="line">&lt;!-- tab one --&gt;</span><br><span class="line">This is Tab 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab Ⅱ --&gt;</span><br><span class="line">This is Tab 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab 叁--&gt;</span><br><span class="line">This is Tab 3</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p>折叠呈现效果：</p>
<div class="tabs" id="标签集"><ul class="nav-tabs"><li class="tab"><a href="#标签集-1">one</a></li><li class="tab"><a href="#标签集-2">Ⅱ</a></li><li class="tab"><a href="#标签集-3">叁</a></li></ul><div class="tab-content"><div class="tab-pane" id="标签集-1"><p>This is Tab 1</p></div><div class="tab-pane" id="标签集-2"><p>This is Tab 2</p></div><div class="tab-pane" id="标签集-3"><p>This is Tab 3</p></div></div></div>

<ul>
<li>  <strong>写法3：</strong></li>
</ul>
<p>-1改为2，默认显示第二项；注意每个tab集的名称id需要是独一无二的，将标签集改为标签集2：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 标签集2,2%&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p>默认打开第二项：</p>
<div class="tabs" id="标签集2"><ul class="nav-tabs"><li class="tab"><a href="#标签集2-1">one</a></li><li class="tab active"><a href="#标签集2-2">Ⅱ</a></li><li class="tab"><a href="#标签集2-3">叁</a></li></ul><div class="tab-content"><div class="tab-pane" id="标签集2-1"><p>1</p></div><div class="tab-pane active" id="标签集2-2"><p>2</p></div><div class="tab-pane" id="标签集2-3"><p>3</p></div></div></div>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title>Matplotlib常用方法</title>
    <url>/2020/11/29/matplotlib-chang-yong-fang-fa/</url>
    <content><![CDATA[<h1 id="Matplotlib常用方法"><a href="#Matplotlib常用方法" class="headerlink" title="Matplotlib常用方法"></a>Matplotlib常用方法</h1><blockquote>
<p>  课程地址：<a href="https://www.icourse163.org/course/BIT-1001870002?tid=1450349444">Python数据分析与展示</a></p>
<p>  官方文档：<a href="https://matplotlib.org/gallery.html">Thumbnail gallery — Matplotlib 2.0.2 documentation</a></p>
<hr>
<p>  <strong>扩展部分</strong></p>
<p>  seaborn官方：<a href="https://seaborn.pydata.org/api.html">API reference — seaborn 0.11.0 documentation (pydata.org)</a></p>
<p>  pyecharts官方：<a href="https://pyecharts.org/#/zh-cn/">pyecharts - A Python Echarts Plotting Library built with love.</a>中文</p>
<p>  Basemap官方：<a href="https://basemaptutorial.readthedocs.io/en/latest/">Basemap tutorial — Basemap tutorial 0.1 documentation</a></p>
<p>  Seaborn是在matplotlib的基础上进行了更高级的API封装，从而使得作图更加容易，在大多数情况下使用seaborn能做出很具有吸引力的图，而使用matplotlib就能制作具有更多特色的图。同时它能高度兼容numpy与pandas数据结构以及scipy与statsmodels等统计模式。</p>
<p>  pyecharts的ECharts是一个纯Javascript的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器。如想生成图片格式，需要另导入make_snapshot，国人造的，功能很强大，同时手册也很方便。</p>
<p>  Basemap，画地图的。</p>
<hr>
<p>  <strong>可参考</strong></p>
<p>  pyecharts官方案例：<a href="https://gallery.pyecharts.org/#/README">中文简介 - Document (pyecharts.org)</a></p>
<p>  seaborn 0.9中文：<a href="https://seaborn.apachecn.org/#/">https://seaborn.apachecn.org/#/</a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Matplotlib库是做python可视化的常见库，由各种可视化类构成，内部结构复杂，受Matlab启发。</p>
<p>安装Matplotlib</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure>

<p><code>matplotlib.pyplot</code>是绘制各类可视化图形的命令子库，相当于快捷方式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>

<h3 id="一个案例"><a href="#一个案例" class="headerlink" title="一个案例"></a>一个案例</h3><p><code>example.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.plot([<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>])</span><br><span class="line">[&lt;matplotlib.lines.Line2D <span class="built_in">object</span> at <span class="number">0x0EC4F770</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.ylabel(<span class="string">&quot;grade&quot;</span>)</span><br><span class="line">Text(<span class="number">0</span>, <span class="number">0.5</span>, <span class="string">&#x27;grade&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/plt_show.png"></p>
<h3 id="图片存入文件"><a href="#图片存入文件" class="headerlink" title="图片存入文件"></a>图片存入文件</h3><p><code>plt.savefi()</code>将输出图形存储为文件，默认PNG格式，可以通过dpi修改输出质量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.plot([<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>])</span><br><span class="line">[&lt;matplotlib.lines.Line2D <span class="built_in">object</span> at <span class="number">0x0EB116F0</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.ylabel(<span class="string">&quot;grade&quot;</span>)</span><br><span class="line">Text(<span class="number">0</span>, <span class="number">0.5</span>, <span class="string">&#x27;grade&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.savefig(<span class="string">&quot;test&quot;</span>,dpi=<span class="number">600</span>) <span class="comment"># dpi修改输出质量</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E5%AD%98%E5%85%A5%E5%9B%BE%E7%89%87.png"></p>
<h3 id="设置轴尺度"><a href="#设置轴尺度" class="headerlink" title="设置轴尺度"></a>设置轴尺度</h3><p><code>plt.plot(x_array,y_array)</code>当有两个以上参数时，按照X轴和Y轴顺序绘制数据点。</p>
<p><code>plt.axis([x1,x2,y1,y2])</code>设置xy轴尺度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.plot([<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>],[<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>])</span><br><span class="line">[&lt;matplotlib.lines.Line2D <span class="built_in">object</span> at <span class="number">0x01475D10</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.ylabel(<span class="string">&quot;grade&quot;</span>)</span><br><span class="line">Text(<span class="number">0</span>, <span class="number">0.5</span>, <span class="string">&#x27;grade&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.axis([-<span class="number">1</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="number">6</span>]) <span class="comment"># x轴-1~10，y轴0~6</span></span><br><span class="line">(-<span class="number">1.0</span>, <span class="number">10.0</span>, <span class="number">0.0</span>, <span class="number">6.0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>plt.show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E8%AE%BE%E7%BD%AExy%E8%BD%B4.png"></p>
<h2 id="设置曲线风格"><a href="#设置曲线风格" class="headerlink" title="设置曲线风格"></a>设置曲线风格</h2><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/plot%E8%AF%A6%E7%BB%86.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib. pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<h3 id="绘制多条曲线"><a href="#绘制多条曲线" class="headerlink" title="绘制多条曲线"></a>绘制多条曲线</h3><p><code>plt. plot(x1,y1,x2,y2...)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np. arange(<span class="number">10</span>)</span><br><span class="line">plt. plot(a, a*<span class="number">1.5</span>, a, a*<span class="number">2.5</span>, a, a*<span class="number">3.5</span>, a, a*<span class="number">4.5</span>)</span><br><span class="line">plt. show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/muti_line.png"></p>
<h3 id="修改曲线特征"><a href="#修改曲线特征" class="headerlink" title="修改曲线特征"></a>修改曲线特征</h3><p><code>plt. plot(x1,y1,&quot;color+style+mark&quot;,x2,y2,&quot;color+style+mark&quot;...)</code></p>
<p>由<strong>颜色字符</strong>、<strong>风格字符</strong>和<strong>标记字符</strong>组成</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E9%A2%9C%E8%89%B2%E5%AD%97%E7%AC%A6.png"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E9%A3%8E%E6%A0%BC%E5%AD%97%E7%AC%A6.png"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E6%A0%87%E8%AE%B0%E5%AD%97%E7%AC%A6.png"></p>
<p>案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.arange(<span class="number">10</span>)</span><br><span class="line">plt.plot(a, a*<span class="number">1.5</span>, <span class="string">&#x27;g-o&#x27;</span>, a, a*<span class="number">2.5</span>, <span class="string">&#x27;r--x&#x27;</span>, a, a*<span class="number">3.5</span>, <span class="string">&#x27;c-.&gt;&#x27;</span>, a, a*<span class="number">4.5</span>, <span class="string">&#x27;y:d&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E6%9B%B2%E7%BA%BF%E7%89%B9%E5%BE%81.png"></p>
<h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E6%9B%B2%E7%BA%BF%E7%89%B9%E5%BE%81%E5%8F%82%E6%95%B0.png"></p>
<h2 id="文本显示"><a href="#文本显示" class="headerlink" title="文本显示"></a>文本显示</h2><h3 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h3><p>pyplot开不默认支持中文显示，需要<code>matplotlib.rcParams</code>修改字体实现。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/rcParams.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">matplotlib.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;simHei&#x27;</span> <span class="comment"># 黑体</span></span><br><span class="line">plt.plot([<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>])</span><br><span class="line">plt.ylabel(<span class="string">&quot;纵轴（语言：zh_ch 中文）&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;横轴（语言：zh_ch 中文）&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E4%BF%AE%E6%94%B9%E8%AF%AD%E8%A8%80.png"></p>
<h3 id="选择字体"><a href="#选择字体" class="headerlink" title="选择字体"></a>选择字体</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E5%AD%97%E4%BD%93.png"></p>
<p>直接<code>matplotlib.rcParams[&#39;font.family&#39;] = &#39;simHei&#39;</code>将全局改变字体，如想改变局部字体可以：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot([<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>])</span><br><span class="line">plt.ylabel(<span class="string">&quot;纵轴（语言：zh_ch 中文）&quot;</span>,fontproperties=<span class="string">&#x27;Kaiti&#x27;</span>,fontsize=<span class="number">20</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;横轴（语言：zh_ch 中文）&quot;</span>,fontproperties=<span class="string">&#x27;FangSong&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E5%B1%80%E9%83%A8%E5%AD%97%E4%BD%93.png"></p>
<h3 id="文本显示-1"><a href="#文本显示-1" class="headerlink" title="文本显示"></a>文本显示</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E6%96%87%E6%9C%AC%E6%98%BE%E7%A4%BA.png"></p>
<p><code>plt.annotate(s,xy=arrow_crd,xytext=text_crd,arrowprops=dict)</code>设置箭头</p>
<p>其中<code>arrowprops=dict(facecolor=&#39;black&#39;,width=2,shrink=0.1)</code></p>
<p>facecolor表示颜色；width表示宽度；shrink表示从起始到结束按照0.1比例缩进，即箭头尖尖不会直接接触xy</p>
<p>案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.arange(<span class="number">0.0</span>,<span class="number">5.0</span>,<span class="number">0.02</span>)</span><br><span class="line">plt.plot(a,np.cos(<span class="number">2</span>*np.pi*a),<span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;横轴：时间&quot;</span>,fontproperties=<span class="string">&quot;SimHei&quot;</span>,fontsize=<span class="number">15</span>,color=<span class="string">&#x27;green&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;纵袖：抵幅&quot;</span>,fontproperties=<span class="string">&quot;SimHei&quot;</span>,fontsize=<span class="number">15</span>)</span><br><span class="line">plt.title(<span class="string">r&quot;正弦波实例$y=cos(2\pi x)$&quot;</span>,fontproperties=<span class="string">&#x27;SimHei&#x27;</span>,fontsize=<span class="number">25</span>)</span><br><span class="line">plt.text(<span class="number">0</span>, <span class="number">1.5</span>, <span class="string">r&#x27;我直接一个箭头：&#x27;</span>, fontproperties=<span class="string">&#x27;SimHei&#x27;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.annotate(<span class="string">r&#x27;$\mu=100$&#x27;</span>,xy=(<span class="number">2</span>,<span class="number">1</span>),xytext=(<span class="number">3</span>,<span class="number">1.5</span>),arrowprops=<span class="built_in">dict</span>(facecolor=<span class="string">&#x27;black&#x27;</span>,width=<span class="number">2</span>,shrink=<span class="number">0.1</span>))</span><br><span class="line">plt.axis([-<span class="number">1</span>,<span class="number">6</span>,- <span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">plt.grid(<span class="literal">True</span>) <span class="comment"># 显示网格</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E6%96%87%E6%9C%AC%E6%98%BE%E7%A4%BA%E5%9B%BE.png"></p>
<h2 id="绘制多个图形"><a href="#绘制多个图形" class="headerlink" title="绘制多个图形"></a>绘制多个图形</h2><h3 id="简单分隔"><a href="#简单分隔" class="headerlink" title="简单分隔"></a>简单分隔</h3><p><code>matplotlib.pyplot.subplot(nrows,ncols,plot_number)</code></p>
<p>分割绘图区域</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line">plt.subplot(<span class="number">324</span>) <span class="comment"># 同样的写法</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E7%BB%98%E5%9B%BE%E5%8C%BA%E5%9F%9F.png"></p>
<p>测试案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="keyword">return</span> np. exp(-t) * np. cos(<span class="number">2</span> * np. pi*t)</span><br><span class="line"></span><br><span class="line">a = np. arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)</span><br><span class="line">plt. subplot(<span class="number">211</span>)</span><br><span class="line">plt. plot(a, f(a))</span><br><span class="line">plt. subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">plt. plot(a, np. cos(<span class="number">2</span>*np.pi*a), <span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line">plt. show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E5%A4%9A%E4%B8%AA%E5%9B%BE%E5%BD%A2%E6%9B%B2%E7%BA%BF.png"></p>
<h3 id="复杂分隔1"><a href="#复杂分隔1" class="headerlink" title="复杂分隔1"></a>复杂分隔1</h3><p><code>matplotlib.pyplot.subplot2grid(GridSpec,CurSpec,colpan,rowspan)</code></p>
<p><code>GridSpec : (nrows,ncols)</code>，将区域分隔成什么形状</p>
<p><code>CurSpec : (row,col)</code>，当前选定的位置</p>
<p><code>colspan : rows</code>，列的方向上延伸的长度</p>
<p><code>rowspan : cols</code>，行的方向上延伸的长度</p>
<p>设定网格，选中网格，确定选中行列区域数量，编号从0开始。</p>
<p>测试案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">a = np. arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>) <span class="comment"># x轴</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">t</span>):</span> <span class="comment"># y轴</span></span><br><span class="line">    <span class="keyword">return</span> np. exp(-t) * np. cos(<span class="number">2</span> * np. pi*t)</span><br><span class="line"></span><br><span class="line">plt.subplot2grid((<span class="number">3</span>,<span class="number">3</span>),(<span class="number">0</span>,<span class="number">0</span>),colspan=<span class="number">3</span>)</span><br><span class="line">plt.text(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;((3,3),(0,0),colspan=3)&quot;</span>,fontsize=<span class="number">10</span>)</span><br><span class="line">plt. plot(a, f(a),<span class="string">&quot;0.9&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">0</span>), colspan=<span class="number">2</span>)</span><br><span class="line">plt.text(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;((3,3),(1,0),colspan=2)&quot;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt. plot(a, f(a), <span class="string">&quot;0.9&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">1</span>, <span class="number">2</span>), rowspan=<span class="number">2</span>)</span><br><span class="line">plt.text(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;((3,3),(1,2),rowspan=2)&quot;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt. plot(a, f(a), <span class="string">&quot;0.9&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">plt.text(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;((3,3),(2,0)&quot;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt. plot(a, f(a), <span class="string">&quot;0.9&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot2grid((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">2</span>, <span class="number">1</span>))</span><br><span class="line">plt.text(<span class="number">0</span>,<span class="number">0</span>,<span class="string">&quot;((3,3),(2,1))&quot;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt. plot(a, f(a), <span class="string">&quot;0.9&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt. show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%88%86%E9%9A%94.png"></p>
<h3 id="复杂分隔2"><a href="#复杂分隔2" class="headerlink" title="复杂分隔2"></a>复杂分隔2</h3><p><code>gs=matplotlib.gridspec.GridSpec(nrows,ncols)</code></p>
<p><code>matplotlib.pyplot.subplot(gs[rows,cols])</code></p>
<p>测试案例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line">a = np. arange(<span class="number">0.0</span>, <span class="number">5.0</span>, <span class="number">0.02</span>)  <span class="comment"># x轴</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">t</span>):</span>  <span class="comment"># y轴</span></span><br><span class="line">    <span class="keyword">return</span> np. exp(-t) * np. cos(<span class="number">2</span> * np. pi*t)</span><br><span class="line"></span><br><span class="line">gs=gridspec.GridSpec(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(gs[<span class="number">0</span>,:])</span><br><span class="line">plt.text(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;gs[0,:]&quot;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt.plot(a, f(a), <span class="string">&quot;0.9&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(gs[<span class="number">1</span>,:-<span class="number">1</span>])</span><br><span class="line">plt.text(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;gs[1,:-1]&quot;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt. plot(a, f(a), <span class="string">&quot;0.9&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(gs[<span class="number">1</span>:, -<span class="number">1</span>])</span><br><span class="line">plt.text(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;gs[1:, -1]&quot;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt. plot(a, f(a), <span class="string">&quot;0.9&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(gs[<span class="number">2</span>, <span class="number">0</span>])</span><br><span class="line">plt.text(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;gs[2, 0]&quot;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt. plot(a, f(a), <span class="string">&quot;0.9&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(gs[<span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">plt.text(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;gs[2,1]&quot;</span>, fontsize=<span class="number">10</span>)</span><br><span class="line">plt. plot(a, f(a), <span class="string">&quot;0.9&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E5%A4%8D%E6%9D%82%E5%88%86%E9%9A%942.png"></p>
<h2 id="基础图标函数"><a href="#基础图标函数" class="headerlink" title="基础图标函数"></a>基础图标函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>plt.plot(x,y,fml,...)</code></td>
<td><strong>绘制坐标图</strong></td>
</tr>
<tr>
<td><code>plt.boxplot(data,notch,position)</code></td>
<td>绘制箱型图</td>
</tr>
<tr>
<td><code>plt.bar(left,height,width,bottom)</code></td>
<td><strong>绘制条形图</strong></td>
</tr>
<tr>
<td><code>plt.barh(width,botton,left,height)</code></td>
<td>绘制横向条型图</td>
</tr>
<tr>
<td><code>plt.polar(theta,r)</code></td>
<td><strong>绘制级坐标图</strong></td>
</tr>
<tr>
<td><code>plt.pie(data,explode)</code></td>
<td><strong>绘制饼图</strong></td>
</tr>
<tr>
<td><code>plt.psd(x,NDDT=256,pad_to,Fs)</code></td>
<td>绘制功率谱密度图</td>
</tr>
<tr>
<td><code>plt.specgram(x,NFFT=256,pad_to,F)</code></td>
<td>绘制X-Y相关性函数</td>
</tr>
<tr>
<td><code>plt.scatter(x,y)</code></td>
<td><strong>绘制散点图，x和y长度相同</strong></td>
</tr>
<tr>
<td><code>plt.step(x,y,where)</code></td>
<td>绘制步阶图</td>
</tr>
<tr>
<td><code>plt.hist(x,bins,normed)</code></td>
<td><strong>绘制直方图</strong></td>
</tr>
<tr>
<td><code>plt.contour(x,y,linefmt,markerfmt)</code></td>
<td>绘制等值图</td>
</tr>
<tr>
<td><code>plt.vlines()</code></td>
<td>绘制垂直图</td>
</tr>
<tr>
<td><code>plt.stem(x,y,linefmt,markerfmt)</code></td>
<td>绘制柴火图</td>
</tr>
<tr>
<td><code>plt.plot_date()</code></td>
<td>绘制数据日期</td>
</tr>
</tbody></table>
<h3 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h3><p><code>plt.pie(sizes,exblode,labels,autopct,shadow,startangle)</code></p>
<p>根据百分比展示功能</p>
<p><code>sizes</code> : 饼图各块尺寸    <code>exblode</code> : 应该突出的部分    <code>labels</code> : 每一块的标签</p>
<p><code>autopct</code> : 显示百分数的方式    <code>shadow</code> : 带有阴影    <code>startangle</code> : 视角角度 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">labels = <span class="string">&quot;Frogs&quot;</span>, <span class="string">&quot;Hogs&quot;</span>, <span class="string">&quot;Dogs&quot;</span>, <span class="string">&quot;Logs&quot;</span></span><br><span class="line">sizes = [<span class="number">15</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">10</span>]</span><br><span class="line">explode = (<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">plt.pie(sizes, explode=explode, labels=labels,autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>, shadow=<span class="literal">False</span>, startangle=<span class="number">120</span>)</span><br><span class="line">plt.axis(<span class="string">&quot;equal&quot;</span>) <span class="comment"># 坐标横纵相等</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E9%A5%BC%E5%9B%BE.png"></p>
<h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><p><code>plt.hist(array,bin)</code></p>
<p><strong>基础参数</strong></p>
<p><code>array</code> : 绘制的数据    <code>bin</code> : 横轴柱体的个数，bin越大，柱体越多，每个柱体跨度越小</p>
<p><strong>视图参数</strong></p>
<p><code>histtype</code> : 绘制类型    <code>facecolor</code> : 颜色    <code>alpha</code> : 尺寸比例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">mu,sigma=<span class="number">100</span>,<span class="number">20</span> <span class="comment"># 均值和标准差</span></span><br><span class="line">a=np.random.normal(mu,sigma,size=<span class="number">100</span>)</span><br><span class="line">plt.hist(a,<span class="number">20</span>,histtype=<span class="string">&#x27;stepfilled&#x27;</span>,facecolor=<span class="string">&#x27;g&#x27;</span>,alpha=<span class="number">0.75</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;histogram&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E7%9B%B4%E6%96%B9%E5%9B%BE.png"></p>
<h3 id="极坐标图"><a href="#极坐标图" class="headerlink" title="极坐标图"></a>极坐标图</h3><p><code>plt.subplot(111,projection=&#39;polar&#39;) </code>一个区域，极点模式</p>
<p>其他参数看例题：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">N = <span class="number">10</span>  <span class="comment"># 表示数据的个数，色块个体的个数</span></span><br><span class="line"><span class="comment"># (0,2pi)分出N个不同的角度 相当于left</span></span><br><span class="line">theta = np.linspace(<span class="number">0.0</span>, <span class="number">2</span>*np.pi, N, endpoint=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 圆的半径 相当于height</span></span><br><span class="line">radii = <span class="number">10</span>*np.random.rand(N)</span><br><span class="line"><span class="comment"># 扇形开合角度 如果为2pi，则成同心圆</span></span><br><span class="line">width = np.pi/<span class="number">4</span>*np.random.rand(N)  </span><br><span class="line"><span class="comment"># 划分极点区域</span></span><br><span class="line">ax = plt.subplot(<span class="number">111</span>, projection=<span class="string">&#x27;polar&#x27;</span>)</span><br><span class="line">bars = ax.bar(theta, radii, width=width, bottom=<span class="number">0.0</span>)</span><br><span class="line"><span class="comment"># 进行奇妙的色彩转换</span></span><br><span class="line"><span class="keyword">for</span> r, bar <span class="keyword">in</span> <span class="built_in">zip</span>(radii, bars):</span><br><span class="line">    bar.set_facecolor(plt.cm.viridis(r/<span class="number">10.</span>))</span><br><span class="line">    bar.set_alpha(<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E6%9E%81%E7%82%B9%E5%9B%BE.png"></p>
<h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><p><code>plt.subplots()</code>参数为空时，表示111，返回图和一个绘制区域ax</p>
<p>返回(&lt;Figure size 640x480 with 1 Axes&gt;, <a href="AxesSubplot:">AxesSubplot:</a>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">fig,ax=plt.subplots() </span><br><span class="line"><span class="comment"># &#x27;o&#x27;型标点方式，x轴100个点，y轴100个点，乘以10为了点扩散</span></span><br><span class="line">ax.plot(<span class="number">10</span>*np.random.randn(<span class="number">100</span>),<span class="number">10</span>*np.random.randn(<span class="number">100</span>),<span class="string">&#x27;o&#x27;</span>) </span><br><span class="line">ax.set_title(<span class="string">&quot;Simple Scatter&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Matplotlib%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E6%95%A3%E7%82%B9%E5%9B%BE.png"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA加解密基础实现</title>
    <url>/2020/11/19/rsa-jia-jie-mi-ji-chu-shi-xian/</url>
    <content><![CDATA[<h1 id="RSA加解密基础实现"><a href="#RSA加解密基础实现" class="headerlink" title="RSA加解密基础实现"></a>RSA加解密基础实现</h1><blockquote>
<p>  第4章 公钥密码体制.ppt <a href="https://github.com/mednight4/Cryptography-course-ppt/blob/main/%E7%AC%AC4%E7%AB%A0%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6.ppt?raw=true">下载</a></p>
</blockquote>
<p>大素数的生成是这个加密最难搞的问题，用到的关键算法是这个：</p>
<blockquote>
<p>  <a href="https://zhanghuimeng.github.io/post/the-principles-and-implementation-of-miller-rabin-primality-test/">millar素数检验</a></p>
</blockquote>
<p>此代码非原创，参见<a href="https://github.com/kinnisoy/RSA/blob/master/RSA_file.py">RSA/RSA_file.py at master · kinnisoy/RSA (github.com)</a></p>
<p>实现原理在项目的<code>readme.md</code>有说明。</p>
<p>项目文件：</p>
<ul>
<li><p>  明文.txt</p>
</li>
<li><p>  密文.txt</p>
</li>
<li><p>  解密.txt</p>
</li>
<li><p>  <code>rsa.py</code></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模N大数的幂乘的快速算法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fastExpMod</span>(<span class="params">b, e, m</span>):</span>  <span class="comment"># 底数，幂，大数N</span></span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    e = <span class="built_in">int</span>(e)</span><br><span class="line">    <span class="keyword">while</span> e != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> e % <span class="number">2</span> != <span class="number">0</span>:  <span class="comment"># 按位与</span></span><br><span class="line">            e -= <span class="number">1</span></span><br><span class="line">            result = (result * b) % m</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        e &gt;&gt;= <span class="number">1</span></span><br><span class="line">        b = (b * b) % m</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">    <span class="comment"># 测试案例</span></span><br><span class="line">    <span class="comment"># c = fastExpMod(3,22,12)</span></span><br><span class="line">    <span class="comment"># print(c) 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对随机取得p，q两个数的素性检测</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">miller_rabin_test</span>(<span class="params">n</span>):</span>  <span class="comment"># p为要检验得数</span></span><br><span class="line">    p = n - <span class="number">1</span></span><br><span class="line">    r = <span class="number">0</span></span><br><span class="line">    <span class="comment"># P110定理5.17 P108定理5.3.6</span></span><br><span class="line">    <span class="comment"># 寻找满足n-1 = 2^s  * m 的s,m两个数</span></span><br><span class="line">    <span class="comment">#  n -1 = 2^r * p</span></span><br><span class="line">    <span class="keyword">while</span> p % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 最后得到为奇数的p(即m)</span></span><br><span class="line">        r += <span class="number">1</span></span><br><span class="line">        p /= <span class="number">2</span></span><br><span class="line">    b = random.randint(<span class="number">2</span>, n - <span class="number">2</span>)  <span class="comment"># 随机取b=（0.n）</span></span><br><span class="line">    <span class="comment"># 如果情况1    b得p次方  与1  同余  mod n</span></span><br><span class="line">    <span class="keyword">if</span> fastExpMod(b, <span class="built_in">int</span>(p), n) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 通过测试,可能为素数</span></span><br><span class="line">    <span class="comment"># 情况2  b得（2^r  *p）次方  与-1 (n-1) 同余  mod n</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):  <span class="comment"># 检验六次</span></span><br><span class="line">        <span class="keyword">if</span> fastExpMod(b, (<span class="number">2</span> ** i) * p, n) == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 如果该数可能为素数，</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>  <span class="comment"># 不可能是素数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成大素数：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_prime_num</span>(<span class="params">keylength</span>):</span>  <span class="comment"># 为了确保两素数乘积n  长度不会太长，使用keylength/2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># Select a random number n</span></span><br><span class="line">        <span class="comment"># n = random.randint(0, 1&lt;&lt;int(halfkeyLength))</span></span><br><span class="line">        n = random.randint(<span class="number">0</span>, keylength)</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 如果经过10次素性检测，那么很大概率上，这个数就是素数</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">                <span class="keyword">if</span> miller_rabin_test(n):</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    found = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> found:</span><br><span class="line">                <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成密钥（包括公钥和私钥）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_keys</span>(<span class="params">keylength</span>):</span></span><br><span class="line">    p = create_prime_num(keylength / <span class="number">2</span>)</span><br><span class="line">    q = create_prime_num(keylength / <span class="number">2</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    <span class="comment"># euler函数值</span></span><br><span class="line">    fn = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    e = selectE(fn, keylength / <span class="number">2</span>)</span><br><span class="line">    d = match_d(e, fn)</span><br><span class="line">    <span class="keyword">return</span> (n, e, d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机在（1，fn）选择一个E，  满足gcd（e,fn）=1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectE</span>(<span class="params">fn, halfkeyLength</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># e and fn are relatively prime</span></span><br><span class="line">        e = random.randint(<span class="number">0</span>, fn)</span><br><span class="line">        <span class="keyword">if</span> math.gcd(e, fn) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据选择的e，匹配出唯一的d</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">match_d</span>(<span class="params">e, fn</span>):</span></span><br><span class="line">    d = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (e * d) % fn == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line">        d += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">M, e, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> fastExpMod(M, e, n)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">C, d, m</span>):</span></span><br><span class="line">    <span class="keyword">return</span> fastExpMod(C, d, m)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span>():</span></span><br><span class="line">    print(<span class="string">&quot;_________________RSA_________________&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;1.encrypt&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;2.decrypt&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;q.quit&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;Enter the key you wanna try&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;_____________________________________&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt_file</span>():</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;明文.txt&#x27;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    mess = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    n, e, d = create_keys(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">&quot;请妥善保管私钥（解密时需要用到）：（n:&quot;</span>, n, <span class="string">&quot; ,d:&quot;</span>, d, <span class="string">&quot;)&quot;</span>)</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># s = encrypt(int(mess), e, n)</span></span><br><span class="line">    print(mess)</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> mess:</span><br><span class="line">        c = <span class="built_in">chr</span>(encrypt(<span class="built_in">ord</span>(ch), e, n))</span><br><span class="line">        s += c</span><br><span class="line">    <span class="comment"># print(s)</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;密文.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(s))</span><br><span class="line">    print(<span class="string">&quot;Encrypt Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_file</span>():</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;./pass.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    mess = f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="comment"># n,d = input(&quot;私钥：&quot;)</span></span><br><span class="line">    n, d = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&quot;输入您的私钥（n,d）:&quot;</span>).split())</span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># s = decrypt(int(mess), d, n)</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> mess:</span><br><span class="line">        c = <span class="built_in">chr</span>(decrypt(<span class="built_in">ord</span>(ch), d, n))</span><br><span class="line">        s += c</span><br><span class="line">    <span class="comment"># print(s)</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;解密.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(s))</span><br><span class="line">    print(<span class="string">&quot;Decrypt Done!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    display()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        c = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            encrypt_file()</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            decrypt_file()</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line">        display()</span><br></pre></td></tr></table></figure>

<p>最近作业有点多。</p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm运行Jupyter notebook(pip安装)</title>
    <url>/2020/12/16/pycharm-yun-xing-jupyter-notebook-pip-an-zhuang/</url>
    <content><![CDATA[<h1 id="Pycharm运行Jupyter-notebook-pip安装"><a href="#Pycharm运行Jupyter-notebook-pip安装" class="headerlink" title="Pycharm运行Jupyter notebook(pip安装)"></a>Pycharm运行Jupyter notebook(pip安装)</h1><p>环境：win10，pycharm专业版</p>
<h2 id="从Anacanda开始（推荐）"><a href="#从Anacanda开始（推荐）" class="headerlink" title="从Anacanda开始（推荐）"></a>从Anacanda开始（推荐）</h2><p>Jupyter在爬虫和数据分析这一块用起来非常方便。</p>
<p>方便一点的方法是安装<a href="https://www.anaconda.com/">Anaconda</a>，并勾选jupyter notebook模块，Anaconda的安装就不细说了，看这里</p>
<p> <a href="https://www.jianshu.com/p/62f155eb6ac5">简书-Anaconda介绍、安装及使用教程</a></p>
<hr>
<div class="note primary"><p><strong>2021.03.17补充</strong></p>
<p>anaconda永远的神！跑项目还得是conda。pip…不行，到后期各种依赖装完pip臃肿得一批。<br>用conda，此贴终结。</p>
</div>

<p>以下是原文。</p>
<hr>
<h2 id="使用vscode插件集成（pip不推荐）"><a href="#使用vscode插件集成（pip不推荐）" class="headerlink" title="使用vscode插件集成（pip不推荐）"></a><del>使用vscode插件集成（pip不推荐）</del></h2><p>但是我是本着少折腾的心直接在vscode里装的jupyter插件，也就是直接pip安装jupyter及其相关依赖库。（结果反而多折腾了）至于安装的方法嘛，写爬虫作业时，vscode装了python插件，右下角一直弹窗推荐使用jupyter插件，随手就点了。。。然后是pip安装若干依赖包，一路yes下去就完了</p>
<p>pip list一下，看上去直接相关的有</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip list</span><br><span class="line">Package             Version</span><br><span class="line">------------------- ---------</span><br><span class="line">jupyter             1.0.0</span><br><span class="line">jupyter-client      6.1.7</span><br><span class="line">jupyter-console     6.2.0</span><br><span class="line">jupyter-core        4.6.3</span><br><span class="line">jupyterlab-pygments 0.1.2</span><br></pre></td></tr></table></figure>

<p>当然vscode自然是全配置好了，新建<code>.ipynb</code>文件，直接点击即可生成页面</p>
<p>默认情况下，画出的图形呈现在各自的窗口中。要直接在 notebook 中呈现图形，可通过命令 <code>%matplotlib inline</code> 内联后端。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Pycharm%E8%BF%90%E8%A1%8CJupyter-notebook-pip%E5%AE%89%E8%A3%85/vscode.png"></p>
<h2 id="pycharm关联Jupyter服务"><a href="#pycharm关联Jupyter服务" class="headerlink" title="pycharm关联Jupyter服务"></a><del>pycharm关联Jupyter服务</del></h2><p>想给pycharm也带上，对我这样的菜鸟来说，pycharm的语法提示还是舒服，而且debug也很方便</p>
<p>目录下新建一个jupyter notebook文件</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Pycharm%E8%BF%90%E8%A1%8CJupyter-notebook-pip%E5%AE%89%E8%A3%85/pycharm_jupyter.png"></p>
<p>由于没有配置运行环境，所以不能运行，查看运行配置，需要服务的地址和token</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Pycharm%E8%BF%90%E8%A1%8CJupyter-notebook-pip%E5%AE%89%E8%A3%85/pycharm%E9%85%8D%E7%BD%AE.png"></p>
<p>所以需要先将jupyter跑起来，再将页面的url和token填到pycharm里</p>
<p>服务启动命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>

<p>如果命令行无法识别jupyter命令，需要将其添加到环境变量</p>
<p>默认的路径是<code>C:\Users\用户名\AppData\Roaming\Python\Python37\Scripts</code>，找到自己的Scripts目录，将其加至系统环境变量path，启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br><span class="line">[I 22:55:02.380 NotebookApp] Serving notebooks from local directory: E:\phpEnv\tools\Cmder</span><br><span class="line">[I 22:55:02.381 NotebookApp] Jupyter Notebook 6.1.4 is running at:</span><br><span class="line">[I 22:55:02.381 NotebookApp] http://localhost:8888/?token=39928e57fedd0f64aad19afaec923217a89809ce577e154c</span><br><span class="line">[I 22:55:02.382 NotebookApp]  or http://127.0.0.1:8888/?token=39928e57fedd0f64aad19afaec923217a89809ce577e154c</span><br><span class="line">[I 22:55:02.383 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).</span><br><span class="line">[C 22:55:02.539 NotebookApp]</span><br><span class="line"></span><br><span class="line">    To access the notebook, open this file in a browser:</span><br><span class="line">        file:///C:/Users/17498/AppData/Roaming/jupyter/runtime/nbserver-19644-open.html</span><br><span class="line">    Or copy and paste one of these URLs:</span><br><span class="line">        http://localhost:8888/?token=39928e57fedd0f64aad19afaec923217a89809ce577e154c</span><br><span class="line">     or http://127.0.0.1:8888/?token=39928e57fedd0f64aad19afaec923217a89809ce577e154c</span><br></pre></td></tr></table></figure>

<p><code>token=39928e57fedd0f64aad19afaec923217a89809ce577e154c</code>，此时浏览器自动打开Jupyter的页面，初始目录为命令运行的当前目录，所以建议先cd到代码目录再运行服务</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Pycharm%E8%BF%90%E8%A1%8CJupyter-notebook-pip%E5%AE%89%E8%A3%85/tree.png"></p>
<p>jupyter的默认端口是8888</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Pycharm%E8%BF%90%E8%A1%8CJupyter-notebook-pip%E5%AE%89%E8%A3%85/url%E7%AB%AF%E5%8F%A3.png"></p>
<p>点击运行，登陆弹窗，所填token是先前的<code>39928e57fedd0f64aad19afaec923217a89809ce577e154c</code></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Pycharm%E8%BF%90%E8%A1%8CJupyter-notebook-pip%E5%AE%89%E8%A3%85/token.png"></p>
<p>点击ok，运行代码，似乎还自带debug效果</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Pycharm%E8%BF%90%E8%A1%8CJupyter-notebook-pip%E5%AE%89%E8%A3%85/result.png"></p>
<p>可以看到，结果和代码并没有在同一个窗口，好处是代码更直观了，而且debug很方便，但是窗口太小看运行结果不是很舒服，见仁见智了，用来敲代码稍微多一点的项目还是很不错的。</p>
<p>有了IDE就不需要在浏览器上打开notebook页面了。jupyter启动服务但不打开浏览器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jupyter notebook --no-browser</span><br></pre></td></tr></table></figure>

<p>此时，将会在终端显示启动的服务信息，包括浏览器页面的链接和token。</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10终端美化指北</title>
    <url>/2020/12/28/win10-zhong-duan-mei-hua-zhi-bei/</url>
    <content><![CDATA[<h1 id="Win10终端美化指北"><a href="#Win10终端美化指北" class="headerlink" title="Win10终端美化指北"></a>Win10终端美化指北</h1><p>周所周知，win10下无论是cmd还是powershell都丑的一塌糊涂。</p>
<p>所以折腾了一波，把win10下的终端弄好看了一点，当然，和linux和mac的终端还是有差距。</p>
<p>最终效果：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Win10%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8C%97/%E7%BE%8E%E5%8C%96%E5%90%8E%E7%9A%84%E7%BB%88%E7%AB%AF.png"></p>
<h2 id="PowerLine"><a href="#PowerLine" class="headerlink" title="PowerLine"></a>PowerLine</h2><p>在PowerShell里面安装PowerLine。</p>
<p>安装包括两个模块：</p>
<ul>
<li>  oh-my-posh上图中<code>&gt;G:\Code\Blog\blog&gt;</code>色块的效果。</li>
<li>  post-git上图中<code>master = + 43 ~5 -2</code>的效果</li>
</ul>
<p>如果只是在当前用户安装，打开PowerShell，输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser</span><br><span class="line"><span class="built_in">Install-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>

<p>如果你使用管理员权限打开PowerShell并且想把oh-my-posh安装到所有用户，则输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Install-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br></pre></td></tr></table></figure>

<p>提示关于不可信的来源，输入<code>Y</code>表示同意即可。</p>
<p>安装完成后，输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br><span class="line"><span class="built_in">Set-Theme</span> PowerLine</span><br></pre></td></tr></table></figure>

<p>前两步导入模块，最后一步设置PowerLine主题。</p>
<p>如果你的电脑里没有安装Git，在输入<code>Import-Module posh-git</code>会报错，解决方法是<a href="https://git-scm.com/">安装Git</a>或者把这一行去掉。</p>
<p>但是这次使用<code>Import-Module</code>的指令，再次启动PowerShell就会发现没有效果，这是因为这些指令仅限于本次会话的PowerShell有效，因此，若要使这一效果在每次启动的时候都有效，那就要将其添加到启动脚本中。</p>
<p>在PowerShell中输入<code>code $profile</code> ，然后输入以下内容，保存。如果你没有安装VS Code，则使用<code>notepad $profile</code>。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br><span class="line"><span class="built_in">Set-Theme</span> AgnosterPlus</span><br><span class="line"><span class="built_in">clear</span></span><br></pre></td></tr></table></figure>

<p>如果提示禁止执行脚本之类的错误信息，请将脚本执行策略更改为<code>RemoteSigned</code>。使用具有管理员权限的PowerShell，然后输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure>

<p>这样，在每次PoweShell打开的时候都能启用PowerLine主题。</p>
<h2 id="sarasa-gothic-ttf"><a href="#sarasa-gothic-ttf" class="headerlink" title="sarasa-gothic-ttf"></a>sarasa-gothic-ttf</h2><p>如果你在安装完oh-my-posh后，没有出现图片中显示的色块效果，比如像这样 </p>
<p><code>口master口 +43 ~5 -2</code></p>
<p>这是因为你使用的字体不支持powerline里的插图，可以安装这款 </p>
<p><a href="https://github.com/be5invis/Sarasa-Gothic/releases">Github-更纱黑体</a></p>
<p>安装ttf包即可。解压，里面有很多种，只需要找一种安装，如果全装了C盘会少很多个G的。例如我装的是<code>sarasa-term-sc-</code>的，将这个系列开头的10种不同状态的字体安装就行了。</p>
<p>然后你会发现powershell字体增加了更纱黑体选项。</p>
<h2 id="PSColor"><a href="#PSColor" class="headerlink" title="PSColor"></a>PSColor</h2><p>PSColor的作用是使目录下不同的文件高亮，类似linux系统里把文件夹蓝色高亮的效果。</p>
<p>和上面一样：</p>
<p>为所有用户安装 <code>Install-Module PSColor</code></p>
<p>或者使用普通用户安装<br><code>Install-Module PSColor -Scope CurrentUser</code></p>
<p>安装完导入模块<br> <code>Import-Module PSColor</code></p>
<p>加入初始话脚本<code>notepad $profile</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"><span class="built_in">Import-Module</span> <span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-posh</span></span><br><span class="line"><span class="built_in">Import-Module</span> PSColor</span><br><span class="line"><span class="built_in">Set-Theme</span> AgnosterPlus</span><br><span class="line"><span class="built_in">clear</span></span><br></pre></td></tr></table></figure>

<hr>
<div class="note danger"><p>本帖后文对此处有修改更新，如想自己动手，请看完后面的全文再操作</p>
</div>

<h2 id="Fluent-Terminal"><a href="#Fluent-Terminal" class="headerlink" title="Fluent Terminal"></a>Fluent Terminal</h2><p>专属 Windows 平台 UWP 的轻量终端模拟器。</p>
<blockquote>
<p>  <a href="https://github.com/felixse/FluentTerminal/releases/tag/0.7.4.0">github项目地址</a></p>
</blockquote>
<p>win10的商店也上架了，搜索Fluent Terminal即可</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Win10%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8C%97/Fluent%E5%95%86%E5%BA%97.png"></p>
<p>以github为例：下载解压，右键点击 <code>Install.ps1</code>，选择使用 PowerShell 运行，安装完成。</p>
<p>如果不安装第三方终端，只用powershell，也会比原来好看很多：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Win10%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8C%97/%E7%BE%8E%E5%8C%96%E5%90%8E%E7%9A%84powershell.png"></p>
<h2 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h2><p>以上插件（PowerLine和PSColor）大概还有更好的替代，只要肯折腾。</p>
<hr>
<h1 id="更新修改"><a href="#更新修改" class="headerlink" title="更新修改"></a>更新修改</h1><blockquote>
<p>重装了windows10，发现windows terminal比fluent terminal加载速度更快，且支持标签栏。是更好的上位替代。</p>
</blockquote>
<p>最终效果：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Win10%E7%BB%88%E7%AB%AF%E7%BE%8E%E5%8C%96%E6%8C%87%E5%8C%97/20210131225935.png" alt="image-20210131223657835"></p>
<h2 id="windows-terminal替代Fluent-Terminal"><a href="#windows-terminal替代Fluent-Terminal" class="headerlink" title="windows terminal替代Fluent Terminal"></a>windows terminal替代Fluent Terminal</h2><p>去win10应用商店搜索安装即可。win10商店上架两个版本，即windows terminal和windows terminal precious。我装的前者。另外，本软件设置页非图形界面。<br>另外，此软件上架github：</p>
<blockquote>
<p><a href="https://github.com/microsoft/terminal">https://github.com/microsoft/terminal</a></p>
</blockquote>
<p>目前star数为71k，为前者7.6k的近十倍。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>官方文档贴：<a href="https://docs.microsoft.com/zh-cn/windows/terminal/custom-terminal-gallery/frosted-glass-theme">https://docs.microsoft.com/zh-cn/windows/terminal/custom-terminal-gallery/frosted-glass-theme</a></p>
<p>需要下载软件本体和额外一个字体：</p>
<blockquote>
<p>本体：<a href="https://github.com/microsoft/terminal">https://github.com/microsoft/terminal</a><br>字体：<a href="https://github.com/microsoft/cascadia-code/releases">https://github.com/microsoft/cascadia-code/releases</a></p>
</blockquote>
<p>对powershell的配置同上文，做到Fluent Terminal这步即可，下载完此软件后，新建标签页旁的下拉框进设置，是一份josn的配置文件，这是我的主题配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This file was initially generated by Windows Terminal 1.5.10271.0</span></span><br><span class="line"><span class="comment">// It should still be usable in newer versions, but newer versions might have additional</span></span><br><span class="line"><span class="comment">// settings, help text, or changes that you will not see unless you clear this file</span></span><br><span class="line"><span class="comment">// and let us generate a new one for you.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.</span></span><br><span class="line"><span class="comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;$schema&quot;</span>: <span class="string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;defaultProfile&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// You can add more global application settings here.</span></span><br><span class="line">    <span class="comment">// To learn more about global settings, visit https://aka.ms/terminal-global-settings</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enabled, selections are automatically copied to your clipboard.</span></span><br><span class="line">    <span class="attr">&quot;copyOnSelect&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If enabled, formatted data is also copied to your clipboard</span></span><br><span class="line">    <span class="attr">&quot;copyFormatting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// A profile specifies a command to execute paired with information about how it should look and feel.</span></span><br><span class="line">    <span class="comment">// Each one of them will appear in the &#x27;New Tab&#x27; dropdown,</span></span><br><span class="line">    <span class="comment">//   and can be invoked from the commandline with `wt.exe -p xxx`</span></span><br><span class="line">    <span class="comment">// To learn more about profiles, visit https://aka.ms/terminal-profile-settings</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;defaults&quot;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Put settings here that you want to apply to all profiles.</span></span><br><span class="line">            <span class="attr">&quot;fontFace&quot;</span>: <span class="string">&quot;Cascadia Code PL&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;acrylicOpacity&quot;</span>: <span class="number">0.7</span>,</span><br><span class="line">            <span class="attr">&quot;colorScheme&quot;</span> : <span class="string">&quot;Frost&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cursorColor&quot;</span> : <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;useAcrylic&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;list&quot;</span>:</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Windows PowerShell&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;powershell.exe&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the cmd.exe profile.</span></span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;命令提示符&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;cmd.exe&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Azure Cloud Shell&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;Windows.Terminal.Azure&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom color schemes to this array.</span></span><br><span class="line">    <span class="comment">// To learn more about color schemes, visit https://aka.ms/terminal-color-schemes</span></span><br><span class="line">    <span class="attr">&quot;theme&quot;</span>: <span class="string">&quot;light&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;schemes&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;Frost&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;background&quot;</span> : <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;black&quot;</span> : <span class="string">&quot;#3C5712&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;blue&quot;</span> : <span class="string">&quot;#17b2ff&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlack&quot;</span> : <span class="string">&quot;#749B36&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightBlue&quot;</span> : <span class="string">&quot;#27B2F6&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightCyan&quot;</span> : <span class="string">&quot;#13A8C0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightGreen&quot;</span> : <span class="string">&quot;#89AF50&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightPurple&quot;</span> : <span class="string">&quot;#F2A20A&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightRed&quot;</span> : <span class="string">&quot;#F49B36&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightWhite&quot;</span> : <span class="string">&quot;#741274&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;brightYellow&quot;</span> : <span class="string">&quot;#991070&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cyan&quot;</span> : <span class="string">&quot;#3C96A6&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;foreground&quot;</span> : <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;green&quot;</span> : <span class="string">&quot;#6AAE08&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;purple&quot;</span> : <span class="string">&quot;#991070&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;red&quot;</span> : <span class="string">&quot;#8D0C0C&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;white&quot;</span> : <span class="string">&quot;#6E386E&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;yellow&quot;</span> : <span class="string">&quot;#991070&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add custom actions and keybindings to this array.</span></span><br><span class="line">    <span class="comment">// To unbind a key combination from your defaults.json, set the command to &quot;unbound&quot;.</span></span><br><span class="line">    <span class="comment">// To learn more about actions and keybindings, visit https://aka.ms/terminal-keybindings</span></span><br><span class="line">    <span class="attr">&quot;actions&quot;</span>:</span><br><span class="line">    [</span><br><span class="line">        <span class="comment">// Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.</span></span><br><span class="line">        <span class="comment">// These two lines additionally bind them to Ctrl+C and Ctrl+V.</span></span><br><span class="line">        <span class="comment">// To learn more about selection, visit https://aka.ms/terminal-selection</span></span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: &#123;<span class="attr">&quot;action&quot;</span>: <span class="string">&quot;copy&quot;</span>, <span class="attr">&quot;singleLine&quot;</span>: <span class="literal">false</span> &#125;, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+c&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;paste&quot;</span>, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+v&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Press Ctrl+Shift+F to open the search box</span></span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;find&quot;</span>, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;ctrl+shift+f&quot;</span> &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Press Alt+Shift+D to open a new pane.</span></span><br><span class="line">        <span class="comment">// - &quot;split&quot;: &quot;auto&quot; makes this pane open in the direction that provides the most surface area.</span></span><br><span class="line">        <span class="comment">// - &quot;splitMode&quot;: &quot;duplicate&quot; makes the new pane use the focused pane&#x27;s profile.</span></span><br><span class="line">        <span class="comment">// To learn more about panes, visit https://aka.ms/terminal-panes</span></span><br><span class="line">        &#123; <span class="attr">&quot;command&quot;</span>: &#123; <span class="attr">&quot;action&quot;</span>: <span class="string">&quot;splitPane&quot;</span>, <span class="attr">&quot;split&quot;</span>: <span class="string">&quot;auto&quot;</span>, <span class="attr">&quot;splitMode&quot;</span>: <span class="string">&quot;duplicate&quot;</span> &#125;, <span class="attr">&quot;keys&quot;</span>: <span class="string">&quot;alt+shift+d&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/76436374">Windows Terminal 美化实例</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/56808199">告别 Windows 终端的难看难用，从改造 PowerShell 的外观开始</a></p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>VBScript基础</title>
    <url>/2020/01/21/vbscript-ji-chu/</url>
    <content><![CDATA[<h1 id="VBScript基础"><a href="#VBScript基础" class="headerlink" title="VBScript基础"></a>VBScript基础</h1><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h2><ol>
<li>VBS是一种脚本语言</li>
<li>VBS是微软的编程语言<code>Visual Basic</code>的轻量级版本</li>
<li>格式为file.vbs</li>
<li>弱类型</li>
</ol>
<h2 id="二-变量和常量"><a href="#二-变量和常量" class="headerlink" title="二. 变量和常量"></a>二. 变量和常量</h2><ul>
<li>定义：必须以字母开头，不能包含点号，不能超过255个字符</li>
</ul>
<h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h3><ul>
<li><p>变量的生存期：</p>
<ol>
<li>变量的生存期：指的是它可以存在的时长</li>
<li>本地变量：在一个子程序中声明变量时，变量只能在此程序中访问。退出此程序时，变量也会失效。可以在不同的子程序中使用名称相同的本地变量，每个变量只能在声明它的程序中被识别。</li>
<li>如果在子程序以外声明了一个变量，在页面上的所有子程序都能访问到它。这类变量的生存期始于他们被声明，止于页面关闭。</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> variable <span class="comment">&#x27;定义变量</span></span><br><span class="line">variable =<span class="built_in">inputbox</span>(<span class="string">&quot;请输入&quot;</span>) </span><br><span class="line">msgbox variable <span class="keyword">rem</span> 窗口输出variable</span><br></pre></td></tr></table></figure>
</li>
<li><p>赋值</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> num:num=<span class="number">0</span> <span class="comment">&#x27;可用冒号：在声明后赋值</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-常量"><a href="#2-常量" class="headerlink" title="2. 常量"></a>2. 常量</h3><ul>
<li>计算圆的面积</li>
</ul>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> s,r </span><br><span class="line"><span class="keyword">const</span> pi=<span class="number">3.14</span></span><br><span class="line">r=<span class="built_in">inputbox</span>(<span class="string">&quot;请输入半径&quot;</span>)</span><br><span class="line">s=pi*r*r</span><br><span class="line">msgbox s</span><br></pre></td></tr></table></figure>

<h2 id="三-数学运算"><a href="#三-数学运算" class="headerlink" title="三. 数学运算"></a>三. 数学运算</h2><h3 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. 运算符"></a>1. 运算符</h3><ul>
<li><p>四则运算：+ - * /</p>
</li>
<li><p>取余 mod<br><code>a = 9 mod 2  =&gt; a=1</code></p>
</li>
<li><p>次方 ^<br><code>a = 2 ^ 3    =&gt;    a=8</code></p>
</li>
<li><p>字符串拼接 +<br><code>a=&quot;hello&quot;,b=&quot; world&quot;,c=a+b    =&gt;    c=&quot;hello world&quot;</code></p>
</li>
<li><p>拼接 &amp;<br><code>dim i:i=1        msgbox &quot;this is&quot;&amp;i</code></p>
</li>
</ul>
<h3 id="2-类型转换"><a href="#2-类型转换" class="headerlink" title="2. 类型转换"></a>2. 类型转换</h3><ul>
<li>转int<br><code>a = int ( 5.5 )  =&gt;    a=5</code></li>
</ul>
<h2 id="四-数据类型"><a href="#四-数据类型" class="headerlink" title="四. 数据类型"></a>四. 数据类型</h2><h3 id="1-布尔"><a href="#1-布尔" class="headerlink" title="1. 布尔"></a>1. 布尔</h3><figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> a,b</span><br><span class="line">a=<span class="literal">true</span></span><br><span class="line">b=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="五-语句"><a href="#五-语句" class="headerlink" title="五.语句"></a>五.语句</h2><h3 id="1-条件-if"><a href="#1-条件-if" class="headerlink" title="1. 条件 if"></a>1. 条件 if</h3><figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> a</span><br><span class="line">a=<span class="built_in">inputbox</span>(<span class="string">&quot;请输入一个大于50的数&quot;</span>)</span><br><span class="line">a=<span class="built_in">int</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a&gt;<span class="number">50</span> <span class="keyword">then</span></span><br><span class="line">    msgbox <span class="string">&quot;T&quot;</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span></span><br><span class="line">        a=<span class="number">50</span> <span class="keyword">then</span></span><br><span class="line">        msgbox <span class="string">&quot;equal&quot;</span></span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        msgbox	<span class="string">&quot;F&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span></span><br></pre></td></tr></table></figure>

<h3 id="2-选择-select-…-case"><a href="#2-选择-select-…-case" class="headerlink" title="2. 选择 select … case"></a>2. 选择 select … case</h3><figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> a</span><br><span class="line">a=<span class="built_in">inputbox</span> (<span class="string">&quot;请输入数字&quot;</span>)</span><br><span class="line">a=<span class="built_in">int</span>(a)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> a</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span></span><br><span class="line">    msgbox <span class="string">&quot;one&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span></span><br><span class="line">    msgbox <span class="string">&quot;two&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span></span><br><span class="line">    msgbox <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">else</span> </span><br><span class="line">    msgbox	<span class="string">&quot;error&quot;</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">select</span></span><br></pre></td></tr></table></figure>

<h3 id="3-循环"><a href="#3-循环" class="headerlink" title="3.循环"></a>3.循环</h3><ul>
<li><p>do - loop</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;此处用两个if - else语句演示例子</span></span><br><span class="line">num=<span class="number">0</span></span><br><span class="line"><span class="keyword">dim</span> password</span><br><span class="line"><span class="keyword">const</span> pass = <span class="string">&quot;233&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    password = <span class="built_in">inputbox</span>(<span class="string">&quot;password:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> password=pass <span class="keyword">then</span></span><br><span class="line">        msgbox <span class="string">&quot;all right&quot;</span></span><br><span class="line">        <span class="keyword">exit</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">if</span> num = <span class="number">3</span> <span class="keyword">then</span></span><br><span class="line">                msgbox <span class="string">&quot;GG&quot;</span></span><br><span class="line">                <span class="keyword">exit</span> <span class="keyword">do</span></span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            num=num+<span class="number">1</span></span><br><span class="line">            msgbox <span class="string">&quot;error,plz input again&quot;</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"><span class="keyword">loop</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>for - next</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> count</span><br><span class="line"><span class="keyword">for</span> count=<span class="number">0</span> <span class="keyword">to</span> <span class="number">10</span></span><br><span class="line">    msgbox count</span><br><span class="line"><span class="keyword">next</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>do - while</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">do</span> <span class="keyword">while</span> count&lt;<span class="number">11</span></span><br><span class="line">    msgbox count</span><br><span class="line">    count=count+<span class="number">1</span></span><br><span class="line"><span class="keyword">loop</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>跳出循环 exit for | exit do (do - loop)</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> num:num=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span> <span class="keyword">to</span> <span class="number">9</span></span><br><span class="line">    num=num+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num=<span class="number">5</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">exit</span> <span class="keyword">for</span> </span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"><span class="keyword">next</span></span><br><span class="line"></span><br><span class="line">msgbox num</span><br></pre></td></tr></table></figure>
</li>
<li><p>循环嵌套</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;9X9乘法表</span></span><br><span class="line"><span class="keyword">dim</span> i,j,k</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span> <span class="keyword">to</span> <span class="number">9</span></span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">1</span> <span class="keyword">to</span> <span class="number">9</span></span><br><span class="line">        k=i*j</span><br><span class="line">        msgbox k</span><br><span class="line">    <span class="keyword">next</span></span><br><span class="line"><span class="keyword">next</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="六-数组"><a href="#六-数组" class="headerlink" title="六. 数组"></a>六. 数组</h2><h3 id="1-一维数组"><a href="#1-一维数组" class="headerlink" title="1. 一维数组"></a>1. 一维数组</h3><ul>
<li>定义</li>
</ul>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> name(<span class="number">2</span>)</span><br><span class="line">name(<span class="number">0</span>)=<span class="string">&quot;A&quot;</span></span><br><span class="line">name(<span class="number">1</span>)=<span class="string">&quot;B&quot;</span></span><br><span class="line">name(<span class="number">2</span>)=<span class="string">&quot;C&quot;</span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span> <span class="keyword">to</span> <span class="number">2</span></span><br><span class="line">    <span class="comment">&#x27;name(i)=&quot;this is &quot;&amp;i</span></span><br><span class="line">    msgbox name(i)</span><br><span class="line"><span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串和数字的连接<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> name(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span> <span class="keyword">to</span> <span class="number">2</span></span><br><span class="line">    name(i)=<span class="string">&quot;this is &quot;</span>&amp;i</span><br><span class="line">    msgbox name(i)</span><br><span class="line"><span class="keyword">next</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-二维数组"><a href="#2-二维数组" class="headerlink" title="2. 二维数组"></a>2. 二维数组</h3><ul>
<li>定义</li>
</ul>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> msg(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">msg(<span class="number">0</span>,<span class="number">0</span>)=<span class="string">&quot;first&quot;</span></span><br><span class="line">msg(<span class="number">0</span>,<span class="number">1</span>)=<span class="number">1</span></span><br><span class="line">msg(<span class="number">1</span>,<span class="number">0</span>)=<span class="string">&quot;second&quot;</span></span><br><span class="line">msg(<span class="number">1</span>,<span class="number">1</span>)=<span class="number">2</span></span><br><span class="line"><span class="keyword">dim</span> i,j</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span> <span class="keyword">to</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">0</span> <span class="keyword">to</span> <span class="number">1</span></span><br><span class="line">        msgbox msg(i,j)</span><br><span class="line">    <span class="keyword">next</span></span><br><span class="line"><span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用例子</li>
</ul>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> msg(<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line"><span class="keyword">dim</span> i,j</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span> <span class="keyword">to</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">0</span> <span class="keyword">to</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">dim</span> op</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">case</span> j</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span></span><br><span class="line">            op=<span class="string">&quot;name&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span></span><br><span class="line">            op=<span class="string">&quot;age&quot;</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">select</span></span><br><span class="line">        msg(i,j)=<span class="built_in">inputbox</span>(<span class="string">&quot;请输入第&quot;</span> &amp; i+<span class="number">1</span> &amp; <span class="string">&quot;个人的&quot;</span> &amp; op)</span><br><span class="line">    <span class="keyword">next</span></span><br><span class="line"><span class="keyword">next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">0</span> <span class="keyword">to</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j=<span class="number">0</span> <span class="keyword">to</span> <span class="number">1</span></span><br><span class="line">    msgbox msg(i,j)</span><br><span class="line">    <span class="keyword">next</span></span><br><span class="line"><span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<ul>
<li>遇到问题：运行VB代码脚本的时候提示：Microsoft VBScript 编译器错误 错误 ‘800a0409’ 未结束的字符串常量<br>原因是：编码错误<br>解决方法：另存为编码是ANSI的文本，重新运行</li>
</ul>
<h2 id="七-函数"><a href="#七-函数" class="headerlink" title="七. 函数"></a>七. 函数</h2><h3 id="1-库函数"><a href="#1-库函数" class="headerlink" title="1. 库函数"></a>1. 库函数</h3><ul>
<li><p><code>msgbox &quot;hello&quot;</code></p>
</li>
<li><p>inputbox(“input”)</p>
</li>
<li><p>获取系统日期</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;string date() &amp; string time() = string now() </span></span><br><span class="line">msgbox <span class="built_in">date</span>()+<span class="built_in">time</span>()</span><br><span class="line">msgbox <span class="built_in">now</span>()</span><br><span class="line"><span class="comment">&#x27;int month()</span></span><br><span class="line"><span class="keyword">dim</span> mon=<span class="built_in">month</span>(<span class="string">&quot;2020-1-25&quot;</span>)</span><br><span class="line">msgbox mon</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串函数</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> a</span><br><span class="line">a=<span class="string">&quot;HELLO WORLD&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;大写转小写	string lcase()	~~LessCase~~</span></span><br><span class="line">a=<span class="built_in">lcase</span>(a)</span><br><span class="line">msgbox a</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;小写转大写	string ucase()</span></span><br><span class="line">a=(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">a=<span class="built_in">ucase</span>(a)</span><br><span class="line">msgbox a</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;取长度	int len()</span></span><br><span class="line">a=<span class="built_in">len</span>(a)</span><br><span class="line">msgbox a</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;替换		string replace()</span></span><br><span class="line">a=<span class="built_in">replace</span>(<span class="string">&quot;HELLO WORLD&quot;</span>,<span class="string">&quot;WORLD&quot;</span>,<span class="string">&quot;VBscript&quot;</span>)</span><br><span class="line">msgbox a</span><br></pre></td></tr></table></figure>
</li>
<li><p>数学函数</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;取绝对值</span></span><br><span class="line"><span class="keyword">dim</span> a</span><br><span class="line">a=<span class="built_in">abs</span>(<span class="number">-9</span>)</span><br><span class="line">msgbox a</span><br><span class="line"><span class="comment">&#x27;取整 int int(a)</span></span><br><span class="line"><span class="comment">&#x27;三角 sin() cos() </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组函数</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dim</span> a(<span class="number">2</span>)</span><br><span class="line">a(<span class="number">0</span>)=<span class="string">&quot;zero&quot;</span></span><br><span class="line">a(<span class="number">1</span>)=<span class="string">&quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;判断是否是数组 boolean isarray()</span></span><br><span class="line">b=<span class="built_in">isarray</span>(a)</span><br><span class="line">msgbox b</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;最小下标 int lbound(a)</span></span><br><span class="line">b=<span class="built_in">lbound</span>(a) </span><br><span class="line">msgbox b <span class="comment">&#x27;b=0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;最大下标 int ubound(a)</span></span><br><span class="line">b=<span class="built_in">ubound</span>(a)</span><br><span class="line">msgbox b <span class="comment">&#x27;b=2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>格式转化</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;转换 conversion</span></span><br><span class="line"><span class="comment">&#x27;字符串转整数	cint()  ~~change int~~</span></span><br><span class="line"><span class="keyword">dim</span> a</span><br><span class="line">a=<span class="built_in">cint</span>(<span class="string">&quot;890&quot;</span>)</span><br><span class="line">msgbox a</span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;进制转化 hex() 	oct()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;格式化 format</span></span><br><span class="line"><span class="keyword">dim</span> a</span><br><span class="line">a= <span class="built_in">formatnumber</span>(<span class="number">2000</span>)	</span><br><span class="line">msgbox a</span><br><span class="line">a=<span class="built_in">formatnumber</span>(<span class="number">2000</span>,<span class="number">1</span>)	<span class="comment">&#x27;一位小数</span></span><br><span class="line">msgbox a</span><br><span class="line">a=<span class="built_in">formatpercent</span>(<span class="number">2</span>/<span class="number">5</span>)</span><br><span class="line">msgbox a</span><br><span class="line">a=<span class="built_in">formatpercent</span>(<span class="number">2</span>/<span class="number">5</span>,<span class="number">1</span>)  <span class="comment">&#x27;一位小数</span></span><br><span class="line">msgbox a</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-自定义函数"><a href="#2-自定义函数" class="headerlink" title="2.自定义函数"></a>2.自定义函数</h3><ol>
<li>函数 function()</li>
</ol>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;定义</span></span><br><span class="line"><span class="keyword">function</span> func(name)</span><br><span class="line">    msgbox <span class="string">&quot;hello &quot;</span> &amp;name</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#x27;调用</span></span><br><span class="line"><span class="keyword">call</span> func(<span class="string">&quot;world&quot;</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>子程序 sub()<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#x27;定义</span></span><br><span class="line"><span class="keyword">sub</span> msg(name)</span><br><span class="line">    msgbox <span class="string">&quot;hello&quot;</span>&amp;name</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">sub</span></span><br><span class="line"><span class="comment">&#x27;调用</span></span><br><span class="line"><span class="keyword">call</span> <span class="keyword">sub</span>(<span class="string">&quot;world&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>call 可以省略</li>
</ul>
<h2 id="八-文件执行"><a href="#八-文件执行" class="headerlink" title="八. 文件执行"></a>八. 文件执行</h2><h3 id="1-wscript类"><a href="#1-wscript类" class="headerlink" title="1. wscript类"></a>1. wscript类</h3><figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> ws=wscript.<span class="built_in">createobject</span>(<span class="string">&quot;wscript.shell&quot;</span>)</span><br><span class="line">ws.run <span class="string">&quot;notepad.exe&quot;</span>	<span class="comment">&#x27;返回值&#x27;</span></span><br><span class="line">ws.exec <span class="string">&quot;notepad.exe&quot;</span>	<span class="comment">&#x27;返回对象&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>路径带空格</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> ws=wscript.<span class="built_in">createobject</span>(<span class="string">&quot;wscript.shell&quot;</span>)</span><br><span class="line">ws.run<span class="string">&quot;&quot;&quot;F:\SteamLibrary\steamapps\common&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>run()的参数</p>
<ol>
<li>路径</li>
<li>窗口:1-正常运行    2-激活程序最小化    3-激活程序最大化</li>
<li>T\F: 是否等待</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>vbscript</tag>
      </tags>
  </entry>
  <entry>
    <title>linux编译运行c,c++,java</title>
    <url>/2021/01/03/linux-bian-yi-yun-xing-c-c-java/</url>
    <content><![CDATA[<h1 id="linux编译运行c-c-java"><a href="#linux编译运行c-c-java" class="headerlink" title="linux编译运行c,c++,java"></a>linux编译运行c,c++,java</h1><h2 id="运行C"><a href="#运行C" class="headerlink" title="运行C"></a>运行C</h2><ol>
<li> 安装gcc</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install gcc</span><br></pre></td></tr></table></figure>

<ol start="2">
<li> 就地写一个C程序</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># vi hello.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                sum+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sum is %d\n&quot;</span>,sum);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li> 编译输出为hello.out</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# gcc hello.c</span><br><span class="line">hello.c: In function ‘main’:</span><br><span class="line">hello.c:6:2: error: ‘for’ loop initial declarations are only allowed in C99 mode</span><br><span class="line">  for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">  ^</span><br><span class="line">hello.c:6:2: note: use option -std=c99 or -std=gnu99 to compile your code</span><br><span class="line">[root@localhost ~]# gcc -std=c99 hello.c -o hello.out</span><br><span class="line">[root@localhost ~]# ls</span><br><span class="line">anaconda-ks.cfg  hello.c  hello.out  mysql-8.0.22-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure>

<ol start="4">
<li> 运行</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ./hello.out</span><br><span class="line">12</span><br><span class="line">sum is 12</span><br></pre></td></tr></table></figure>

<h2 id="运行C-1"><a href="#运行C-1" class="headerlink" title="运行C++"></a>运行C++</h2><ol>
<li> 安装gcc-c++</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install gcc-c++</span><br></pre></td></tr></table></figure>

<ol start="2">
<li> 就地写一个C++程序</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="meta"># vi hello.cpp</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(s,s+<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i) <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li> 编译</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# g++ hello.cpp -o hellocpp.out</span><br><span class="line">[root@localhost ~]# ls</span><br><span class="line">anaconda-ks.cfg  hello.c  hello.cpp  hellocpp.out  hello.out  mysql-8.0.22-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure>

<ol start="4">
<li> 运行</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ./hellocpp.out </span><br><span class="line">12 32 535 6 34</span><br><span class="line">6 12 32 34 535</span><br></pre></td></tr></table></figure>

<h2 id="运行java"><a href="#运行java" class="headerlink" title="运行java"></a>运行java</h2><p>jdk包名：jdk-15.0.1_linux-x64_bin.tar.gz</p>
<ol>
<li> java环境文件丢到/lib</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /lib/java</span><br><span class="line">[root@localhost ~]# mv ./jdk-15.0.1_linux-x64_bin.tar.gz /lib/java</span><br><span class="line">[root@localhost ~]# cd /lib/java</span><br><span class="line">[root@localhost java]# ls</span><br><span class="line">jdk-15.0.1_linux-x64_bin.tar.gz</span><br><span class="line">[root@localhost java]# tar -zxvf jdk-15.0.1_linux-x64_bin.tar.gz </span><br><span class="line">jdk-15.0.1/bin/jaotc</span><br><span class="line">jdk-15.0.1/bin/jar</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ol start="2">
<li> 配置全局变量</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost java]# vi  /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">shift</span>+g 末尾加入</span></span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/lib/java/jdk-15.0.1</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib</span><br><span class="line">: wq</span><br></pre></td></tr></table></figure>

<ol start="3">
<li> 重新导入变量</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost java]# source /etc/profile</span><br><span class="line">[root@localhost java]# java -version</span><br><span class="line">java version &quot;15.0.1&quot; 2020-10-20</span><br><span class="line">Java(TM) SE Runtime Environment (build 15.0.1+9-18)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 15.0.1+9-18, mixed mode, sharing)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li> 就地写一个java程序</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[root@localhost java]# vi hello.java</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">            Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;next&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (scan.hasNext())&#123;</span><br><span class="line">                String  str1=scan.next();</span><br><span class="line">                System.out.println(<span class="string">&quot;输入的数据为：&quot;</span>+str1);</span><br><span class="line">            &#125;</span><br><span class="line">        	scan.close();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li> 编译运行</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# javac hello.java</span><br><span class="line">[root@localhost ~]# java hello</span><br><span class="line">next</span><br><span class="line">asd</span><br><span class="line">输入的数据为：asd</span><br></pre></td></tr></table></figure>

<ol start="6">
<li> 依赖库</li>
</ol>
<p>全局的库路径在/lib64，用户库路径/usr/lib64</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux配置mysql</title>
    <url>/2021/01/03/linux-pei-zhi-mysql/</url>
    <content><![CDATA[<h1 id="linux配置mysql"><a href="#linux配置mysql" class="headerlink" title="linux配置mysql"></a>linux配置mysql</h1><p>mysql包名：mysql-8.0.22-1.el7.x86_64.rpm-bundle.tar</p>
<ol>
<li> 卸载mariadb</li>
</ol>
<p>mariadb是mysql的一个分支，安装mysql前先卸载mariadb</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]# rpm -qa | grep mariadb</span><br><span class="line">mariadb-libs-5.5.68-1.el7.x86_64</span><br><span class="line">[root@localhost mysql]# rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64</span><br></pre></td></tr></table></figure>

<ol start="2">
<li> 在/lib处解压mysql安装文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /lib/mysql</span><br><span class="line">[root@localhost ~]# mv mysql-8.0.22-1.el7.x86_64.rpm-bundle.tar /lib/mysql</span><br><span class="line">[root@localhost ~]# cd /lib/mysql/</span><br><span class="line">[root@localhost mysql]# tar -xvf mysql-8.0.22-1.el7.x86_64.rpm-bundle.tar </span><br><span class="line">mysql-community-client-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-client-plugins-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-common-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-devel-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-compat-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-compat-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-server-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-test-8.0.22-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<ol start="3">
<li> 安装mysql</li>
</ol>
<p>注意rpm包依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]# yum install net-tools</span><br><span class="line">[root@localhost mysql]# rpm -ivh mysql-community-common-8.0.22-1.el7.x86_64.rpm </span><br><span class="line">[root@localhost mysql]# rpm -ivh mysql-community-client-plugins-8.0.22-1.el7.x86_64.rpm </span><br><span class="line">[root@localhost mysql]# rpm -ivh mysql-community-libs-8.0.22-1.el7.x86_64.rpm </span><br><span class="line">[root@localhost mysql]# rpm -ivh mysql-community-libs-compat-8.0.22-1.el7.x86_64.rpm </span><br><span class="line">[root@localhost mysql]# rpm -ivh mysql-community-client-8.0.22-1.el7.x86_64.rpm </span><br><span class="line">[root@localhost mysql]# rpm -ivh mysql-community-server-8.0.22-1.el7.x86_64.rpm </span><br></pre></td></tr></table></figure>

<ol start="4">
<li> 查看配置文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]# vi /etc/my.cnf</span><br></pre></td></tr></table></figure>

<ol start="5">
<li> 第一次登陆</li>
</ol>
<p>此处的密码为q6QI/wJisam/，建议复制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]# systemctl start mysqld</span><br><span class="line">[root@localhost mysql]# systemctl enable mysqld</span><br><span class="line">[root@localhost mysql]# vi /var/log/mysqld.log</span><br><span class="line"></span><br><span class="line">2021-01-03T15:18:20.141644Z 0 [System] [MY-013169] [Server] /usr/sbin/mysqld (mysqld 8.0.22) initializing of server in progress as process 4891</span><br><span class="line">2021-01-03T15:18:20.162798Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class="line">2021-01-03T15:18:21.109059Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class="line">2021-01-03T15:18:22.156426Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: q6QI/wJisam/</span><br><span class="line">2021-01-03T15:18:24.677535Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.0.22) starting as process 4936</span><br><span class="line">2021-01-03T15:18:24.702687Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class="line">2021-01-03T15:18:25.223499Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class="line">2021-01-03T15:18:25.420077Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: &#x27;::&#x27; port: 33060, socket: /var/run/mysqld/mysqlx.sock</span><br><span class="line">2021-01-03T15:18:25.666171Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.</span><br><span class="line">2021-01-03T15:18:25.666392Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.</span><br><span class="line">2021-01-03T15:18:25.691072Z 0 [System] [MY-010931] [Server] /usr/sbin/mysqld: ready for connections. Version: &#x27;8.0.22&#x27;  socket: &#x27;/var/lib/mysql/mysql.sock&#x27;  port: 3306  MySQL Community Server - GPL.</span><br><span class="line">~                     </span><br><span class="line">~                                                                                                                                                     </span><br><span class="line">~                     </span><br><span class="line">&quot;/var/log/mysqld.log&quot; 11L, 1385C     </span><br><span class="line"></span><br><span class="line">[root@localhost mysql]# mysql -u root -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br></pre></td></tr></table></figure>

<ol start="6">
<li> 修改密码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; alter user &quot;root&quot;@&quot;localhost&quot; identified by &quot;HelloWorld@mednight4&quot;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li> 创建用户ls</li>
</ol>
<p>%表示允许远程登陆</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create user &quot;ls&quot;@&quot;%&quot; identified by &quot;HelloWorld@mednight4&quot;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<ol start="8">
<li> 授权</li>
</ol>
<p>所有权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; grant all on *.* to &quot;ls&quot;@&quot;%&quot; with grant option;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<ol start="9">
<li> 刷新</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<ol start="10">
<li> 查找</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select user,host from mysql.user;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| user             | host      |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| ls               | %         |</span><br><span class="line">| mysql.infoschema | localhost |</span><br><span class="line">| mysql.session    | localhost |</span><br><span class="line">| mysql.sys        | localhost |</span><br><span class="line">| root             | localhost |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<ol start="11">
<li> 切换数据库</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>

<ol start="12">
<li> 修改root用户的远程访问权限</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update user set host&#x3D;&quot;%&quot; where user&#x3D;&quot;root&quot;;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line">mysql&gt; quit</span><br></pre></td></tr></table></figure>

<ol start="13">
<li> 开启远程端口 </li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost mysql]# firewall-cmd --add-port=3306/tcp</span><br><span class="line">success</span><br></pre></td></tr></table></figure>

<ol start="14">
<li> 远程登陆</li>
</ol>
<p>以HeidiSQL为例</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/linux%E9%85%8D%E7%BD%AEmysql/mysql%E8%BF%9E%E6%8E%A5.png"></p>
<ol start="15">
<li> 建表</li>
</ol>
<p>建立数据库hello，建表helloworld</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/linux%E9%85%8D%E7%BD%AEmysql/%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E5%BA%93.png"></p>
<ol start="16">
<li> 使用pc的powershell查询</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/linux%E9%85%8D%E7%BD%AEmysql/pc%E8%BF%9E%E6%8E%A5.png"></p>
<ol start="17">
<li> 改</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/linux%E9%85%8D%E7%BD%AEmysql/%E6%94%B9.png"></p>
<ol start="17">
<li> 增</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/linux%E9%85%8D%E7%BD%AEmysql/%E5%A2%9E.png"></p>
<ol start="18">
<li> 删</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/linux%E9%85%8D%E7%BD%AEmysql/%E5%88%A0.png"></p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python cookbook笔记[1.1-1.53]</title>
    <url>/2020/10/18/python-cookbook-bi-ji-1.1-1.53/</url>
    <content><![CDATA[<h1 id="list加减乘除-amp-元组比较大小"><a href="#list加减乘除-amp-元组比较大小" class="headerlink" title="list加减乘除 &amp; 元组比较大小"></a>list加减乘除 &amp; 元组比较大小</h1><h2 id="1-list直接加减乘除"><a href="#1-list直接加减乘除" class="headerlink" title="1. list直接加减乘除"></a>1. list直接加减乘除</h2><ul>
<li><code>+</code>list加list，把两个list中的元素合并为一个list</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list3 = list1 + list2</span><br><span class="line">print(list3) <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>-</code>不支持此操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">list2 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">list3 = list1-list2</span><br><span class="line">print(list3) <span class="comment"># TypeError: unsupported operand type(s) for -: &#x27;list&#x27; and &#x27;list&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>*</code>列表乘int，每个元素重复扩充</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">list2 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">list3 = list1*list2  <span class="comment"># can&#x27;t multiply sequence by non-int of type &#x27;list&#x27;</span></span><br><span class="line">print(list3)</span><br><span class="line">list3 = list1*<span class="number">1.5</span>  <span class="comment"># can&#x27;t multiply sequence by non-int of type &#x27;float&#x27;</span></span><br><span class="line">print(list3)</span><br><span class="line">list3 = list1*<span class="number">2</span>  <span class="comment"># [4, 3, 2, 4, 3, 2]</span></span><br><span class="line">print(list3)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>/</code>不支持此操作</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">list2 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">list3 = list1/list2</span><br><span class="line">print(list3)  <span class="comment"># unsupported operand type(s) for /: &#x27;list&#x27; and &#x27;list&#x27;</span></span><br><span class="line">list3 = list1/<span class="number">2</span></span><br><span class="line">print(list3)  <span class="comment"># unsupported operand type(s) for /: &#x27;list&#x27; and &#x27;int&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-list元素加减乘除"><a href="#2-list元素加减乘除" class="headerlink" title="2. list元素加减乘除"></a>2. list元素加减乘除</h2><p>元素加减乘除，举例<code>+</code>，<code>-</code> <code>*</code> <code>/</code>同理</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">list2 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">list3 = [a + b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(list1, list2)]</span><br><span class="line">print(list3)  <span class="comment"># [7, 5, 3]</span></span><br></pre></td></tr></table></figure>

<h2 id="3-list-apend-list-和-list-extend-list"><a href="#3-list-apend-list-和-list-extend-list" class="headerlink" title="3. [list].apend([list])和[list].extend([list])"></a>3. [list].apend([list])和[list].extend([list])</h2><p><code>append()</code>这种方法的参数是一个单个元素或者一个整体，该方法没有返回值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list3 = list1 + list2</span><br><span class="line">print(list3)  <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">list3 = list1.append(list2)</span><br><span class="line">print(list3)  <span class="comment"># None append无返回值</span></span><br><span class="line">print(list1)  <span class="comment"># [1, 2, 3, [4, 5, 6]]</span></span><br></pre></td></tr></table></figure>

<p><code>extend()</code>用法同<code>append()</code>，结果同<code>+</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list3 = list1 + list2</span><br><span class="line">print(list3)  <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">list3 = list1.extend(list2)</span><br><span class="line">print(list3)  <span class="comment"># None extend无返回值</span></span><br><span class="line">print(list1)  <span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<h2 id="4-通过某个key值对列表-字典-排序"><a href="#4-通过某个key值对列表-字典-排序" class="headerlink" title="4. 通过某个key值对列表(字典)排序"></a>4. 通过某个key值对列表(字典)排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [(<span class="number">1</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">3</span>), (<span class="number">3</span>, <span class="number">2</span>), (<span class="number">4</span>, -<span class="number">1</span>)]</span><br><span class="line"><span class="built_in">list</span>.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>]) <span class="comment"># 对元组下标为&#x27;1&#x27;的元素进行sort排序</span></span><br><span class="line">print(<span class="built_in">list</span>) <span class="comment"># [(4, -1), (1, 0), (3, 2), (2, 3)]</span></span><br></pre></td></tr></table></figure>

<h2 id="5-lambda函数"><a href="#5-lambda函数" class="headerlink" title="5.lambda函数"></a>5.lambda函数</h2><ul>
<li>直接调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="keyword">lambda</span> x: x + <span class="number">1</span>)(<span class="number">1</span>) <span class="comment"># 第一对括号改变优先级，第二队括号表示函数调用参数1(int)</span></span><br><span class="line">print(a)  <span class="comment"># 6</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认参数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="keyword">lambda</span> x, y=<span class="number">1</span>: x+y)(<span class="number">1</span>) <span class="comment"># 支持常规函数参数写法</span></span><br><span class="line">print(a)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ol>
<li><p>lambda不创建接收变量（def创建的方法是有函数名，而lambda没有函数名）</p>
</li>
<li><p>lambda只是一个表达式，不能包含命令（def是一个语句，lambda可以不同于def 出现在<strong>列表常量</strong>或<strong>函数调用参数</strong>中）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x : x+<span class="number">1</span></span><br><span class="line">num = [f(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span> num</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动返回结果（返回表达式中最后一个表达式的值）</p>
</li>
<li><p>可以直接作为python 列表或python 字典的成员</p>
</li>
<li><p>不可嵌套（if、for、print等语句不能用于lambda中）</p>
</li>
<li><p>不可重用（不能共享给别的程序调用，即<strong>import [模块].[方法] 无效</strong>）</p>
</li>
<li><p>如果<code>for..in..if</code>能做的，不要选择lambda</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num+=<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> listx <span class="keyword">if</span> x&gt;=<span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>lambda函数拥有自己的命名空间，<strong>不能访问自有参数列表之外或全局命名空间里的参数</strong></p>
</li>
<li><p>参数列表不需要用括号</p>
</li>
<li><p>冒号不是用来开始新语句块的</p>
</li>
<li><p>并不会带来程序运行效率的提高，只会使代码更简洁（不等同于C或C++的内联函数，后者的目的是<strong>调用小函数时不占用栈内存从而增加运行效率</strong>）</p>
</li>
<li><p>只能写在一行上，也有人也叫他单行函数</p>
</li>
</ol>
<h2 id="6-tuple的大小比较"><a href="#6-tuple的大小比较" class="headerlink" title="6.tuple的大小比较"></a>6.tuple的大小比较</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print((<span class="number">2</span>, <span class="number">4</span>) &gt; (<span class="number">3</span>, -<span class="number">1</span>))  <span class="comment"># False</span></span><br></pre></td></tr></table></figure>

<p>两个tuple大小比较方法是 从第一个位置开始逐个进行比较，</p>
<ul>
<li><p>如果不等，当前比较结果就是整个tuple的比较结果</p>
</li>
<li><p>如果相等，继续下一个位置的比较，<br>最后，元素多的元组更大：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print((<span class="number">2</span>, <span class="number">4</span>, -<span class="number">6</span>) &gt; (<span class="number">2</span>, <span class="number">4</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python内置进制转换</title>
    <url>/2020/11/13/python-nei-zhi-jin-zhi-zhuan-huan/</url>
    <content><![CDATA[<h1 id="python内置进制转换"><a href="#python内置进制转换" class="headerlink" title="python内置进制转换"></a>python内置进制转换</h1><blockquote>
<p>原文来自脚本之家：<a href="https://www.jb51.net/article/139206.htm">https://www.jb51.net/article/139206.htm</a></p>
</blockquote>
<p>使用Python内置函数：bin()、oct()、int()、hex()可实现进制转换。</p>
<table>
<thead>
<tr>
<th></th>
<th>2进制</th>
<th>8进制</th>
<th>10进制</th>
<th>16进制</th>
</tr>
</thead>
<tbody><tr>
<td>2进制</td>
<td>-</td>
<td>bin(int(x, 8))</td>
<td>bin(int(x, 10))</td>
<td>bin(int(x, 16))</td>
</tr>
<tr>
<td>8进制</td>
<td>oct(int(x, 2))</td>
<td>-</td>
<td>oct(int(x, 10))</td>
<td>oct(int(x, 16))</td>
</tr>
<tr>
<td>10进制</td>
<td>int(x, 2)</td>
<td>int(x, 8)</td>
<td>-</td>
<td>int(x, 16)</td>
</tr>
<tr>
<td>16进制</td>
<td>hex(int(x, 2))</td>
<td>hex(int(x, 8))</td>
<td>hex(int(x, 10))</td>
<td>-</td>
</tr>
</tbody></table>
<p>bin()、oct()、hex()的返回值均为字符串，且分别带有0b、0o、0x前缀。</p>
<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os,sys</span><br><span class="line"> </span><br><span class="line"><span class="comment"># global definition</span></span><br><span class="line"><span class="comment"># base = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F]</span></span><br><span class="line">base = [<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] + [ <span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)+<span class="number">6</span>)]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># bin2dec</span></span><br><span class="line"><span class="comment"># 二进制 to 十进制: int(str,n=10) </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin2dec</span>(<span class="params">string_num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">int</span>(string_num, <span class="number">2</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># hex2dec</span></span><br><span class="line"><span class="comment"># 十六进制 to 十进制</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex2dec</span>(<span class="params">string_num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">int</span>(string_num.upper(), <span class="number">16</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># dec2bin</span></span><br><span class="line"><span class="comment"># 十进制 to 二进制: bin() </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec2bin</span>(<span class="params">string_num</span>):</span></span><br><span class="line">    num = <span class="built_in">int</span>(string_num)</span><br><span class="line">    mid = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            num,rem = <span class="built_in">divmod</span>(num, <span class="number">2</span>)</span><br><span class="line">            mid.append(base[rem])</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> mid[::-<span class="number">1</span>]])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># dec2hex</span></span><br><span class="line"><span class="comment"># 十进制 to 八进制: oct() </span></span><br><span class="line"><span class="comment"># 十进制 to 十六进制: hex() </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec2hex</span>(<span class="params">string_num</span>):</span></span><br><span class="line">    num = <span class="built_in">int</span>(string_num)</span><br><span class="line">    mid = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            num,rem = <span class="built_in">divmod</span>(num, <span class="number">16</span>)</span><br><span class="line">            mid.append(base[rem])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> mid[::-<span class="number">1</span>]])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># hex2tobin</span></span><br><span class="line"><span class="comment"># 十六进制 to 二进制: bin(int(str,16)) </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex2bin</span>(<span class="params">string_num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> dec2bin(hex2dec(string_num.upper()))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># bin2hex</span></span><br><span class="line"><span class="comment"># 二进制 to 十六进制: hex(int(str,2)) </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin2hex</span>(<span class="params">string_num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> dec2hex(bin2dec(string_num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户输入十进制数</span></span><br><span class="line">dec = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入数字：&quot;</span>))</span><br><span class="line">print(<span class="string">&quot;十进制数为：&quot;</span>, dec)</span><br><span class="line">print(<span class="string">&quot;转换为二进制为：&quot;</span>, <span class="built_in">bin</span>(dec))</span><br><span class="line">print(<span class="string">&quot;转换为八进制为：&quot;</span>, <span class="built_in">oct</span>(dec))</span><br><span class="line">print(<span class="string">&quot;转换为十六进制为：&quot;</span>, <span class="built_in">hex</span>(dec))</span><br></pre></td></tr></table></figure>

<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>十进制到二进制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec2oct</span>(<span class="params">num</span>):</span></span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;-&#x27;</span> + dec2oct(<span class="built_in">abs</span>(num))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num, remainder = <span class="built_in">divmod</span>(num, <span class="number">8</span>)</span><br><span class="line">        l.append(<span class="built_in">str</span>(remainder))</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(l[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>十进制到八进制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec2oct</span>(<span class="params">num</span>):</span></span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;-&#x27;</span> + dec2oct(<span class="built_in">abs</span>(num))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num, remainder = <span class="built_in">divmod</span>(num, <span class="number">8</span>)</span><br><span class="line">        l.append(<span class="built_in">str</span>(remainder))</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(l[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>十进制到十六进制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">base = [<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)] + [ <span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)+<span class="number">6</span>)]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec2hex</span>(<span class="params">num</span>):</span></span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;-&#x27;</span> + dec2hex(<span class="built_in">abs</span>(num))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        num,rem = <span class="built_in">divmod</span>(num, <span class="number">16</span>)</span><br><span class="line">        l.append(base[rem])</span><br><span class="line">        <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(l[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>python二进制，八进制，十六进制转换源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cn</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">a=<span class="built_in">int</span>(raw_input(cn(<span class="string">&#x27;请输入要转换的数字:&#x27;</span>)))</span><br><span class="line">b=<span class="built_in">int</span>(raw_input(cn(<span class="string">&#x27;请输入要转换的进制:&#x27;</span>)))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">n,k</span>):</span></span><br><span class="line">    <span class="keyword">if</span> k==<span class="number">16</span>:</span><br><span class="line">        d=n</span><br><span class="line">        s=<span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> d!=<span class="number">0</span>:</span><br><span class="line">            d,f=<span class="built_in">divmod</span>(d,k)</span><br><span class="line">            <span class="keyword">if</span> f==<span class="number">10</span>:</span><br><span class="line">                f=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> f==<span class="number">11</span>:</span><br><span class="line">                f=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> f==<span class="number">12</span>:</span><br><span class="line">                f=<span class="string">&#x27;c&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> f==<span class="number">13</span>:</span><br><span class="line">                f=<span class="string">&#x27;d&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> f==<span class="number">14</span>:</span><br><span class="line">                f=<span class="string">&#x27;e&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> f==<span class="number">15</span>:</span><br><span class="line">                f=<span class="string">&#x27;f&#x27;</span></span><br><span class="line">            s=<span class="built_in">str</span>(f)+s</span><br><span class="line">    	<span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">elif</span> k==<span class="number">2</span> <span class="keyword">or</span> k==<span class="number">8</span>:</span><br><span class="line">        d=n</span><br><span class="line">        s=<span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> d!=<span class="number">0</span>:</span><br><span class="line">            d,f=<span class="built_in">divmod</span>(d,k)</span><br><span class="line">            	s=<span class="built_in">str</span>(f)+s</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">    c=x(a,b)</span><br><span class="line">    <span class="built_in">print</span> c</span><br></pre></td></tr></table></figure>

<p>python 十进制整数转换为36进制以内任意进制</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baseN</span>(<span class="params">num, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> ((num == <span class="number">0</span>) <span class="keyword">and</span> <span class="string">&quot;0&quot;</span>) <span class="keyword">or</span> (baseN(num // b, b).lstrip(<span class="string">&quot;0&quot;</span>) + <span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>[num % b])</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>yaml,json和xml</title>
    <url>/2020/12/08/yaml-json-he-xml/</url>
    <content><![CDATA[<h1 id="yaml-json和xml"><a href="#yaml-json和xml" class="headerlink" title="yaml,json和xml"></a>yaml,json和xml</h1><p>最近做一个爬虫作业（知乎爬取top50），使用yaml保存数据，数据是一个字典列表，如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;top&quot;</span>: <span class="number">34</span>, </span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.zhihu.com/question/265595875&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;question&quot;</span>: <span class="string">&quot;考研如何确定学校？&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;recommend&quot;</span>: <span class="number">216</span>, </span><br><span class="line">        <span class="attr">&quot;comment&quot;</span>: <span class="number">1</span>, </span><br><span class="line">        <span class="attr">&quot;star&quot;</span>: <span class="number">4695</span>, </span><br><span class="line">        <span class="attr">&quot;watcher&quot;</span>: <span class="number">1573098</span>, </span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2020-05-22 07:25:17&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;top&quot;</span>: <span class="number">35</span>, </span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.zhihu.com/question/432129590&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;question&quot;</span>: <span class="string">&quot;如果女生主动一点，男生会不会心动？&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;recommend&quot;</span>: <span class="literal">null</span>, </span><br><span class="line">        <span class="attr">&quot;comment&quot;</span>: <span class="string">&quot;添加评论&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;star&quot;</span>: <span class="number">154</span>, </span><br><span class="line">        <span class="attr">&quot;watcher&quot;</span>: <span class="number">175721</span>, </span><br><span class="line">        <span class="attr">&quot;date&quot;</span>: <span class="string">&quot;2020-12-08 15:05:46&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>用yaml.dump保存时出错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hot_list.yaml&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(yaml.dump(hot_list, encoding=<span class="string">&#x27;utf-8&#x27;</span>, allow_unicode=<span class="literal">True</span>, indent=<span class="number">4</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;G:/Code/IntelliJ Pycharm/Crawler/zhihu/zhihu_crawler.py&quot;, line 98, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    get_section(get_url())</span></span><br><span class="line"><span class="string">  File &quot;G:/Code/IntelliJ Pycharm/Crawler/zhihu/zhihu_crawler.py&quot;, line 96, in get_section</span></span><br><span class="line"><span class="string">    f.write(yaml.dump(data_list, encoding=&#x27;utf-8&#x27;, allow_unicode=True, indent=4))</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\__init__.py&quot;, line 290, in dump</span></span><br><span class="line"><span class="string">    return dump_all([data], stream, Dumper=Dumper, **kwds)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\__init__.py&quot;, line 278, in dump_all</span></span><br><span class="line"><span class="string">    dumper.represent(data)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 27, in represent</span></span><br><span class="line"><span class="string">    node = self.represent_data(data)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 48, in represent_data</span></span><br><span class="line"><span class="string">    node = self.yaml_representers[data_types[0]](self, data)</span></span><br><span class="line"><span class="string">  ...</span></span><br><span class="line"><span class="string">  省略多行yaml库内部错误</span></span><br><span class="line"><span class="string">  ...</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 34, in represent_data</span></span><br><span class="line"><span class="string">    if self.ignore_aliases(data):</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 139, in ignore_aliases</span></span><br><span class="line"><span class="string">    if isinstance(data, tuple) and data == ():</span></span><br><span class="line"><span class="string">RecursionError: maximum recursion depth exceeded while calling a Python object</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Process finished with exit code 1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>此处提示递归深度超出，如果是常规的深度超出，我们可以手动设置得更深一点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)<span class="comment">#设置最大递归层数为1500</span></span><br></pre></td></tr></table></figure>

<p>但是此处明显不是python递归的问题，将yaml.dump改为yaml.safe_dump()方法，错误如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;hot_list.yaml&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(yaml.safe_dump(data_list, allow_unicode=<span class="literal">True</span>, indent=<span class="number">4</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;G:/Code/IntelliJ Pycharm/Crawler/zhihu/zhihu_crawler.py&quot;, line 95, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    get_section(get_url())</span></span><br><span class="line"><span class="string">  File &quot;G:/Code/IntelliJ Pycharm/Crawler/zhihu/zhihu_crawler.py&quot;, line 93, in get_section</span></span><br><span class="line"><span class="string">    f.write(yaml.safe_dump(data_list, allow_unicode=True, indent=4))</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\__init__.py&quot;, line 306, in safe_dump</span></span><br><span class="line"><span class="string">    return dump_all([data], stream, Dumper=SafeDumper, **kwds)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\__init__.py&quot;, line 278, in dump_all</span></span><br><span class="line"><span class="string">    dumper.represent(data)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 27, in represent</span></span><br><span class="line"><span class="string">    node = self.represent_data(data)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 48, in represent_data</span></span><br><span class="line"><span class="string">    node = self.yaml_representers[data_types[0]](self, data)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 199, in represent_list</span></span><br><span class="line"><span class="string">    return self.represent_sequence(&#x27;tag:yaml.org,2002:seq&#x27;, data)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 92, in represent_sequence</span></span><br><span class="line"><span class="string">    node_item = self.represent_data(item)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 48, in represent_data</span></span><br><span class="line"><span class="string">    node = self.yaml_representers[data_types[0]](self, data)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 207, in represent_dict</span></span><br><span class="line"><span class="string">    return self.represent_mapping(&#x27;tag:yaml.org,2002:map&#x27;, data)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 118, in represent_mapping</span></span><br><span class="line"><span class="string">    node_value = self.represent_data(item_value)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 58, in represent_data</span></span><br><span class="line"><span class="string">    node = self.yaml_representers[None](self, data)</span></span><br><span class="line"><span class="string">  File &quot;G:\python environment\lib\site-packages\yaml\representer.py&quot;, line 231, in represent_undefined</span></span><br><span class="line"><span class="string">    raise RepresenterError(&quot;cannot represent an object&quot;, data)</span></span><br><span class="line"><span class="string">yaml.representer.RepresenterError: (&#x27;cannot represent an object&#x27;, &#x27;2020-12-08 11:03:36&#x27;)</span></span><br><span class="line"><span class="string">2020-12-08 07:47:44</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>报的是日期对象错误，大概yaml将日期认成是data对象了，两个错误不相干，但大抵能猜到时数据格式的错误。</p>
<p>然后我使用json格式作为保存方式，保存完成，就是上面展示的json文件，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hot_list.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(data_list,indent=<span class="number">4</span>,ensure_ascii=<span class="literal">False</span>, separators=(<span class="string">&#x27;, &#x27;</span>, <span class="string">&#x27;: &#x27;</span>)))</span><br></pre></td></tr></table></figure>

<p>我们将json文件里的数据读出，并用data_list接收，随后再将data_list写入yaml文件，成功。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hot_list.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    hot_list=json.loads(f.read())</span><br><span class="line">print(hot_list)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hot_list.yaml&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(yaml.dump(hot_list, encoding=<span class="string">&#x27;utf-8&#x27;</span>, allow_unicode=<span class="literal">True</span>, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-   comment: 添加评论</span><br><span class="line">    date: <span class="string">&#x27;2020-12-08 15:05:46&#x27;</span></span><br><span class="line">    question: 如果女生主动一点，男生会不会心动？</span><br><span class="line">    recommend: null</span><br><span class="line">    star: <span class="number">154</span></span><br><span class="line">    top: <span class="number">35</span></span><br><span class="line">    url: https://www.zhihu.com/question/<span class="number">432129590</span></span><br><span class="line">    watcher: <span class="number">175721</span></span><br><span class="line">-   comment: <span class="number">1</span></span><br><span class="line">    date: <span class="string">&#x27;2020-12-08 13:35:09&#x27;</span></span><br><span class="line">    question: 哈登昨日没有去球队报道，他和火箭队的后续会怎样？</span><br><span class="line">    recommend: <span class="number">8</span></span><br><span class="line">    star: <span class="number">40</span></span><br><span class="line">    top: <span class="number">36</span></span><br><span class="line">    url: https://www.zhihu.com/question/<span class="number">433854967</span></span><br><span class="line">    watcher: <span class="number">29397</span></span><br></pre></td></tr></table></figure>

<p>总结，bug原因是数据的格式不满足yaml的要求，具体是哪里的格式错误呢，仔细找了一圈下来，特殊的格式只有None。</p>
<p>毕竟爬虫能不能爬到数据还是另说，方便后面pandas对数据进行清洗，我对字典的初始化方式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">            <span class="string">&#x27;top&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;question&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;recommend&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;comment&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;star&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;watcher&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;date&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这就是问题所在了，当爬虫未能爬取到数据时，字典部分值为None，显然yaml不能接受None，导致bug。</p>
<p>但是json能接受这个格式，并在文件里将其保存为<strong>null</strong>，在存入json文件后数据None转为了null（字符串？），所以也能被yaml操作了。</p>
<h2 id="json"><a href="#json" class="headerlink" title="json"></a>json</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">5</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>如果data是str类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=data.replace(<span class="string">&quot;\&#x27;&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>如果data包含unicode,想要移除unicode编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = re.sub(<span class="string">r&#x27;\\(?![/u&quot;])&#x27;</span>, <span class="string">r&quot;\\\\&quot;</span>, <span class="built_in">str</span>(data))</span><br></pre></td></tr></table></figure>

<p>如果data包含中文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;numbers.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(json.dumps(data_list,indent=<span class="number">4</span>,ensure_ascii=<span class="literal">False</span>, separators=(<span class="string">&#x27;, &#x27;</span>, <span class="string">&#x27;: &#x27;</span>)))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;numbers.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    read=json.loads(f.read())</span><br><span class="line">print(read)</span><br></pre></td></tr></table></figure>

<p>dumps返回的是一个字符串，使用<code>f.write(json.dumps(data))</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">5</span>&#125;]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;numbers.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># dumps直接给的是str，也就是将字典转成json</span></span><br><span class="line">    f.write(json.dumps(data, sort_keys=<span class="literal">True</span>,indent=<span class="number">4</span>, separators=(<span class="string">&#x27;, &#x27;</span>, <span class="string">&#x27;: &#x27;</span>)))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;numbers.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    read=json.loads(f.read())</span><br><span class="line">print(read)</span><br></pre></td></tr></table></figure>

<p>dump需要一个文件对象作为写入参数，使用<code>json.dump(data, fp=f)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data = [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">5</span>&#125;]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;numbers2.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># dump需要一个类似于文件参数,需要与文件结合</span></span><br><span class="line">    json.dump(data, fp=f, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">&#x27;, &#x27;</span>, <span class="string">&#x27;: &#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>文件读</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;numbers.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    read=json.load(f)</span><br><span class="line">print(read)</span><br></pre></td></tr></table></figure>

<h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p><strong>yaml没有dumps和loads写法</strong>，使用<code>f.write(yaml.dump(data))</code></p>
<p>二进制写来写入非str类型数据，encode选择中文编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">data = [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">5</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;numberb.yaml&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># 二进制读写</span></span><br><span class="line">    <span class="comment"># data数据中有汉字时，加上：encoding=&#x27;utf-8&#x27;,allow_unicode=True</span></span><br><span class="line">    f.write(yaml.dump(data, encoding=<span class="string">&#x27;utf-8&#x27;</span>, allow_unicode=<span class="literal">True</span>, indent=<span class="number">4</span>))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;numberb.yaml&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    read = yaml.load(f.read(), Loader=yaml.FullLoader)</span><br><span class="line">print(read)</span><br></pre></td></tr></table></figure>

<p>一般用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">data = [&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">5</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;numbers.yaml&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(yaml.dump(data, allow_unicode=<span class="literal">True</span>, indent=<span class="number">4</span>))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;numbers.yaml&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    read=yaml.load(f.read(), Loader=yaml.FullLoader)</span><br><span class="line">print(read)</span><br></pre></td></tr></table></figure>

<p><code>Object of type datetime is not JSON serializable</code>，json不支持保存datetime对象，但是可以先保存字符串，文件读取之后再对字符串进行转日期对象操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">datetime.datetime.strptime(<span class="string">&#x27;2020-12-08 07:47:44&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>这个格式太丑了，以后有机会再用，到网络编程的时候再学吧。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>博客修改</title>
    <url>/2020/02/05/bo-ke-xiu-gai/</url>
    <content><![CDATA[<div class="note primary"><p>本帖持续更新中。。。</p>
</div>

<h1 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>博客主题：<a href="https://github.com/blinkfox/hexo-theme-matery">matery</a></p>
</blockquote>
<p>拿谷歌的<a href="https://developers.google.com/speed/pagespeed/insights/">pagespeed</a>做个很粗糙的测试：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9/matery%E4%B8%BB%E9%A2%98pe.jpg"><br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9/matery%E4%B8%BB%E9%A2%98pc.jpg"></p>
<p>与用户最多的nexT主题相比：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9/next%E4%B8%BB%E9%A2%98pe.jpg"><br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9/next%E4%B8%BB%E9%A2%98pc.jpg"></p>
<p>有优化的空间，但跑得还是不错的。只要不瞎改的话，不用CDN加速也勉强可以。</p>
<hr>
<h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><blockquote>
<p>转自<a href="https://sunhwee.com/posts/6e8839eb.html#toc-heading-33">洪卫の博客</a></p>
</blockquote>
<h3 id="加载音乐"><a href="#加载音乐" class="headerlink" title="加载音乐"></a>加载音乐</h3><p>这里用到是Aplayer插件，但是歌曲来源需要自己定义，可以这么加载音乐</p>
<p>1.直接加载：</p>
<p>可以在<code>Blog\themes\matery\source\medias\music</code>添加音乐文件.mp3和封面.jpg，然后在<code>musics.json</code>文件里添加路径。像这样：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;The Road&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;artist&quot;</span>: <span class="string">&quot;As The Stars Fall&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;medias\music\music_name.mp3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cover&quot;</span>: <span class="string">&quot;medias\music\music_name.jpg&quot;</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<p>这种方式将文件直接推到仓库，不推荐。</p>
<p>2.外链：</p>
<p>首先我们找到网易云在线平台，任意找到一首歌点进去播放，可以在播放页面的地址栏拿到音乐<code>ID</code>号<br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9/%E9%9F%B3%E4%B9%90%E5%A4%96%E9%93%BEid.jpg"><br>然后修改下面网址<br><code>http://music.163.com/song/media/outer/url?id=XXXXXX.mp3</code><br> <code>XXXXXX</code>替换成刚刚的歌曲<code>ID</code>号<br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9/%E5%A1%AB%E5%86%99id.jpg"><br>网页打开一般是MP3文件的地址，就相当于每一首的外链了。歌曲封面从页面提取封面链接即可。之后将得到的两个链接替换掉第一种方法的相对地址。比如这样：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">	<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;The Road&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;artist&quot;</span>: <span class="string">&quot;As The Stars Fall&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://music.163.com/song/media/outer/url?id=16468500.mp3&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;cover&quot;</span>: <span class="string">&quot;http://p2.music.126.net/dQXurpol9xZAMx-6ohesHw==/109951163101866703.jpg?param=130y130&quot;</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<br />

<h3 id="插入音乐"><a href="#插入音乐" class="headerlink" title="插入音乐"></a>插入音乐</h3><p>特别的，对于<strong>由于版权保护，无法生成外链</strong>的音乐，我们找到<em>生成外链播放器</em>，检查，并复制a链接<code>/outchain/2/16468500/</code><br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9/%E6%A3%80%E6%9F%A5%E5%85%83%E7%B4%A0.jpg"><br>将<code>/outchain/2/16468500/</code>插入到<code>http://music.163.com/#/href</code>后，<code>http://music.163.com/#//outchain/2/16468500/</code>就是生成外链的网址。<br>把HTML代码拷到post文档里就行了：<br><code>&lt;div align=&quot;middle&quot;&gt;这里粘贴刚刚复制的代码&lt;/div&gt;</code></p>
<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=16468500&auto=0&height=66"></iframe></div>

<p><del>好听吗，不好听就说明这个方法已经失效了</del></p>
<hr>
<p>更正：主题更新到next之后，Aplayer无了，直接拷贝网易的iframe吧：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=849739&auto=0&height=66"></iframe>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="//music.163.com/outchain/player?type=2&id=849739&auto=0&height=32"></iframe>

<h2 id="评论区"><a href="#评论区" class="headerlink" title="评论区"></a>评论区</h2><p>我用的Gitalk插件。</p>
<p>最近Github疯狂给我发邮件，说是GitHub不赞成使用<a href="https://developer.github.com/v3/oauth_authorizations">Authorizations API</a>，将要<a href="https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api/">Deprecated APIs and authentication</a>，原因嘛，可能是这个：<a href="https://www.v2ex.com/t/535608">建议大家弃用 Gitalk 和 Gitment 等权限过高的 Github OAuth App</a>，额，水一水了，看大佬怎么处理的：<a href="https://github.com/gitalk/gitalk/issues/343">Gitalk Issues</a>。到时候补充。。。</p>
<hr>
<p><strong>2020.02.25更新</strong></p>
<p>Gitalk插件已更新版本，解决了问题。<br>谈到Github，安利一个chrome插件：<a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=zh-CN">Octotree</a><br>作用是树状列出项目文件和更改，像这样：<br><img data-src="https://www.octotree.io/_nuxt/img/1c8e9ec.gif"></p>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p>B站网站视频分享的选项里有iframe的嵌入代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=48591341&amp;cid=85086096&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>移动端嵌入视频比例：高度200px<del>240px，宽度280</del>330px；推荐大小为： height:200px ；width:330px<br>电脑端嵌入视频比例：高度460px以上，宽度640px以上；推荐大小： height:460px ；width:640px<br>其中，frameborder表示播放控制边框。为了满足响应式，稍微改一点即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;spkj&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://player.bilibili.com/player.html?aid=48591341&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span> <span class="attr">width</span>=<span class="string">100%</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span>  </span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;spkj&quot;</span>).style.height=<span class="built_in">document</span>.getElementById(<span class="string">&quot;spkj&quot;</span>).scrollWidth*<span class="number">0.76</span>+<span class="string">&quot;px&quot;</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<iframe id="spkj" src="https://player.bilibili.com/player.html?aid=48591341&page=1" scrolling="no" border="0" frameborder="true" framespacing="0" allowfullscreen="true" width=100%> </iframe>
<script type="text/javascript">  
document.getElementById("spkj").style.height=document.getElementById("spkj").scrollWidth*0.76+"px";
</script>

<h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><blockquote>
<p><a href="https://github.com/Troy-Yang/hexo-lazyload-image">项目地址</a></p>
</blockquote>
<p><code>hexo-lazyload-image</code>的作用是将博客里面img标签的src属性替换为一个loading image，把真实的图片地址放在data-origin属性下面。然后当你的网页翻到那张图片时，有一段js用data-origin的内容替换src，打到懒加载的目的。</p>
<p>懒加载可能会和gallery插件发生冲突。</p>
<p>安装<code>npm install hexo-lazyload-image --save</code> ，在根<code>_config.yml</code>配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">onlypost:</span> <span class="literal">false</span> <span class="comment"># optional</span></span><br><span class="line">    <span class="attr">loadingImg:</span> <span class="comment"># optional eg ./images/loading.gif</span></span><br><span class="line">    <span class="attr">isSPA:</span> <span class="literal">false</span> <span class="comment"># optional</span></span><br></pre></td></tr></table></figure>

<h2 id="网站地图"><a href="#网站地图" class="headerlink" title="网站地图"></a>网站地图</h2><p><code>npm</code>自动生成网站的<code>sitemap</code>，然后将生成的<code>sitemap</code>提交谷歌 <a href="https://search.google.com/search-console/">地址</a></p>
<p>安装<code>npm install hexo-generator-sitemap --save  </code></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%8D%9A%E5%AE%A2%E4%BF%AE%E6%94%B9/sitemap.png"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure>

<p>顺便说一下谷歌验证的网站所有权，简单一点，可以从谷歌下载提供的.html验证文件，文件里是<code>google-site-verification</code>键和值，将其上传到自己的站点。</p>
<p>需要注意的是，如果你将html文件放到博客<code>\source\</code>目录下，hexo会将其渲染成网站页面，文件就失效了，所以为了防止渲染，简单的做法是放到博客主题文件下，<code>\themes\matery\source\</code>,防止渲染，在生成站点后会在<code>\public\</code>下得到原来未渲染的.html文件。</p>
<h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2><p><code>robots.txt</code> 是存放于网站根目录下的 <code>ASCII</code> 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。</p>
<p><code>robots.txt</code> 放在博客目录下的 <code>source</code> 文件夹中，博客生成后在站点目录 <code>public/</code> 下。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">User-agent:</span> <span class="string">*</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/archives/</span></span><br><span class="line"><span class="attr">Allow:</span> <span class="string">/categories/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/js/</span></span><br><span class="line"><span class="attr">Disallow:</span> <span class="string">/css/</span></span><br></pre></td></tr></table></figure>

<h2 id="git区分大小写"><a href="#git区分大小写" class="headerlink" title="git区分大小写"></a>git区分大小写</h2><p>一个git的小知识。git默认文件是<code>ignorecase = true</code>，即推送仓库无视文件大小写，但是网站访问时，路径是区分大小写的。</p>
<p>当你修改文件夹名大小写，推送到github后，可能出现由于路径大小写的问题导致页面的404，此时去博客的<code>.git</code>目录下，找到<code>config</code>文件，将<code>ignorecase</code>改为<code>false</code>即可。</p>
<h2 id="草稿draft"><a href="#草稿draft" class="headerlink" title="草稿draft"></a>草稿draft</h2><p><code>draft</code>是草稿的意思。</p>
<p><code>hexo new draft newdraft</code>这样会在<code>source/_draft</code>中新建一个<code>newdraft.md</code>文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用<code>hexo server --draft</code>在本地端口中开启服务预览。</p>
<p>如果你的草稿文件写完了，想要发表到<code>post</code>中，<code>hexo publish draft newdraft</code>，就会自动把<code>newdraft.md</code>发送到<code>post</code>中。</p>
<hr>
<p>由于某些原因，博客主题改为了next。现在文章已经迁移完成，除了需要注意一下文件路径，以上的配置方法依然有效。</p>
<hr>
<h2 id="屏蔽点击事件"><a href="#屏蔽点击事件" class="headerlink" title="屏蔽点击事件"></a>屏蔽点击事件</h2><p>让博客变得简洁，在博客主js文件下加入下述代码。</p>
<p>next主题是<code>next-boot.js</code>文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 屏蔽F12</span></span><br><span class="line"><span class="built_in">document</span>.onkeydown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.event &amp;&amp; <span class="built_in">window</span>.event.keyCode == <span class="number">123</span>) &#123;</span><br><span class="line">        event.keyCode = <span class="number">0</span>;</span><br><span class="line">        event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.event &amp;&amp; <span class="built_in">window</span>.event.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.event.keyCode = <span class="number">505</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.event &amp;&amp; <span class="built_in">window</span>.event.keyCode == <span class="number">8</span>) &#123;</span><br><span class="line">        alert(str + <span class="string">&quot;\n请使用Del键进行字符的删除操作！&quot;</span>);</span><br><span class="line">        <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 屏蔽右键菜单</span></span><br><span class="line"><span class="built_in">document</span>.oncontextmenu = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.event) &#123;</span><br><span class="line">        event = <span class="built_in">window</span>.event;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> the = event.srcElement;</span><br><span class="line">        <span class="keyword">if</span> (!((the.tagName == <span class="string">&quot;INPUT&quot;</span> &amp;&amp; the.type.toLowerCase() == <span class="string">&quot;text&quot;</span>) || the.tagName == <span class="string">&quot;TEXTAREA&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 屏蔽粘贴</span></span><br><span class="line"><span class="built_in">document</span>.onpaste = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.event) &#123;</span><br><span class="line">        event = <span class="built_in">window</span>.event;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> the = event.srcElement;</span><br><span class="line">        <span class="keyword">if</span> (!((the.tagName == <span class="string">&quot;INPUT&quot;</span> &amp;&amp; the.type.toLowerCase() == <span class="string">&quot;text&quot;</span>) || the.tagName == <span class="string">&quot;TEXTAREA&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//屏蔽复制，不建议开启</span></span><br><span class="line"><span class="built_in">document</span>.oncopy = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.event) &#123;</span><br><span class="line">        event = <span class="built_in">window</span>.event;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> the = event.srcElement;</span><br><span class="line">        <span class="keyword">if</span> (!((the.tagName == <span class="string">&quot;INPUT&quot;</span> &amp;&amp; the.type.toLowerCase() == <span class="string">&quot;text&quot;</span>) || the.tagName == <span class="string">&quot;TEXTAREA&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 屏蔽剪贴</span></span><br><span class="line"><span class="built_in">document</span>.oncut = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.event) &#123;</span><br><span class="line">        event = <span class="built_in">window</span>.event;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> the = event.srcElement;</span><br><span class="line">        <span class="keyword">if</span> (!((the.tagName == <span class="string">&quot;INPUT&quot;</span> &amp;&amp; the.type.toLowerCase() == <span class="string">&quot;text&quot;</span>) || the.tagName == <span class="string">&quot;TEXTAREA&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Next主题自定义css"><a href="#Next主题自定义css" class="headerlink" title="Next主题自定义css"></a>Next主题自定义css</h1><blockquote>
<p>基于hexo-theme-next-8.0.2自带插件</p>
</blockquote>
<p>现在正式改为了next主题，next的滚动条为原生默认的，不是很搭，自定义一下滚动条。</p>
<p>next的css样式文件为<code>.styl</code>，我之前只接触过<code>.css</code>，算是摸石头过河了。为了方便git拉取更新文件，最好将用户css样式放在自建的样式文件里，否则到时候冲突太多很麻烦。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">themes/hexo-theme-next-8.0.2/source/css/_custom/custom.styl</span></span><br></pre></td></tr></table></figure>

<p>这里style的路径从博客根目录开始：</p>
<p>既然是主题文件，我就直接放在主题文件夹下面的source里，以后想换其他主题也方便。</p>
<p>在css文件夹里新建<code>_custom</code>，然后在<code>_custom</code>文件夹里新建<code>custom.styl</code>，将用户自定义css放在此文件里即可。</p>
<h2 id="添加scrollbar伪选择器样式"><a href="#添加scrollbar伪选择器样式" class="headerlink" title="添加scrollbar伪选择器样式"></a>添加scrollbar伪选择器样式</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">::-webkit-scrollbar &#123;//by mednight4</span><br><span class="line">    <span class="selector-tag">width</span>: 5<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: 5<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">opacity</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track &#123;//by mednight4</span><br><span class="line">    <span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">opacity</span><span class="selector-pseudo">:0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;//by mednight4</span><br><span class="line">    <span class="selector-tag">border-radius</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">background-color</span>: <span class="selector-id">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h2><p>分别给body和侧栏添加图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">body &#123; //by mednight4</span><br><span class="line">  background :url(<span class="string">&quot;/images/body.png&quot;</span>);</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-attachment:fixed;</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.sidebar &#123;</span><br><span class="line">  opacity:<span class="number">1</span>;</span><br><span class="line">  background:url(<span class="string">&quot;/images/sidebar.png&quot;</span>);</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图片的路径在<code>/themes/hexo-theme-next-8.0.2/source/images</code>，也是放在主题文件夹的source里。</p>
<h2 id="修改sidebar链接颜色"><a href="#修改sidebar链接颜色" class="headerlink" title="修改sidebar链接颜色"></a>修改sidebar链接颜色</h2><p>其实是修改左侧sidebar的a链接颜色，想直接在base.style里改，没找到。干脆在<code>custom.styl</code>覆盖好了。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fc6423</span>;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: <span class="number">#555</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行进度条</title>
    <url>/2020/11/29/ming-ling-xing-jin-du-tiao/</url>
    <content><![CDATA[<h1 id="命令行进度条"><a href="#命令行进度条" class="headerlink" title="命令行进度条"></a>命令行进度条</h1><p>跑一个大点的项目时，经常有显示进度条。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9B%E5%BA%A6%E6%9D%A1/%E8%BF%9B%E5%BA%A6%E6%9D%A1.png"></p>
<p>具体的实现方案如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProgressBar</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;动态进度条&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, start=<span class="number">0</span>, stop=<span class="number">100</span>, step=<span class="number">1</span>,width=<span class="number">50</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化参数表</span></span><br><span class="line"><span class="string">        start:起始记录</span></span><br><span class="line"><span class="string">        stop:总记录</span></span><br><span class="line"><span class="string">        width:显示器上的任务条宽度</span></span><br><span class="line"><span class="string">        step:每完成一个任务的进度</span></span><br><span class="line"><span class="string">        prgress:表示当前进度的屏幕长度</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.current = start</span><br><span class="line">        self.total = stop</span><br><span class="line">        self.width = width</span><br><span class="line">        self.step = step</span><br><span class="line">        self.progress = <span class="built_in">int</span>(self.width * self.current / self.total)</span><br><span class="line">        self.end = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        完成一个任务的进度</span></span><br><span class="line"><span class="string">        step:每完成一个任务的进度，传入参数将修改类的此项属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.current += self.step</span><br><span class="line">        self.progress = <span class="built_in">int</span>(self.width * self.current / self.total)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        在控制台输出当前进度条</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.end:</span><br><span class="line">            sys.stdout.write(<span class="string">&#x27; &#x27;</span> * (self.width + <span class="number">18</span>) + <span class="string">&#x27;\r&#x27;</span>)    <span class="comment"># 18是产生变化的数的长度([##-]前的数)</span></span><br><span class="line">            sys.stdout.flush()</span><br><span class="line">            sys.stdout.write(<span class="built_in">str</span>(self.current)+<span class="string">&#x27;/&#x27;</span>+<span class="built_in">str</span>(self.total)+<span class="string">&#x27;=&#x27;</span>+<span class="string">&#x27;%.2f&#x27;</span>%(self.current*<span class="number">100</span>/self.total)+<span class="string">&#x27;% &#x27;</span>)</span><br><span class="line">            sys.stdout.write(<span class="string">&quot;[&quot;</span> + <span class="string">&#x27;#&#x27;</span> * self.progress + <span class="string">&#x27;-&#x27;</span> *(self.width - self.progress) + <span class="string">&quot;]\r&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> self.width &lt;= self.progress:</span><br><span class="line">                sys.stdout.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                self.end = <span class="literal">True</span></span><br><span class="line">            sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="string">&quot;\n&quot;</span>*<span class="number">3</span>)</span><br><span class="line">    bar = ProgressBar(start=<span class="number">0</span>, stop=<span class="number">194</span>, step=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">194</span>, <span class="number">1</span>):</span><br><span class="line">        bar.move()</span><br><span class="line">        bar.log()</span><br><span class="line">        time.sleep(<span class="number">0.05</span>)</span><br></pre></td></tr></table></figure>

<p>需要注意的是，</p>
<p><code>for i in range(start,stop,step)</code></p>
<p><code>ProgressBar(start,stop,step)</code></p>
<p>三个参数需要一致，然后将<code>bar.move()</code>加入项目的完成一步之后。<code>bar.log()</code>能够实时更新就行，简单点可以放在<code>bar.mve()</code>后面。</p>
<p>这只是一个雏形，可以当成模板，具体如要显示其他的内容，例如项目步骤的详细内容等，在<code>log()</code>函数中实现即可。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于博客迁移的通知</title>
    <url>/2021/06/04/bo-ke-qian-yi/</url>
    <content><![CDATA[<iframe id="m4_iframe" 
        src="https://mednight4.com" 
        scrolling="yes" 
        frameborder="no" 
        width=100%> 
</iframe>
<script type="text/javascript">  
    document.getElementById("m4_iframe").style.height
        =document.getElementById("m4_iframe").scrollWidth*0.68+"px";
</script>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>由于意外薅到了一台云主机，从此hexo就写到这里。<br>以后文章多在新地址发布。<br>当然，GitHub上这个项目也是不会删的，这个小站且当做遗址参观吧。<br>文章懒得迁移了，以前的文章仍然在这里，新的网站从零开始。</p>
<h2 id="已阅"><a href="#已阅" class="headerlink" title="已阅"></a><a href="http://mednight4.com/">已阅</a></h2>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>列表、元组、字典、集合、字符串相互转换</title>
    <url>/2020/09/14/lie-biao-yuan-zu-zi-dian-ji-he-zi-fu-chuan-xiang-hu-zhuan-huan/</url>
    <content><![CDATA[<h1 id="列表、元组、字典、集合、字符串相互转换"><a href="#列表、元组、字典、集合、字符串相互转换" class="headerlink" title="列表、元组、字典、集合、字符串相互转换"></a>列表、元组、字典、集合、字符串相互转换</h1><blockquote>
<p>转自知乎<a href="https://zhuanlan.zhihu.com/p/82703713">https://zhuanlan.zhihu.com/p/82703713</a></p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E3%80%81%E5%AD%97%E5%85%B8%E3%80%81%E9%9B%86%E5%90%88%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/%E8%A1%A8.jpg"></p>
<h2 id="1-列表与元组的互换"><a href="#1-列表与元组的互换" class="headerlink" title="1. 列表与元组的互换"></a>1. 列表与元组的互换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将列表转化为元组</span></span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">t = <span class="built_in">tuple</span>(li)</span><br><span class="line">print(t, <span class="built_in">type</span>(t))</span><br><span class="line"><span class="comment"># 打印结果:(1, 2, 3) &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将元组转换成列表</span></span><br><span class="line">tu = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">li = <span class="built_in">list</span>(tu)</span><br><span class="line">print(li, <span class="built_in">type</span>(li))</span><br><span class="line"><span class="comment"># 打印结果:[1, 2, 3] &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-列表与字符串的互换"><a href="#2-列表与字符串的互换" class="headerlink" title="2. 列表与字符串的互换"></a>2. 列表与字符串的互换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表转换成字符串</span></span><br><span class="line">li = [<span class="string">&#x27;人&#x27;</span>, <span class="string">&#x27;生&#x27;</span>, <span class="string">&#x27;苦&#x27;</span>, <span class="string">&#x27;短&#x27;</span>]</span><br><span class="line">str1 = <span class="string">&#x27;&#x27;</span>.join(li)</span><br><span class="line">print(str1, <span class="built_in">type</span>(str1))</span><br><span class="line"><span class="comment"># 输出结果：人生苦短 &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串转换成列表</span></span><br><span class="line">str2 = <span class="string">&#x27;hello python&#x27;</span></span><br><span class="line">li1 = str2.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">print(li1, <span class="built_in">type</span>(li1))</span><br><span class="line"><span class="comment"># 输出结果：[&#x27;hello&#x27;, &#x27;python&#x27;] &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-列表与字典转换"><a href="#3-列表与字典转换" class="headerlink" title="3. 列表与字典转换"></a>3. 列表与字典转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表转字典方式一</span></span><br><span class="line">list1 = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>]</span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">    <span class="built_in">dict</span>[list1[i]] = list2[i]</span><br><span class="line">print(<span class="built_in">dict</span>, <span class="built_in">type</span>(<span class="built_in">dict</span>))</span><br><span class="line"><span class="comment"># 输出结果：&#123;&#x27;name&#x27;: &#x27;张三&#x27;, &#x27;age&#x27;: 18, &#x27;sex&#x27;: &#x27;男&#x27;&#125; &lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表转字典方式二：使用内置函数zip</span></span><br><span class="line">list1 = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>]</span><br><span class="line">d = <span class="built_in">dict</span>(<span class="built_in">zip</span>(list1, list2))</span><br><span class="line">print(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字典转换成列表</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;</span><br><span class="line">keys = <span class="built_in">list</span>(<span class="built_in">dict</span>.keys())</span><br><span class="line">values = <span class="built_in">list</span>(<span class="built_in">dict</span>.values())</span><br><span class="line">print(keys, <span class="built_in">type</span>(keys))</span><br><span class="line">print(values, <span class="built_in">type</span>(values))</span><br></pre></td></tr></table></figure>

<h2 id="4-嵌套列表转字典"><a href="#4-嵌套列表转字典" class="headerlink" title="4.嵌套列表转字典"></a>4.嵌套列表转字典</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list3 = [[<span class="string">&#x27;key1&#x27;</span>,<span class="string">&#x27;value1&#x27;</span>],[<span class="string">&#x27;key2&#x27;</span>,<span class="string">&#x27;value2&#x27;</span>],[<span class="string">&#x27;key3&#x27;</span>,<span class="string">&#x27;value3&#x27;</span>]]</span><br><span class="line">print(<span class="built_in">dict</span>(list3))</span><br></pre></td></tr></table></figure>

<h2 id="5-列表与集合转换"><a href="#5-列表与集合转换" class="headerlink" title="5. 列表与集合转换"></a>5. 列表与集合转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表转集合</span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">s1 = <span class="built_in">set</span>(list1)</span><br><span class="line">print(s1, <span class="built_in">type</span>(s1))</span><br><span class="line"><span class="comment"># 输出结果：&#123;1, 2, 3, 4&#125; &lt;class &#x27;set&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合转列表</span></span><br><span class="line">list2 = <span class="built_in">list</span>(s1.intersection(s1))</span><br><span class="line">print(list2, <span class="built_in">type</span>(list2))</span><br><span class="line"><span class="comment"># 输出结果：[1, 2, 3, 4] &lt;class &#x27;list&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-元组和字符串转换"><a href="#6-元组和字符串转换" class="headerlink" title="6. 元组和字符串转换"></a>6. 元组和字符串转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 元组转换成字符串和列表方法一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串转换成元组，需要将字符串转换成列表，在利用列表转成元组</span></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line">a = <span class="string">&#x27;人生苦短&#x27;</span></span><br><span class="line"><span class="built_in">list</span>.append(a)</span><br><span class="line">print(<span class="built_in">list</span>)</span><br><span class="line">b = <span class="built_in">tuple</span>(<span class="built_in">list</span>)</span><br><span class="line">print(b, <span class="built_in">type</span>(b))</span><br><span class="line"><span class="comment"># 输出结果：(&#x27;人生苦短&#x27;,) &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-元组和字典转换"><a href="#7-元组和字典转换" class="headerlink" title="7.元组和字典转换"></a>7.元组和字典转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典转元组</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">tup = <span class="built_in">tuple</span>(<span class="built_in">dict</span>)</span><br><span class="line">print(tup)  <span class="comment"># 只转换了key</span></span><br><span class="line"></span><br><span class="line">tup2 = <span class="built_in">tuple</span>(<span class="built_in">dict</span>.values())</span><br><span class="line">print(tup2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组不能转成字典</span></span><br></pre></td></tr></table></figure>

<h2 id="8-字典和字符串转换"><a href="#8-字典和字符串转换" class="headerlink" title="8.字典和字符串转换"></a>8.字典和字符串转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典转换为字符串</span></span><br><span class="line">dic1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">str1 = <span class="built_in">str</span>(dic1)</span><br><span class="line"><span class="comment"># 输出结果：&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125; &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串转字典</span></span><br><span class="line">dic2 = <span class="built_in">eval</span>(<span class="string">&quot;&#123;&#x27;name&#x27;:&#x27;xiaoming&#x27;, &#x27;age&#x27;:18&#125;&quot;</span>)</span><br><span class="line">print(dic2, <span class="built_in">type</span>(dic2))</span><br></pre></td></tr></table></figure>

<h2 id="9-字符串和集合转换"><a href="#9-字符串和集合转换" class="headerlink" title="9.字符串和集合转换"></a>9.字符串和集合转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串转集合</span></span><br><span class="line">str1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">s1 = <span class="built_in">set</span>(str1)</span><br><span class="line">print(s1, <span class="built_in">type</span>(s1))</span><br><span class="line"><span class="comment"># 输出结果：&#123;&#x27;e&#x27;, &#x27;o&#x27;, &#x27;h&#x27;, &#x27;l&#x27;&#125; &lt;class &#x27;set&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="10-字典key和value值转换"><a href="#10-字典key和value值转换" class="headerlink" title="10.字典key和value值转换"></a>10.字典key和value值转换</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dic1 = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line">dic2 = &#123;value: key <span class="keyword">for</span> key, value <span class="keyword">in</span> dic1.items()&#125;</span><br><span class="line">print(dic2)	</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>多表代换加解密基本实现</title>
    <url>/2020/11/28/duo-biao-dai-huan-jia-jie-mi-ji-ben-shi-xian/</url>
    <content><![CDATA[<h1 id="多表代换加解密基本实现"><a href="#多表代换加解密基本实现" class="headerlink" title="多表代换加解密基本实现"></a>多表代换加解密基本实现</h1><blockquote>
<p>  hill逆矩阵.ppt <a href="https://github.com/mednight4/Cryptography-course-ppt/blob/main/hill%E9%80%86%E7%9F%A9%E9%98%B5.ppt?raw=true">下载</a></p>
<p>  第1章 密码学概述.ppt <a href="https://github.com/mednight4/Cryptography-course-ppt/blob/main/%E7%AC%AC2%E7%AB%A0%E6%95%B0%E8%AE%BA%E7%AE%80%E4%BB%8B.ppt?raw=true">下载</a></p>
</blockquote>
<blockquote>
<p>  <a href="https://www.jianshu.com/p/25f0139637b7">markdown中公式编辑教程 - 简书 (jianshu.com)</a></p>
</blockquote>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>多表代换密码首先将明文M分为由n个字母构成的分组M<sub>1</sub>,M<sub>2</sub>,M<sub>3</sub>,<sub>…</sub>,M<sub>j</sub> ,对每个分组M<sub>i</sub>的加密为：<br>$$<br>C_i \equiv\ AM_i + B\pmod n     , i = 1,2,3,\ldots,j<br>$$<br>其中(A,B)是密钥,A是n*n的可逆矩阵，满足<br>$$<br>gcd(\begin{vmatrix}A\end{vmatrix},N)=1    (\begin{vmatrix}A\end{vmatrix}是行列式)<br>$$<br>其中：<br>$$<br>\begin{array}{}<br>B=(B_1,B_2,B_3,\ldots,B_n)^T \<br>C=(C_1,C_2,C_3,\ldots,C_n)^T \<br>M=(M_1,M_2,M_3,\ldots,M_n)^T \<br>\end{array}<br>$$<br>对密文分组C<sub>i</sub>的解密为：<br>$$<br>M_i \equiv\ A^{-1} (C_i-B) \pmod n     , i = 1,2,3,\ldots,j<br>$$</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>需要对矩阵进行转置，求行列式，求逆矩阵，求伴随矩阵，取模等，用到了<code>numpy</code>库的函数。安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure>

<p>矩阵必是二维的，所以使用的<code>np.matrix</code>对象存储数据，我在前面提到了<a href="https://mednight4.github.io/2020/11/16/python-numpy-chang-yong-fang-fa/">array对象的各种用法</a>，matrix和array对象大同小异，在个别方法的调用上有所不同。</p>
<p>下面简单介绍一下代码用到的函数，主要是matrix提供了矩阵乘运算，与array的按位乘有所不同。</p>
<ul>
<li>  <code>np.linalg.det(matrix)</code> 求伴随矩阵</li>
<li>  <code>np.transpose(matrix)</code> 求转置矩阵，相当于<code>matrix.T</code></li>
<li>  <code>matrix.I</code> 求逆矩阵</li>
</ul>
<p>方法变换返回的矩阵元素都是浮点数</p>
<ul>
<li>  <code>np.round(array)</code>求四舍五入，此外： <code>np.floor()</code> 、<code>np.ceil()</code>、<code>np.trunc()</code> ：向上，向下，截断</li>
</ul>
<p>方法对矩阵元素取整</p>
<h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><p>解密算法中，需要在mod26的情况下于对矩阵求逆，我们根据公式：</p>
<p>$$<br>\begin{bmatrix}M_n\end{bmatrix}^{-1}<br>\equiv\<br>\cfrac 1 {\begin{vmatrix}Mn\end{vmatrix}}<br>{\begin{vmatrix}M_n\end{vmatrix}}^*<br>\pmod n<br>$$<br>单纯的调用<code>matix.I</code>是不行的，数学方法里求逆矩阵，中间的1/m<sub>n</sub>是直接对行列式求倒，算法里这一步应该是求取行列式的逆元，也就是说<br>$$<br>\cfrac 1 {\begin{vmatrix}M_n\end{vmatrix}}\pmod n<br>$$<br>在数学和密码学里的意义是不同的，numpy没有直接求伴随矩阵的函数，所以我们需要反过来利用<code>matrix.I</code>和<code>np.linalg.det(matrix)</code>按位乘求出伴随矩阵，再对其乘法逆元后，这才是密码学要的 1/m<sub>n</sub> (mod26)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv</span>(<span class="params">a:np.matrix</span>)-&gt;np.matrix:</span></span><br><span class="line">    a_inv = a.I</span><br><span class="line">    a_det = np.linalg.det(a)</span><br><span class="line">    a_adju = np.<span class="built_in">round</span>((a_det * a_inv)).astype(np.int16)  <span class="comment"># 求伴随矩阵</span></span><br><span class="line">    a_det_inv = ex_gcd(<span class="built_in">int</span>(<span class="built_in">round</span>(np.linalg.det(a))), mod)  <span class="comment"># 求行列式的mod26逆元</span></span><br><span class="line">    get_inv = np.<span class="built_in">round</span>((a_det_inv * a_adju)).astype(np.int16) % mod  <span class="comment"># 相乘取模</span></span><br><span class="line">    <span class="keyword">return</span> get_inv</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">mod=<span class="number">26</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ex_gcd</span>(<span class="params">a, mod</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;扩展欧几里德算法，内置&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> math.gcd(a, mod) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    u1, u2, u3 = <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    v1, v2, v3 = <span class="number">0</span>, <span class="number">1</span>, mod</span><br><span class="line">    <span class="keyword">while</span> v3 != <span class="number">0</span>:</span><br><span class="line">        q = u3 // v3</span><br><span class="line">        v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3</span><br><span class="line">    <span class="keyword">return</span> u1 % mod</span><br><span class="line">choose = <span class="built_in">input</span>(<span class="string">&quot;加密E/解密D\n &gt; &quot;</span>)</span><br><span class="line"><span class="comment"># eval(&quot;5*5&quot;) &gt; 25 运算一个字符串表达式</span></span><br><span class="line">a = np.mat(<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入矩阵A：（例二重矩阵格式为：[[a,b] , [c,d]]）:\n &gt; &quot;</span>)),dtype=<span class="built_in">int</span>)</span><br><span class="line">b = np.mat(<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;输入矩阵B：（例二重矩阵格式为：[[e,f]]）:\n &gt; &quot;</span>)),dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">if</span> math.gcd(<span class="built_in">int</span>(np.linalg.det(a)),mod)!=<span class="number">1</span>:</span><br><span class="line">    <span class="comment"># a的行列式值需要与mod值互素，这一点在课本的定义里有提到，但是课本后的题目里并未体现</span></span><br><span class="line">    print(<span class="string">&quot;a行列式的值&quot;</span>,<span class="built_in">int</span>(np.linalg.det(a)),mod,<span class="string">&quot;不互素,gcd=&quot;</span>,math.gcd(<span class="built_in">int</span>(np.linalg.det(a)),mod))</span><br><span class="line">    exit(<span class="string">&quot;a输入的行列式值不与26互素&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> np.linalg.det(a)==<span class="number">0</span>:</span><br><span class="line">    exit(<span class="string">&quot;a没有逆矩阵&quot;</span>)</span><br><span class="line">b = np.transpose(b)</span><br><span class="line">get_m = <span class="built_in">input</span>(<span class="string">&quot;输入加密或解密字符,小写字母：&quot;</span>).strip().lower()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> get_m.islower():</span><br><span class="line">    print(get_m)</span><br><span class="line">    exit(<span class="string">&quot;你的明文不是小数字母，不能还原&quot;</span>)</span><br><span class="line">m_ord=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> get_m:</span><br><span class="line">    m_ord.append(<span class="built_in">ord</span>(i)-<span class="number">97</span>)</span><br><span class="line">m_list=np.array(m_ord)</span><br><span class="line">m_list.resize((<span class="built_in">len</span>(get_m)//a.shape[<span class="number">0</span>],a.shape[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>():</span></span><br><span class="line">    c_list=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m_list)):</span><br><span class="line">        m=m_list[i]</span><br><span class="line">        c=((np.dot(a,m))+b)%<span class="number">26</span></span><br><span class="line">        c_list.append(c)</span><br><span class="line">    text=[]</span><br><span class="line">    <span class="comment">#print(c_list)</span></span><br><span class="line">    c_list=np.array(c_list)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> c_list.flatten():</span><br><span class="line">        text.append(<span class="built_in">chr</span>(i+<span class="number">97</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(text)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv</span>(<span class="params">a:np.matrix</span>)-&gt;np.matrix:</span></span><br><span class="line">    a_inv = a.I</span><br><span class="line">    a_det = np.linalg.det(a)</span><br><span class="line">    a_adju = np.<span class="built_in">round</span>((a_det * a_inv)).astype(np.int16) <span class="comment"># 求伴随矩阵</span></span><br><span class="line">    a_det_inv = ex_gcd(<span class="built_in">int</span>(<span class="built_in">round</span>(np.linalg.det(a))), mod) <span class="comment"># 求行列式的mod26逆元</span></span><br><span class="line">    get_inv = np.<span class="built_in">round</span>((a_det_inv * a_adju)).astype(np.int16)%mod <span class="comment"># 相乘取模</span></span><br><span class="line">    <span class="keyword">return</span> get_inv</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>():</span></span><br><span class="line">    c_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m_list)):</span><br><span class="line">        m = m_list[i]</span><br><span class="line">        c = (np.dot(inv(a), (m-b))) % <span class="number">26</span></span><br><span class="line">        c_list.append(c)</span><br><span class="line">    text = []</span><br><span class="line">    <span class="comment">#print(c_list)</span></span><br><span class="line">    c_list = np.array(c_list)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> c_list.flatten():</span><br><span class="line">        text.append(<span class="built_in">chr</span>(i+<span class="number">97</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(text)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> choose == <span class="string">&quot;E&quot;</span> <span class="keyword">or</span> choose == <span class="string">&quot;e&quot;</span>:</span><br><span class="line">        print(encode())</span><br><span class="line">    <span class="keyword">elif</span> choose == <span class="string">&quot;D&quot;</span> <span class="keyword">or</span> choose == <span class="string">&quot;d&quot;</span>:</span><br><span class="line">        print(decode())</span><br><span class="line"><span class="comment"># e</span></span><br><span class="line"><span class="comment"># [[11,13,17],[5,7,2],[3,8,3]]</span></span><br><span class="line"><span class="comment"># [[1,1,1]]</span></span><br><span class="line"><span class="comment"># mednightf</span></span><br><span class="line"><span class="comment"># cremeauxf</span></span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次作业还有很多需要完善的地方，为了方便，只能对小写字母进行加密，而且当输入的m不是a阶数的倍数时应该会有异常。其实原来我只是想找一份代码水一水就提交的，参考了这个博主的代码： <a href="https://www.zuicy.party/2019/python%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/">python实现多表代换加密与解密 - 朱鱼鱼的小本本朱鱼鱼的小本本 (zuicy.party)</a>，然后发现些许逻辑错误和待完善地方，看得出来作者本来想对明文进行分组的，从这里：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"><span class="comment"># For commercial use, please contact the author for authorization. For non-commercial use, please indicate the source.</span></span><br><span class="line"><span class="comment"># 协议(License)：署名-非商业性使用-相同方式共享 4.0 国际 (CC BY-NC-SA 4.0)</span></span><br><span class="line"><span class="comment"># 作者(Author)：zuicy</span></span><br><span class="line"><span class="comment"># 链接(URL)：https://www.zuicy.party/2019/python%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%A8%E4%BB%A3%E6%8D%A2%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/</span></span><br><span class="line"><span class="comment"># 来源(Source)：朱鱼鱼的小本本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原文与矩阵转换</span></span><br><span class="line">e = <span class="built_in">input</span>(<span class="string">&quot;输入原文：&quot;</span>)</span><br><span class="line">elist = <span class="built_in">list</span>(e)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(elist)):</span><br><span class="line">    elist[i] = <span class="built_in">ord</span>(elist[i]) - <span class="number">97</span></span><br><span class="line">x = np.zeros((<span class="number">3</span>, <span class="built_in">int</span>(<span class="built_in">len</span>(elist) / <span class="number">3</span>)), dtype=<span class="built_in">int</span>)</span><br><span class="line">m = np.mat(x)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">h = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(<span class="built_in">len</span>(elist) / <span class="number">3</span>)):</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        m[j, <span class="built_in">int</span>(h / <span class="number">3</span>)] = elist[h]</span><br><span class="line">        h = h + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>博主对e进行了分组，但是后面直接一个<code>c = np.dot(a,m) + b</code>完事了，导致程序一次运行只能加密一个单元的m（m=3或者m=9），而对矩阵的手动循环赋值也显得很难受。但是博主的欧几里得法求逆元和求逆矩阵的函数还是很有参考价值。自己写这个作业时，就直接贴进代码里了。</p>
<p>多表代换对参数a的判断很严格，需要a的行列式和26互素，课本出的例题似乎并未满足这个条件。</p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔</title>
    <url>/2020/06/27/ri-ji/</url>
    <content><![CDATA[<h1 id="日记"><a href="#日记" class="headerlink" title="日记"></a>日记</h1><p>果然还是要对文件本身进行加密才行。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>寒假小节</title>
    <url>/2021/01/17/han-jia-xiao-jie/</url>
    <content><![CDATA[<h1 id="寒假小节"><a href="#寒假小节" class="headerlink" title="寒假小节"></a>寒假小节</h1><p>期末考试周结束，正式进入寒假。平时都是带着待办事项过日子的，每天都欠着几个任务没做完，现在学校方面突然没事了，竟有点无所适从。差不多到考研准备的时间了，老实说，计算机考研这块我还没有很详细的了解，仅停留会考些什么科目的水平。下学期学完近代史，加上一门大概率不开课的计组，和考研相关的科目就上完了（虽然对于真要考研的学生党来说，好像并不需要纠结于学校教没教过相关课程…）。</p>
<p>突然有点感慨，好像大学到现在一个体面的东西都没学成。就业这把剑悬在头顶，果然还得读个研认真学点东西，不然毕业就真面向OpenCV（open source+ctrl c+ctrl v）编程了。排除学校方面的原因，主要还是因为我懒，学校作业写完就整活去了，没有在课余时间沉积一个方向。</p>
<p>讽刺的是，我院信安专业大几百号人，可能真正学信安的人一双手能数得过来，这还都是计算机协会社团的成员，只能说社团引导得不错吧。学院把一个玩意儿硬是要划成软工+信安，有时真是让人无可奈何，也难为了保研的卷卷人。话说回来，身边保到研的大佬都是八仙过海，各显神通了，脸皮薄的就硬刚，脸皮厚的吃资源，乐子人吃瓜打游戏。大环境下大家其乐融融。</p>
<p>不想谈这些烦心事，说说专业课。加上下个学期的汇编、C#、近代史和Python机器学习，专业课程已经开得差不多了。细数一下学校至今开的课，排除一撮没啥干货、意义不明的课程（上层建筑要求开设），实用的大概有这些东西：</p>
<hr>
<p><strong>考研课</strong></p>
<p>四大名著：思修+毛概+马克思（<del>+近代史</del> 马上也来了）</p>
<p>挂科利器：高数上下+线代+概率论+离散(复试？)</p>
<p>四大件：操作系统+数据结构+计算机网络（<del>+计算机组成</del> 不知道开不开）</p>
<p><strong>其它理论课</strong></p>
<p>大学物理？+51单片机？+数字逻辑？（老师有认真交，虽然对于信安而言意义不明）</p>
<p>数据库概论</p>
<p><strong>实践课</strong></p>
<p>C/C++基础</p>
<p>HTML+CSS+JavaScript基础</p>
<p>Java基础</p>
<p>Java Web（JSP）</p>
<p>Python爬虫、数据分析和可视化（request+bs4+numpy+pandas+matplotlib）</p>
<p>Linux基础+服务</p>
<p>（马上来的是 汇编、C#和 Python机器学习 ）</p>
<p><strong>实习补充</strong></p>
<p>C++ GUI（MFC）</p>
<p>Python基础+Pygame</p>
<p>Java GUI+网络编程</p>
<p>CISCO/HUAWEI网络模拟</p>
<hr>
<p>以我这破大学本科阶段教的这点东西，找工作是不可能找得到工作的，老师能将基础部分讲清楚就很难能可贵了。而且受制于软院整体的眼界与接触面，我很担心应届生大四暑假实习单位的水平。我预想的情景是这样的：应届生大三下开始学习Java web框架，整了个大家喜闻乐见的淘宝商城系统青春版，屁颠屁颠跑去实习。结果到了单位，每天端茶送水，套个模版，敲两个for循环，传几个参数，最后公司把你开了，emm…</p>
<p>讲道理，大学的学习，首要还是多买点书啃，把基础打牢，基础体系好了转啥都快。学校课程一些奇奇怪怪的作业要求，刷点速通网课水一水，表示下对任课老师的尊敬就完事了。否则，除了能吃到保研红利，根本找不到把时间耗在那些憨批作业上的理由。把排版、cv百度百科、车轱辘话填来填去的时间拿去看书不好吗？刷博客看技术人吹逼不行吗？玩游戏不香吗？</p>
<p>这个学期做了什么？有认真学了一下Linux和密码学，熟悉了一下Python3，看完了《Linux命令行大全》《Linux就该这么学》两本Linux基础书，再看完了《Python编程从入门到实践》《笨办法学Python》这两本Python基础书，还看了一部分提升性质的《Python Cookbook》，然后是用Python写了密码学的一些加密算法，以学校的尿性，密码学大概也是点到为止，以后都不再碰了，然后忘光光，当代学生的矛盾就是学习知识点太杂与记忆力不能填补要求的矛盾 和 学校所教授的知识供给与社会实践需求不能互补的矛盾。所幸的是算法用Python写的，补充了一下Python代码实践。最后就是Python的应用课程，速通了一下Numpy、Matplotlib、Pandas、Pyechats这几个库，面向Github开发了一个大作业，那个项目作者应该也是Python学习者，冗余代码挺多的，自己改改加加了蛮多东西，达到学校提交的要求。遗憾的事情：没有看完《Python Cookbook》，寒假应该能啃完，不过买过来的Python系列最后一本《流畅的Python》大概率是要吃灰了；然后是Linux系列，《鸟哥的Linux私房菜 基础篇》吃灰，内容太多，细且广，和命令行那本多有重复的点，以后当做字典书用。</p>
<p>娱乐方面，阿宅的大胜利。这个学期没怎么入游戏了，可能是口味养刁了，没看到几个令人眼前一亮的新游。和室友玩了太多OW，着实耗费时间；单机游戏没通几个，玩的全是rouge类小游戏，去年入的地铁离去、无主3、天外世界全部吃灰，所以今年没入博德3和2077，以后入大作也要考虑一下，能省下好多钱。血源登陆pc和奇迹2的扑街让我暂时断了PS5的念头，同时室友为了省卡带钱，整了cemu模拟器的环境，直接把荒野之息完美移植pc了，存到硬盘里，走到哪玩到哪，自然是给我也整一个，真不错。番剧方面。今年下半年的番，感觉质量下滑了，没正经追几部，就补了些老番，好在最近的新番有很多不错的续作。这个学期可能是阿宅最后的狂欢了，泪水不争气地从嘴角流了下来。</p>
<p>接下来的时期，考研的优先度无疑提升了。寒假。其实寒假差不多就可以开始着手高数和英语，还有计算机四大件。考研人大概从3月开学开始复习，和课程一起。下个学期有用的课程是C#、Python机器学习、汇编和近代史，当然还有一些意义不明、浪费时间的迷之课程，它们不配拥有姓名，这里就不提了。另外，我自己也有一些提升的书没看完，《Java编程思想》《算法》《剑指offer》《effective啥啥啥》之类的，如果是应届实习，那肯定还是要看的，但是考研的话，要优先复习专业课和预习下个学期的课程了，这些书大概率也要吃灰。</p>
<p>其实还有蛮多感兴趣的领域没有接触，可能哪天脑门一热就开始学起来了。</p>
<hr>
<p><strong>感兴趣的东西</strong></p>
<p>熟悉C与C++指针</p>
<p>Java网络编程与多线程</p>
<p>Java理解虚拟机</p>
<p>Java SSM</p>
<p>Java安卓开发</p>
<p>HTML+CSS+JavaScript结合java web写点项目</p>
<p>微信小程序开发</p>
<p>Python web（Django、Flask）</p>
<p>Linux桌面开发环境（Manjaro）</p>
<p>租个Linux服务器玩</p>
<p>C++GUI（Qt）</p>
<p>C++游戏开发（Unreal4）</p>
<p>C#游戏开发（Unity）</p>
<p>算法（Java实现可多学几个java库，C++实现可熟悉性质）</p>
<p>CTF与Kali（学不会）</p>
<p>HackerOne（动不了）</p>
<hr>
<p>可以预见的是，抛开考研这些事情，以后想从事相关的领域应该还是走java开发方面，毕竟需求大，哪怕没有学到精通也不至于找不到工作。其实我对Python还是蛮有好感的，只是感觉近年来Python大数据和深度学习这块比较泡沫，学懂很难，没学懂就只能面向Github开发了，算法又不会，只能调调库，调调参这样子。C++学不来，又难又杂，每天写BUG。游戏开发是不可能入这坑的，国内的游戏环境就是一坨翔，对玩家是，对开发者也是。大公司造翔工厂，媒体是搅屎棍，政策也不友好，突出一个没救了。安全这块有心无力，本是安全人，未入安全门，信息安全专业就读几年的学生，至今连安全的门在哪都不知道，我可真是个傻逼。</p>
<p>差不多扯到这里。纵观全文，应该有很多说错的了地方，但目前我的个人认知仅仅停留在这个层面，希望未来的我回来打脸吧。</p>
<p>该收拾收拾东西回家过年了。</p>
<br/>

<p><strong>2021.01.17 周日 即将离校</strong></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>椭圆曲线密码题计算器</title>
    <url>/2020/11/24/tuo-yuan-qu-xian-mi-ma-ti-ji-suan-qi/</url>
    <content><![CDATA[<h1 id="椭圆曲线密码题计算器"><a href="#椭圆曲线密码题计算器" class="headerlink" title="椭圆曲线密码题计算器"></a>椭圆曲线密码题计算器</h1><blockquote>
<p>  第4章 公钥密码体制.ppt <a href="https://github.com/mednight4/Cryptography-course-ppt/blob/main/%E7%AC%AC4%E7%AB%A0%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6.ppt?raw=true">下载</a></p>
</blockquote>
<h2 id="求逆元"><a href="#求逆元" class="headerlink" title="求逆元"></a>求逆元</h2><p>扩展欧几里得算法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;辗转相除判断互素&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> m != <span class="number">0</span>:</span><br><span class="line">        m, n = n % m, m</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ex_gcd</span>(<span class="params">a, mod</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;扩展欧几里德算法，算术法&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> gcd(a, mod) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    u1, u2, u3 = <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    v1, v2, v3 = <span class="number">0</span>, <span class="number">1</span>, mod</span><br><span class="line">    <span class="keyword">while</span> v3 != <span class="number">0</span>:</span><br><span class="line">        q = u3 // v3</span><br><span class="line">        v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3</span><br><span class="line">        <span class="keyword">return</span> u1 % mod</span><br></pre></td></tr></table></figure>

<h2 id="椭圆曲线求值"><a href="#椭圆曲线求值" class="headerlink" title="椭圆曲线求值"></a>椭圆曲线求值</h2><p>求p,2p,3p…到O的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_niyuan</span>(<span class="params"><span class="built_in">sum</span>:<span class="built_in">int</span>, mod:<span class="built_in">int</span>=<span class="number">11</span></span>)-&gt;int:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    暴力法求逆元</span></span><br><span class="line"><span class="string">    sum:值</span></span><br><span class="line"><span class="string">    mod：模</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">sum</span>*result % mod != <span class="number">1</span>:</span><br><span class="line">        result += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_circle</span>(<span class="params">x1:<span class="built_in">int</span>=<span class="number">2</span>, y1:<span class="built_in">int</span>=<span class="number">7</span>, circle:<span class="built_in">int</span>=<span class="number">12</span>, a:<span class="built_in">int</span>=<span class="number">1</span>, mod:<span class="built_in">int</span>=<span class="number">11</span></span>)-&gt;<span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    x1,x2：本原根，</span></span><br><span class="line"><span class="string">    circle：O的离散对数，未知可以将circle值调大，程序算到O时卡死,此时|E|等于最后算出的P+1</span></span><br><span class="line"><span class="string">    y2=x3+ax+b mod n   </span></span><br><span class="line"><span class="string">    a就是这里的a，mod是这里的n  </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    x2, y2 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    x3, y3 = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    print(<span class="string">&quot;本原根(&quot;</span>+<span class="built_in">str</span>(x1)+<span class="string">&quot;,&quot;</span>+<span class="built_in">str</span>(y1)+<span class="string">&quot;),O的离散对数&quot;</span>+<span class="built_in">str</span>(circle)+<span class="string">&quot;,方程式a的值&quot;</span>+<span class="built_in">str</span>(a)+<span class="string">&quot;,模&quot;</span>+<span class="built_in">str</span>(mod))</span><br><span class="line">    <span class="keyword">while</span> i &lt; circle:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">            lamda = ((<span class="number">3</span>*(x1**<span class="number">2</span>)+a)*get_niyuan(<span class="number">2</span>*y1, mod)) % mod</span><br><span class="line">            x2 = x1</span><br><span class="line">            y2 = y1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lamda = (y2-y1)*get_niyuan(x2-x1, mod) % mod</span><br><span class="line">        x3 = (lamda**<span class="number">2</span>-x1-x2)%mod</span><br><span class="line">        y3 = (lamda*(x1-x3)-y1)%mod</span><br><span class="line">        print(<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&quot;p\tlamda=&quot;</span>+<span class="built_in">str</span>(lamda)+<span class="string">&quot; \t(&quot;</span>,x3,<span class="string">&quot;,&quot;</span>,y3,<span class="string">&quot;)&quot;</span>)</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        x2 = x3</span><br><span class="line">        y2 = y3</span><br><span class="line">get_circle(<span class="number">2</span>,<span class="number">7</span>,<span class="number">12</span>)</span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">get_circle(<span class="number">8</span>, <span class="number">3</span>, <span class="number">12</span>)</span><br><span class="line">print(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">get_circle(<span class="number">10</span>,<span class="number">9</span>,<span class="number">12</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取知乎top50,数据清洗与pd2csv格式</title>
    <url>/2020/12/14/pa-qu-zhi-hu-top50-shu-ju-qing-xi-yu-pd2csv-ge-shi/</url>
    <content><![CDATA[<h1 id="爬取知乎top50"><a href="#爬取知乎top50" class="headerlink" title="爬取知乎top50"></a>爬取知乎top50</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>关于数据清洗的方法</p>
<blockquote>
<p>  <a href="https://www.pypandas.cn/docs/getting_started/">快速入门 | Pandas 中文 (pypandas.cn)</a></p>
</blockquote>
<p><strong>pd.nan为pd的缺失值对象。</strong></p>
<ul>
<li><p>  增加一行包含缺失值的列 <code>df[&#39;employee&#39;]=np.nan</code></p>
</li>
<li><p>检查非缺失值数据 <code>pd.notnull()</code></p>
<p>  检查缺失值数据 <code>pd.isnull()</code></p>
<p>  检查缺失值是否含有 <code>pd.values.any()</code></p>
<p>  检查缺失值数量  <code>pd.isnull().sum()</code></p>
<p>  检查所有缺失值的数量 <code>pd.isnull().sum().sum()</code></p>
</li>
<li><p>舍弃缺失值 <code>pd.dorpna()</code></p>
<p>  舍弃所有字段都缺失的行 <code>pd.dropna(how=&#39;all&#39;)</code></p>
<p>  舍弃所有字段都缺失的列 <code>pd.dropna(how=&#39;all&#39;，axis=1)</code></p>
<p>  舍弃超过两行缺失值的行 <code>pd.dropna(thresh=2)</code></p>
</li>
<li><p>零填充缺失值 <code>pd.fillna(0)</code></p>
<p>  平均值填充缺失值 <code>pd.fillna(df[&#39;col&#39;].mean())</code></p>
<p>  使用内插法填充缺失值 <code>pd.interpolate()</code></p>
</li>
</ul>
<p>以上为常见的方法，可以在手册中搜索以上关键字，查找更多方法和详细参数。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果想运行这份代码，请将headers参数里的cookie值换成自己的知乎登陆cookie。</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_url</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取top50的link&quot;&quot;&quot;</span></span><br><span class="line">    top_list=[]</span><br><span class="line">    url_list=[]</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;在此替换 你的知乎登陆cookie&#x27;</span>，</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.67 Safari/537.36 Edg/87.0.664.55&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    home_url = <span class="string">&#x27;https://www.zhihu.com/hot&#x27;</span></span><br><span class="line">    res = requests.get(url=home_url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(res.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> section <span class="keyword">in</span> soup.find_all(<span class="string">&quot;section&quot;</span>):</span><br><span class="line">        top=<span class="built_in">int</span>(section.find(<span class="string">&quot;div&quot;</span>,attrs=&#123;<span class="string">&quot;class&quot;</span>:<span class="string">&quot;HotItem-rank&quot;</span>&#125;).string)</span><br><span class="line">        top_list.append(top)</span><br><span class="line">        url=section.find(<span class="string">&quot;a&quot;</span>,attrs=&#123;<span class="string">&quot;target&quot;</span>:<span class="string">&quot;_blank&quot;</span>,<span class="string">&quot;rel&quot;</span>:<span class="string">&quot;noopener noreferrer&quot;</span>,<span class="string">&quot;data-za-not-track-link&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;)[<span class="string">&quot;href&quot;</span>]</span><br><span class="line">        url_list.append(url)</span><br><span class="line">    <span class="keyword">return</span> top_list, url_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_section</span>(<span class="params">link_list</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取每一节的内容&quot;&quot;&quot;</span></span><br><span class="line">    data_list=[]</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;cookie&#x27;</span>: <span class="string">&#x27;在此替换 你的知乎登陆cookie&#x27;</span>，</span><br><span class="line">        <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.67 Safari/537.36 Edg/87.0.664.55&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> top,url <span class="keyword">in</span> <span class="built_in">zip</span>(link_list[<span class="number">0</span>],link_list[<span class="number">1</span>]):</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;top&#x27;</span>: top,</span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: url,</span><br><span class="line">            <span class="string">&#x27;question&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;recommend&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;star&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;watcher&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&#x27;date&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        print(url)</span><br><span class="line">        print(top)</span><br><span class="line">        res = requests.get(url=url, headers=headers)</span><br><span class="line">        soup = BeautifulSoup(res.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data[<span class="string">&#x27;question&#x27;</span>]=<span class="built_in">str</span>(soup.find(<span class="string">&#x27;h1&#x27;</span>).string)</span><br><span class="line">            print(data[<span class="string">&#x27;question&#x27;</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            data[<span class="string">&#x27;question&#x27;</span>]=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data[<span class="string">&#x27;recommend&#x27;</span>]=soup.find(<span class="string">&#x27;button&#x27;</span>,attrs=&#123;<span class="string">&#x27;type&#x27;</span>:<span class="string">&quot;button&quot;</span>,<span class="string">&quot;class&quot;</span>:<span class="string">&quot;Button GoodQuestionAction-commonBtn Button--plain Button--withIcon Button--withLabel&quot;</span>&#125;).contents[-<span class="number">1</span>]</span><br><span class="line">            print(data[<span class="string">&#x27;recommend&#x27;</span>])</span><br><span class="line">            data[<span class="string">&#x27;recommend&#x27;</span>]=<span class="built_in">int</span>(re.sub(<span class="string">r&#x27;好问题&#x27;</span>,<span class="string">&#x27;&#x27;</span>,data[<span class="string">&#x27;recommend&#x27;</span>]).strip())</span><br><span class="line">            print(data[<span class="string">&#x27;recommend&#x27;</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            data[<span class="string">&#x27;recommend&#x27;</span>]=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            NumberBoard=soup.find_all(<span class="string">&#x27;strong&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;NumberBoard-itemValue&#x27;</span>&#125;)</span><br><span class="line">            data[<span class="string">&#x27;star&#x27;</span>]=<span class="built_in">int</span>(<span class="built_in">str</span>(NumberBoard[<span class="number">0</span>].string).replace(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">            print(<span class="string">&#x27;关注者&#x27;</span>,data[<span class="string">&#x27;star&#x27;</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            data[<span class="string">&#x27;star&#x27;</span>]=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            NumberBoard = soup.find_all(<span class="string">&#x27;strong&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;NumberBoard-itemValue&#x27;</span>&#125;)</span><br><span class="line">            data[<span class="string">&#x27;watcher&#x27;</span>] = <span class="built_in">int</span>(<span class="built_in">str</span>(NumberBoard[<span class="number">1</span>].string).replace(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">            print(<span class="string">&#x27;浏览者&#x27;</span>,data[<span class="string">&#x27;watcher&#x27;</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            data[<span class="string">&#x27;watcher&#x27;</span>]=<span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res_time = requests.get(url=url+<span class="string">&#x27;/log&#x27;</span>, headers=headers)</span><br><span class="line">            soup_time=BeautifulSoup(res_time.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">            data[<span class="string">&#x27;date&#x27;</span>]=<span class="built_in">str</span>(soup_time.find(<span class="string">&#x27;time&#x27;</span>).string)</span><br><span class="line">            print(data[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            data[<span class="string">&#x27;date&#x27;</span>]=<span class="literal">None</span></span><br><span class="line">        data_list.append(data)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hot_list.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(data_list,indent=<span class="number">4</span>,ensure_ascii=<span class="literal">False</span>, separators=(<span class="string">&#x27;, &#x27;</span>, <span class="string">&#x27;: &#x27;</span>)))</span><br><span class="line">    data_tab=pd.DataFrame(data_list)</span><br><span class="line">    <span class="comment"># 这样写会将默认index写入csv</span></span><br><span class="line">    data_tab.to_csv(<span class="string">&#x27;hot_list.csv&#x27;</span>, encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)  <span class="comment"># utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tab_clean</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;hot_list.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        hot_list = json.loads(f.read())</span><br><span class="line">    data_tab = pd.DataFrame(hot_list)</span><br><span class="line">    data_tab[<span class="string">&#x27;date&#x27;</span>]=pd.to_datetime(data_tab[<span class="string">&#x27;date&#x27;</span>],<span class="built_in">format</span>=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    print(data_tab.dtypes)</span><br><span class="line">    print(data_tab.notnull())</span><br><span class="line">    <span class="comment"># 用算术中位数填充缺失值</span></span><br><span class="line">    data_tab[<span class="string">&#x27;recommend&#x27;</span>]=data_tab[<span class="string">&#x27;recommend&#x27;</span>].fillna(data_tab[<span class="string">&#x27;recommend&#x27;</span>].median())</span><br><span class="line">    data_tab[<span class="string">&#x27;star&#x27;</span>]=data_tab[<span class="string">&#x27;star&#x27;</span>].fillna(data_tab[<span class="string">&#x27;star&#x27;</span>].median())</span><br><span class="line">    data_tab[<span class="string">&#x27;watcher&#x27;</span>]=data_tab[<span class="string">&#x27;watcher&#x27;</span>].fillna(data_tab[<span class="string">&#x27;watcher&#x27;</span>].median())</span><br><span class="line">    <span class="comment"># 丢掉列date为空的组</span></span><br><span class="line">    data_tab=data_tab.dropna(subset=[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line">    <span class="comment"># 计算帖子第一次上热榜距今的时间差，结果为时间戳对象</span></span><br><span class="line">    data_tab[<span class="string">&#x27;update&#x27;</span>] = data_tab[<span class="string">&#x27;date&#x27;</span>] - pd.to_datetime(datetime.datetime.now(), <span class="built_in">format</span>=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    data_tab.to_csv(<span class="string">&#x27;hot_list2.csv&#x27;</span>, encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)  <span class="comment"># utf-8</span></span><br><span class="line">    print(data_tab.notnull())</span><br><span class="line">    data_tab=pd.read_csv(<span class="string">&#x27;hot_list2.csv&#x27;</span>)</span><br><span class="line">    print(data_tab)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># save_section(get_url())</span></span><br><span class="line">    tab_clean()</span><br></pre></td></tr></table></figure>

<p>存储的生数据(json)</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%88%AC%E5%8F%96%E7%9F%A5%E4%B9%8Etop50%2C%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8Epd2csv%E6%A0%BC%E5%BC%8F/%E7%88%AC%E5%8F%96%E6%95%B0%E6%8D%AE.png"></p>
<p>处理前的数据(csv)</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%88%AC%E5%8F%96%E7%9F%A5%E4%B9%8Etop50%2C%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8Epd2csv%E6%A0%BC%E5%BC%8F/%E5%A4%84%E7%90%86%E5%89%8D.png"></p>
<p>处理后的数据(csv)</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%88%AC%E5%8F%96%E7%9F%A5%E4%B9%8Etop50%2C%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8Epd2csv%E6%A0%BC%E5%BC%8F/%E5%A4%84%E7%90%86%E5%90%8E.png"></p>
<h2 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h2><p>仅使用pandas对数据进行简单的分析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">%matplotlib inline</span><br><span class="line">%pylab inline</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line">data_tab=pd.read_csv(<span class="string">&#x27;hot_list2.csv&#x27;</span>)</span><br><span class="line">data_tab=data_tab.drop(<span class="string">&#x27;Unnamed: 0&#x27;</span>,axis=<span class="number">1</span>)</span><br><span class="line">data_tab.describe()</span><br><span class="line"></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"></span><br><span class="line">![](https://pic2.zhimg.com/v2-837f86cb4b41d8be67428db73afa2bd5_r.jpg)</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line">data_tab.describe()</span><br><span class="line"><span class="comment"># 问题关注人数大于1000的问题</span></span><br><span class="line">star_over_100=data_tab[<span class="string">&#x27;star&#x27;</span>]&gt;<span class="number">1000</span></span><br><span class="line"><span class="comment"># 问题推荐人数大于100的问题</span></span><br><span class="line">recommend_over_100=data_tab[<span class="string">&#x27;recommend&#x27;</span>]&gt;<span class="number">100</span></span><br><span class="line"><span class="comment"># 问题上热榜时间在一天之内，表示新话题</span></span><br><span class="line">new_topic=data_tab[<span class="string">&#x27;update&#x27;</span>]&lt;=<span class="string">&#x27;-1day&#x27;</span></span><br><span class="line"><span class="comment"># 筛选出满足以上所有条件的结果</span></span><br><span class="line">filter_tab=data_tab[(data_tab[<span class="string">&#x27;star&#x27;</span>]&gt;<span class="number">1000</span>) &amp; (data_tab[<span class="string">&#x27;recommend&#x27;</span>]&gt;<span class="number">100</span>) &amp; (data_tab[<span class="string">&#x27;update&#x27;</span>]&lt;=<span class="string">&#x27;-1day&#x27;</span>)]</span><br><span class="line">filter_tab</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对以上三个对象单独分组</span></span><br><span class="line">grouped=filter_tab[[<span class="string">&#x27;star&#x27;</span>,<span class="string">&#x27;recommend&#x27;</span>,<span class="string">&#x27;update&#x27;</span>]]</span><br><span class="line"><span class="comment"># 以时间为标准进行索引分组</span></span><br><span class="line">grouped.groupby(<span class="string">&#x27;update&#x27;</span>).<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以收藏人数和推荐数为分组索引查看时间</span></span><br><span class="line">grouped.groupby([filter_tab[<span class="string">&#x27;star&#x27;</span>],filter_tab[<span class="string">&#x27;recommend&#x27;</span>]])[<span class="string">&#x27;update&#x27;</span>].<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"></span><br><span class="line">**对表格的每一项数据分别作图，同时画出平局值或算术中位数线**</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将发布时间作为x轴,top,recommend,star,watcher作为y轴</span></span><br><span class="line">time_x=data_tab[[<span class="string">&#x27;top&#x27;</span>,<span class="string">&#x27;recommend&#x27;</span>,<span class="string">&#x27;star&#x27;</span>,<span class="string">&#x27;watcher&#x27;</span>]].groupby(data_tab[<span class="string">&#x27;date&#x27;</span>]).<span class="built_in">sum</span>()</span><br><span class="line"><span class="comment"># 按照top值重排列</span></span><br><span class="line"><span class="comment"># time_x=time_x.sort_values(&#x27;top&#x27;,ascending=True)</span></span><br><span class="line">time_x</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将top作为x轴,recommend,star,watcher作为y轴</span></span><br><span class="line">top_x=data_tab[[<span class="string">&#x27;recommend&#x27;</span>,<span class="string">&#x27;star&#x27;</span>,<span class="string">&#x27;watcher&#x27;</span>]].groupby(data_tab[<span class="string">&#x27;top&#x27;</span>]).<span class="built_in">sum</span>()</span><br><span class="line">top_x</span><br><span class="line"></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"></span><br><span class="line">绘制折线图</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line">time_x[<span class="string">&#x27;recommend_avg&#x27;</span>]=time_x[<span class="string">&#x27;recommend&#x27;</span>].mean()</span><br><span class="line">time_x[[<span class="string">&#x27;recommend&#x27;</span>,<span class="string">&#x27;recommend_avg&#x27;</span>]].plot(kind=<span class="string">&#x27;line&#x27;</span>,figsize=[<span class="number">10</span>,<span class="number">5</span>],title=<span class="string">&#x27;recommend-time&#x27;</span>,grid=<span class="literal">True</span>,xlabel=<span class="string">&#x27;time&#x27;</span>,ylabel=<span class="string">&#x27;recommend&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"></span><br><span class="line">绘制多重折线图</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line">time_x[[<span class="string">&#x27;recommend&#x27;</span>,<span class="string">&#x27;star&#x27;</span>]].plot(kind=<span class="string">&#x27;line&#x27;</span>,figsize=[<span class="number">10</span>,<span class="number">5</span>],title=<span class="string">&#x27;recommend-time&#x27;</span>,grid=<span class="literal">True</span>,xlabel=<span class="string">&#x27;time&#x27;</span>,ylabel=<span class="string">&#x27;recommend&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"></span><br><span class="line">话题推荐度和收藏度的相关性分析</span><br><span class="line"></span><br><span class="line">- <span class="number">0.8</span>-<span class="number">1.0</span> 极强相关</span><br><span class="line">- <span class="number">0.6</span>-<span class="number">0.8</span>强相关</span><br><span class="line">- <span class="number">0.4</span>-<span class="number">0.6</span>中等相关</span><br><span class="line">- <span class="number">0.2</span>-<span class="number">0.4</span>弱相关</span><br><span class="line">- <span class="number">0.0</span>-<span class="number">0.2</span>极弱相关或无相关</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐度-收藏</span></span><br><span class="line">print(<span class="string">&#x27;推荐度-收藏&#x27;</span>,time_x[<span class="string">&#x27;recommend&#x27;</span>].corr(time_x[<span class="string">&#x27;star&#x27;</span>]))</span><br><span class="line"><span class="comment"># 浏览量-收藏</span></span><br><span class="line">print(<span class="string">&#x27;浏览量-收藏&#x27;</span>,time_x[<span class="string">&#x27;watcher&#x27;</span>].corr(time_x[<span class="string">&#x27;star&#x27;</span>]))</span><br><span class="line"><span class="comment"># 浏览量-推荐</span></span><br><span class="line">print(<span class="string">&#x27;浏览量-推荐&#x27;</span>,time_x[<span class="string">&#x27;watcher&#x27;</span>].corr(time_x[<span class="string">&#x27;recommend&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"></span><br><span class="line">绘制直方图</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line">time_x[<span class="string">&#x27;star_med&#x27;</span>]=time_x[<span class="string">&#x27;recommend&#x27;</span>].median()</span><br><span class="line">time_x[[<span class="string">&#x27;star&#x27;</span>,<span class="string">&#x27;star_med&#x27;</span>]].plot(kind=<span class="string">&#x27;hist&#x27;</span>,figsize=[<span class="number">10</span>,<span class="number">5</span>],title=<span class="string">&#x27;star-time&#x27;</span>,grid=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"></span><br><span class="line">绘制柱状图</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line">time_x[<span class="string">&#x27;watcher&#x27;</span>].plot(kind=<span class="string">&#x27;bar&#x27;</span>,figsize=[<span class="number">10</span>,<span class="number">5</span>],title=<span class="string">&#x27;watcher-time&#x27;</span>,xlabel=<span class="string">&#x27;watcher&#x27;</span>,ylabel=<span class="string">&#x27;time&#x27;</span>,grid=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#%% md</span></span><br><span class="line"></span><br><span class="line">绘制饼图</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># watcher大于平均且star也大于平均的话题的推荐度</span></span><br><span class="line">over_avg=top_x[(top_x[<span class="string">&#x27;watcher&#x27;</span>]&gt;top_x[<span class="string">&#x27;watcher&#x27;</span>].mean())&amp;(top_x[<span class="string">&#x27;star&#x27;</span>]&gt;top_x[<span class="string">&#x27;star&#x27;</span>].mean())]</span><br><span class="line">over_avg[<span class="string">&#x27;recommend&#x27;</span>].plot(kind=<span class="string">&#x27;pie&#x27;</span>,figsize=[<span class="number">5</span>,<span class="number">5</span>],counterclock=<span class="literal">True</span>,startangle=<span class="number">90</span>)</span><br></pre></td></tr></table></figure>

<h2 id="pd2csv"><a href="#pd2csv" class="headerlink" title="pd2csv"></a>pd2csv</h2><p>csv文件介绍在前面<a href="https://mednight4.github.io/2020/11/16/python-numpy-chang-yong-fang-fa/">numpy库入门</a>提到</p>
<p>DataFrame对象转csv格式保存</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_tab.to_csv(<span class="string">&#x27;hot_list.csv&#x27;</span>, encoding=<span class="string">&#x27;utf_8_sig&#x27;</span>)  <span class="comment"># encoding=&#x27;utf-8&#x27;也行</span></span><br><span class="line">data_tab=pd.read_csv(<span class="string">&#x27;hot_list.csv&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>时间对象直接求差</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_tab[<span class="string">&#x27;update&#x27;</span>] = data_tab[<span class="string">&#x27;date&#x27;</span>] - pd.to_datetime(datetime.datetime.now(), <span class="built_in">format</span>=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="总结与完善"><a href="#总结与完善" class="headerlink" title="总结与完善"></a>总结与完善</h2><p>其实数据里只爬到问题部分，回答部分爬不到。通过链接爬取的页面其实是这个：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%88%AC%E5%8F%96%E7%9F%A5%E4%B9%8Etop50%2C%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8Epd2csv%E6%A0%BC%E5%BC%8F/%E9%A1%B5%E9%9D%A2%E9%A2%84%E8%A7%88.png"></p>
<p>只能爬取到页面的部分问题(前两到三个)，因为回答部分是ajax异步加载的…不过在XHR数据里找找也许能找到，看图：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%88%AC%E5%8F%96%E7%9F%A5%E4%B9%8Etop50%2C%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97%E4%B8%8Epd2csv%E6%A0%BC%E5%BC%8F/%E6%9B%B4%E5%A4%9A%E5%9B%9E%E7%AD%94.png"></p>
<p>以此问题为例：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">answers?include=data%5B%2A%5D.is_normal%2Cadmin_cl…limit=5&amp;offset=5&amp;platform=desktop&amp;sort_by=default</span><br><span class="line">answers?include=data%5B%2A%5D.is_normal%2Cadmin_cl…imit=5&amp;offset=10&amp;platform=desktop&amp;sort_by=default</span><br></pre></td></tr></table></figure>

<p>这是页面外的第0-5个问题和5-10个问题的api链接，唯一的区别在于offset=5和offset=10，根据这个参数可以爬取到所有的回答。</p>
<p>感兴趣的话可以完善一下代码，这此的作业关键任务在于数据清理，上面提到的方案就不补完了。</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>直连的Domain或IP</title>
    <url>/2020/12/15/zhi-lian-de-domain-huo-ip/</url>
    <content><![CDATA[<h1 id="直连的Domain或IP"><a href="#直连的Domain或IP" class="headerlink" title="直连的Domain或IP"></a>直连的Domain或IP</h1><p>先绕过局域网及大陆地址。</p>
<p><strong>白名单</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">microsoft.com,</span><br><span class="line">windows.com,</span><br><span class="line">gettoby.com,</span><br><span class="line">alexametrics.com,</span><br><span class="line">microsofttranslator.com,</span><br><span class="line">adsblock.org,</span><br><span class="line">microsoftedgeinsider.com,</span><br><span class="line">yandex.com,</span><br><span class="line">firefox.com,</span><br><span class="line">mozilla.org,</span><br><span class="line">mousegesturesapi.com,</span><br><span class="line">pipe.aria.microsoft.com,</span><br><span class="line">.office.net,</span><br><span class="line">ads.trafficjunky.net,</span><br><span class="line">.grammarly.io,</span><br><span class="line">api.matetranslate.com,</span><br><span class="line">adobe.com,</span><br><span class="line">ip-api.com,</span><br><span class="line">yandex.ru,</span><br><span class="line">yandex.net,</span><br><span class="line">data-api.similarsites.com,</span><br><span class="line">cdnjs.cloudflare.com,</span><br><span class="line">sb.scorecardresearch.com,</span><br><span class="line">api.momentumdash.com,</span><br><span class="line">kiwibrowser.com,</span><br><span class="line">api.msn.com,</span><br><span class="line">doubleclick.net,</span><br><span class="line">grammarly.com,</span><br><span class="line">bbbbbb.me,</span><br><span class="line">coolhii.com,</span><br><span class="line">m1907.cn,</span><br><span class="line">618g.com,</span><br><span class="line">598110.com,</span><br><span class="line">1717yun.com,</span><br><span class="line">cesms.cn,</span><br><span class="line">aeidu.cn,</span><br><span class="line">jiexi-jiexi.com,</span><br><span class="line">du2.cc,</span><br><span class="line">lackar.com,</span><br><span class="line">crimx.com,</span><br><span class="line">csser.top,</span><br><span class="line">forestapp.cc,</span><br><span class="line">cloudflare-dns.com,</span><br><span class="line">gettoby.com,</span><br><span class="line">tampermonkey.net,</span><br><span class="line">myloft.xyz,</span><br><span class="line">qnmlgb.tech,</span><br><span class="line">paypal.com,</span><br><span class="line">www.bilibili.com</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>系统迁移记录-序</title>
    <url>/2021/01/22/xi-tong-qian-yi-ji-lu-xu/</url>
    <content><![CDATA[<h1 id="系统迁移记录-序"><a href="#系统迁移记录-序" class="headerlink" title="系统迁移记录-序"></a>系统迁移记录-序</h1><h2 id="步骤概要"><a href="#步骤概要" class="headerlink" title="步骤概要"></a>步骤概要</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>我本人是win10用户，本子128G的固态+1T的机械 。刚买时信了别人的邪，给128G的固态分了70G给系统，50G给常用软件。平时能选择安装地址的软件都会装在非系统盘里。系统用了两年有余，装了一大堆软件+插件。专业需要，matlab、vs、sql server、vmware、keil等等，70G根本不够用。想把50G合并回来，但是vs和一堆环境装在里边，格式化+合并的麻烦程度无异于重新装机。最近碰了一下C#，重启宇宙第一IDE后，C盘又红了，现在每次想折腾个什么东西都得看C盘的颜色，干脆一不做二不休，将所有分区全部合并，回到128G+1T的规格，然后用1T的ssd把128G顶掉，扩充一下容量，win10系统自然是没有了，留下1T+1T，重新做人，上双系统。</p>
<h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><p>打算1T ssd留给win10，hdd分两个区，256G hdd划为双系统资料交换区，剩下的留给linux。</p>
<p>因为文件系统的原因，安装Win10分区的文件系统为NTFS，安装Linux分区的文件系统为ext4，linux可以直接访问读写NTFS，win10默认不能访问ext4格式，但可以借助第三方工具LinuxReader等提取。遗憾的是，假如linux写了win10下的文件的话，可能还是会出问题。因此建议各自用各自的文件，互不干扰。关键时刻系统之间需要互传资料怎么办呢？可以用U盘，exFAT文件系统，被win10、mac、linux所兼容，同时也支持4G以上的文件。</p>
<p>多出来的128G固态条当然也不能就这么丢了。京东上花百来块钱买个m.2硬盘盒，当移动硬盘用。</p>
<p>这次升级的操作很麻烦，同时风险也挺大的，因为很多东西仅仅停留在理论上。我打算慢慢试错，分几期记录：<code>序-文件备份-系统安装</code>。</p>
<p>单子已经下了，希望不会翻车。</p>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>之前的主力系统一直是win10，linux只在虚拟机里跑过。用的较多是CentOS和Deepin，一个用来做实验写报告，一个用来当学习入门，还有呃…挂浏览器刷网课。要说最省事的当然是Deepin，没啥好折腾的，颜值也还好，开箱即用，啥都预装好了，以致于让人感觉不到这其实是一台linux，专心用软件就行了。后来久闻arch系大名，动了歪脑筋，就装了manjaro来玩，不得不说pacman和yay实在是太顶了，一件部署非常方便。ubuntu装过，感觉丑，卸了，不过桌面环境能换，丑不是问题。</p>
<p>目前考虑当桌面机使用的是manjaro、mint、ubuntu和deepin。都没有非常深入的了解，说个具体印象吧：</p>
<h3 id="deepin"><a href="#deepin" class="headerlink" title="deepin"></a>deepin</h3><p>中文发行版，开箱就有中文输入法，自己维护了一套国内常用的软件仓库，安装里面的软件比手机安装app还简单。桌面很华丽，我虚拟机里躺着的是V15，现在已经出到V20，刚装了一下V20，下面这图。发现还是V15时代好看。操作习惯全方面靠拢win10，用起来像平板，没有任何学习成本。缺点也很明显，官方维护的软件一般都不是最新的。然后官方可能魔改过一些东西，我以前在虚拟机里玩耍时，换了源，更新软件出了幺蛾子，还碰到一次界面卡死的小问题。总而言之，deepin对国内软件生态的支持绝对是所有发行版里最好的。就是，莫名给人感觉一股拘束感，腾不出手来折腾。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%BA%8F/20210124223541.png" alt="V20"></p>
<h3 id="manjaro"><a href="#manjaro" class="headerlink" title="manjaro"></a>manjaro</h3><p>manjaro好像是最流行的发行版。仓库无敌，背靠arch，享受着AUR的优势，同时滚挂的风险比arch低了很多，而且开箱即用，比arch亲民多了。大量的工具人帮忙打包，写配置脚本，安装配置一行代码搞定，出了问题有最详细的arch wiki可以查。当初安装oh-my-zsh加配置插件时，只需要执行几行脚本就搞定了，连配置文件都不要进，非常舒服。manjaro属于越折腾越好用的类型，不断给人新鲜感。缺点是滚动更新还是存在风险，至少一周需要更新一次，最好是每次开机就更新一次233。另外安装别人打包的软件时有可能会出现依赖缺失之类的小问题，要手动处理。需要经常备份，做了timeshift备份之后就可以尽情折腾了。</p>
<p>zsh自动填补输入</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%BA%8F/20210124232628.png" alt="zsh自动填补输入"></p>
<h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><p>应该没有谁不知道ubuntu吧。所有开发教程的首选，也可以用来做服务器。用户多，因此有最活跃的社区讨论度，遇到的坑前人都已经踩完了。更新速度适中，6个月更一次，系统不容易挂，适合静下心来开发。重点是，ubuntu系对硬件驱动支持很好。不过安装qq、chrome等闭源软件比较麻烦，ubuntu和debian的国产全家桶安装可见教程：</p>
<blockquote>
<p>  <a href="https://github.com/wszqkzqk/deepin-wine-ubuntu">https://github.com/wszqkzqk/deepin-wine-ubuntu</a>   </p>
</blockquote>
<p>虽然很久没更新了。</p>
<p>ubuntu界面大家都见过，就不放图了。</p>
<h3 id="mint"><a href="#mint" class="headerlink" title="mint"></a>mint</h3><p>大薄荷基于ubuntu，出现问题直接百度ubuntu解决方案即可。作为用户桌面系统，热度比ubuntu火，次于manjaro。以前没装过，只知道桌面比较特别，mate和cinnamon桌面操作逻辑像win7。界面简洁风，挺好看的。据说继承了ubuntu的所有优点，没有了ubuntu著名的内部错误？而且mint对驱动支持不错，安装完直接就可以用了，自带一个驱动管理器。软件仓库方面，mint有自己的仓库，因此软件数量比ubuntu多一点。ubuntu系装闭源软件都要添加ppa（Personal Package Archives，个人软件包文档）。</p>
<p>安装时随便截下的图，界面非常优雅：</p>
<ul>
<li>  图1：一边安装系统一边更新源，右上角提示无需安装其他驱动。</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%BA%8F/20210125022922.png" alt="一边安装系统一边更新源"></p>
<ul>
<li>  图2：安装完成，提示重启。</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%BA%8F/20210125022931.png" alt="安装完成"></p>
<ul>
<li>  图3：ppa安装的edge，linux版不支持登陆。</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%BA%8F/20210125033354.png" alt="edge"></p>
<p>命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Setup</span></span></span><br><span class="line">curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; microsoft.gpg</span><br><span class="line">sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/</span><br><span class="line">sudo sh -c &#x27;echo &quot;deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main&quot; &gt; /etc/apt/sources.list.d/microsoft-edge-dev.list&#x27;</span><br><span class="line">sudo rm microsoft.gpg</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Install</span></span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install microsoft-edge-dev</span><br></pre></td></tr></table></figure>

<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>本着少折腾系统，多学习开发的原则，我打算装mint…界面的manjaro，毕竟国内全家桶是刚需；</p>
<p>deepin只能用深度商店和debian官方的软件，因为ppa是ubuntu提供的（虽然可以修改release文件伪装成ubuntu…一想到debian系没有ppa…还是挺难受的）；</p>
<p>mint对不起，你的稳定和经典还是败在了yay脚下，等我manjaro玩炸了再来考虑你吧；</p>
<p>ubuntu…老实待在虚拟机里就行了。</p>
<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>安装系统前要先扩充硬盘。</p>
<p>硬盘ssd买的西部数据的蓝盘，西部数据Blue SN550 NVME SSD（1TB），京东自营报价750。<del>不过这玩意造不了假的，可以去便宜点的淘宝店，好一点的车能便宜100，免售后。</del></p>
<p>买东西前熟悉自己电脑的硬件当然是最重要的。</p>
<h3 id="硬盘位"><a href="#硬盘位" class="headerlink" title="硬盘位"></a>硬盘位</h3><p>两个硬盘接口：</p>
<ul>
<li>  M.2接口-规格2280-通道PCIE-协议NVME：三星 128g ssd</li>
<li>  SATA3接口-规格2.5：牌子和转速忘了，厚度7mm，1t hdd</li>
</ul>
<h3 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h3><p>Inter核显+NVIDIA独显</p>
<p>对于我这样的小白用户来说，这俩可以排除一众发行版。</p>
<p>N卡主要是对游戏进行优化的，但是linux下游戏非常少，此时N卡就会拖累系统，比如耗电，CPU功耗等等。<br>因此，<del>linus本人对NVIDIA竖了中指</del> 很多发行版对于N卡+Inter切换的支持较差。例如追求稳定的那批服务器发行版，就不要想N卡的事情了。我之前都是虚拟机，所有从来没有考虑硬件驱动的问题。</p>
<p>deepin。deepin官方至今还没给出良好的答案。官方默认用的开源N卡驱动，性能较差；而闭源的N卡驱动，据说显卡切换比较麻烦。当然，社区里已经有人解决了，除了驱动外还需要其他插件，具体可以深度社区自寻。</p>
<p>ubuntu。ubuntu系的一大特色就是对硬件的支持了。ubuntu和mint用prime可以稳妥解决双显卡问题。</p>
<p>manjaro。manjaro据说对硬件支持也不错，另有广大邪教成员出谋划策，解决方案肯定是有的，只是自己的本子跑不跑得动就是另外一回事了…总之需要一番折腾。</p>
<h3 id="U盘接口"><a href="#U盘接口" class="headerlink" title="U盘接口"></a>U盘接口</h3><ul>
<li>  USB 3.1 gen1接口 *3：理论上的最高速率是5.0Gbps(理论625MB/S，实际500MB/s左右)</li>
<li>  普通type-c接口 *1</li>
</ul>
<p>查U盘接口有什么用呢？买硬盘盒时可以根据接口硬件上限下单。简单来说就是多菜的电脑就配多菜的外设，尽量不多花钱，否则买了好外设也用不上。</p>
<p>说到这里，简单科普一下常见的usb接口种类：</p>
<blockquote>
<p>  想看详细说明可以看知乎的这篇文章：<a href="https://zhuanlan.zhihu.com/p/75880470">USB、PCI、SATA等各接口速度/带宽总结 - WireWolf的文章 - 知乎</a></p>
</blockquote>
<ul>
<li><p>USB 2.0：古董玩意儿，现在基本都是3.0了。</p>
<p>  买U盘时特别注意，有些奸商吹嘘自己U盘几百个G，有人就喜欢占小便宜，买完之后发现接口是2.0的。<br>理论上来说，USB2.0的传输速率为480Mbps，即60MB/s，略低于SATA3的600Mbps。</p>
</li>
</ul>
<p>2013年老标准：</p>
<ul>
<li><p>  USB 3.1 gen1接口：低中端笔记本常用接口，U盘主要阵容。<br>常说的3.0指的是gen1，理论上的最高速率是5.0Gbps(理论625MB/S，实际500MB/s左右)。</p>
</li>
<li><p>  USB 3.1 gen2接口：好一点的本子上有，不过我没怎么注意过。<br>理论上的最高速率是10.0Gbps(实际1GB/s左右)。</p>
</li>
</ul>
<p>2017年标准又改名了：</p>
<ul>
<li>  USB 3.0 - &gt; USB 3.1 gen 1：5Gbps</li>
<li>  USB 3.1 gen 2 - &gt; USB 3.2 gen 2：10Gbps</li>
<li>  USB 3.2 gen2 ×2：20Gbps</li>
</ul>
<p>目前最新的标准是USB4，参数可以看这张表（引用自知乎）：</p>
<ul>
<li>  USB 4：40Gbps</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%BA%8F/20210125041513.jpg" alt="usb4"></p>
<p>当然还有喜闻乐见的雷电接口：</p>
<ul>
<li>  typec 雷电3：40Gbps：比USB4好一点？</li>
</ul>
<h3 id="看图识字"><a href="#看图识字" class="headerlink" title="看图识字"></a>看图识字</h3><p>USB规格</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%BA%8F/20210124194827.png" alt="usb"></p>
<p>USB 2.0</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%BA%8F/20210124194828.jpg"></p>
<p>USB 3.1 gen2</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%BA%8F/20210124194829.jpg"></p>
<p>Type规格</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%BA%8F/20210124194830.jpg"></p>
<p>Type-c 雷电三（右边type-c 3.0，速度是一般的USB3.0）</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%BA%8F/20210124194831.jpg"></p>
<p>闪电标识（闪电标识和雷电接口没关系，只是表明使用该接口后，电脑在关机的情况下可以继续给移动设备充电）</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%BA%8F/20210124194832.png"></p>
<h3 id="硬盘盒"><a href="#硬盘盒" class="headerlink" title="硬盘盒"></a>硬盘盒</h3><p>m.2硬盘盒的挑选主要看主控芯片。当下主流的m.2硬盘盒主控芯片有ASM2362、JMS583、RTL9210。我买的RTL9210的货，支持USB 3.1 gen2，其实买贵了，我的本子接口不支持gen2。</p>
<p><strong>介绍视频</strong></p>
<iframe id="m41" src="//player.bilibili.com/player.html?aid=41074995&bvid=BV17t411a71P&cid=72146035&page=1" scrolling="no" border="0" frameborder="true" framespacing="0" allowfullscreen="true" width=100%> </iframe>
<script type="text/javascript"> document.getElementById("m41").style.height=document.getElementById("m41").scrollWidth*0.76+"px";
</script>


<p><strong>测试视频</strong>  </p>
<iframe id="m42" src="//player.bilibili.com/player.html?aid=752727755&bvid=BV13k4y1R7EZ&cid=176435283&page=1" scrolling="no" border="0" frameborder="true" framespacing="0" allowfullscreen="true" width=100%> </iframe>
<script type="text/javascript"> document.getElementById("m42").style.height=document.getElementById("m42").scrollWidth*0.76+"px";
</script>]]></content>
      <categories>
        <category>装机</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机配置apache虚拟主机服务</title>
    <url>/2020/12/31/xu-ni-ji-pei-zhi-apache-xu-ni-zhu-ji-fu-wu/</url>
    <content><![CDATA[<h1 id="虚拟机配置apache虚拟主机服务"><a href="#虚拟机配置apache虚拟主机服务" class="headerlink" title="虚拟机配置apache虚拟主机服务"></a>虚拟机配置apache虚拟主机服务</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>练习利用Apache服务建立普通Web站点、基于主机和用户认证的访问控制。</p>
<ol>
<li> 使用本地yum源安装Apache软件</li>
<li> Apache服务器IP地址为<code>192.168.5.20</code>，使用域名<a href="http://www.mednight420.com进行访问/">www.mednight420.com进行访问</a></li>
<li> 网站根目录为<code>/data/web_data</code></li>
<li> 网站首页为<code>index.html</code>，内容是<code>Welcome to 2019 Computer Network Application contest!</code></li>
<li> 使用三种方式搭建虚拟主机</li>
</ol>
<h2 id="初探Apache"><a href="#初探Apache" class="headerlink" title="初探Apache"></a>初探Apache</h2><h3 id="开启Apache服务"><a href="#开启Apache服务" class="headerlink" title="开启Apache服务"></a>开启Apache服务</h3><p>在自定义路径下配置服务服务</p>
<ol>
<li> 配置服务器ip</li>
</ol>
<p>地址和vmnet8网卡网段一致，确保服务器和主机能互相ping通，此处使用的静态nat连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=18f70089-a907-4307-b6fe-9e3e8b339116</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.5.20</span><br><span class="line">MASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.5.1</span><br><span class="line">~                                         </span><br><span class="line">~                                                                                         </span><br><span class="line">~                                         </span><br><span class="line">&quot;/etc/sysconfig/network-scripts/ifcfg-ens33&quot; 18L, 341C</span><br></pre></td></tr></table></figure>

<p>保存退出后，重启服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# service network restart</span><br><span class="line">Restarting network (via systemctl):                        [  OK  ]</span><br></pre></td></tr></table></figure>

<ol start="2">
<li> 挂载本地镜像</li>
</ol>
<p>这个参数我之前配过了，<a href="https://mednight4.github.io/2020/12/14/centos-7-gua-zai-ben-di-jing-xiang/?highlight=%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">centos7挂载本地镜像</a>，这里就不说了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mount /dev/cdrom /media/cdrom/</span><br><span class="line">mount: /dev/sr0 is write-protected, mounting read-only</span><br></pre></td></tr></table></figure>

<ol start="3">
<li> 安装httpd服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install httpd</span><br><span class="line">...</span><br><span class="line">Is this ok [y/d/N]: y</span><br><span class="line">...</span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure>

<ol start="3">
<li> 配置防火墙</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# firewall-cmd --add-port=80/tcp</span><br><span class="line">success</span><br></pre></td></tr></table></figure>

<ol start="4">
<li> 开启服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start httpd</span><br></pre></td></tr></table></figure>

<ol start="5">
<li> 主机访问</li>
</ol>
<p>打开浏览器，输入服务器ip地址，访问服务页面</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEapache%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%9C%8D%E5%8A%A1/apache%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8.png"></p>
<p>至此，第一步完成。</p>
<h3 id="服务文件配置参数"><a href="#服务文件配置参数" class="headerlink" title="服务文件配置参数"></a>服务文件配置参数</h3><p>和apache相关的配置文件有</p>
<table>
<thead>
<tr>
<th>配置文件的名称</th>
<th>文件存放位置</th>
</tr>
</thead>
<tbody><tr>
<td>服务目录</td>
<td>/etc/httpd</td>
</tr>
<tr>
<td>主配置文件</td>
<td>/etc/httpd/conf/httpd.conf</td>
</tr>
<tr>
<td>网站数据目录</td>
<td>/var/www/html</td>
</tr>
<tr>
<td>访问日志</td>
<td>/var/log/httpd/access_log</td>
</tr>
<tr>
<td>错误日志</td>
<td>/var/log/httpd/error_log</td>
</tr>
</tbody></table>
<p>主要的参数配置在/etc/httpd/conf/httpd.conf，常见参数有</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>ServerRoot</td>
<td>服务目录</td>
</tr>
<tr>
<td>ServerAdmin</td>
<td>管理员邮箱</td>
</tr>
<tr>
<td>User</td>
<td>运行服务的用户</td>
</tr>
<tr>
<td>Group</td>
<td>运行服务的用户组</td>
</tr>
<tr>
<td><strong>ServerName</strong></td>
<td><strong>网站服务器的域名</strong></td>
</tr>
<tr>
<td><strong>DocumentRoot</strong></td>
<td><strong>网站数据目录</strong></td>
</tr>
<tr>
<td><strong>Dorectory</strong></td>
<td><strong>网站数据目录的权限</strong></td>
</tr>
<tr>
<td><strong>Listen</strong></td>
<td><strong>监听的IP地址或者端口</strong></td>
</tr>
<tr>
<td>DirectoryIndex</td>
<td>默认的索引页页面</td>
</tr>
<tr>
<td>ErrorLog</td>
<td>错误日志文件</td>
</tr>
<tr>
<td>CustomLog</td>
<td>访问日志文件</td>
</tr>
<tr>
<td>Timeout</td>
<td>网页超时时间，默认300秒</td>
</tr>
</tbody></table>
<p>先备份配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# cd /etc/httpd/conf</span><br><span class="line">[root@localhost conf]# ls</span><br><span class="line">httpd.conf  magic</span><br><span class="line">[root@localhost conf]# cp httpd.conf httpd.conf.bak</span><br></pre></td></tr></table></figure>

<p>vi配置文件</p>
<p>开启行号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# vi httpd.conf</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># This is the main Apache HTTP server configuration file.  It contains the</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> configuration directives that give the server its instructions.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See &lt;URL:http://httpd.apache.org/docs/2.4/&gt; <span class="keyword">for</span> detailed information.</span></span><br><span class="line">...</span><br><span class="line">:set number</span><br></pre></td></tr></table></figure>

<h4 id="使用特定域名访问"><a href="#使用特定域名访问" class="headerlink" title="使用特定域名访问"></a>使用特定域名访问</h4><p>ServerName可以指定网站服务器域名</p>
<p>vi命令状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/ServerName</span><br></pre></td></tr></table></figure>

<p>跳转到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">95 #ServerName www.example.com:80</span><br></pre></td></tr></table></figure>

<p>i插入状态，修改为以下，保存退出</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">95 ServerName www.mednight420.com:80</span><br></pre></td></tr></table></figure>

<p>由于服务器没有启用DNS解析，只能在主机hosts里自行添加本地静态解析了</p>
<p>windows的hosts路径在<code>C:\Windows\System32\drivers\etc</code>，末尾添加一行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.5.20 www.mednight420.com</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEapache%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%9C%8D%E5%8A%A1/hosts%E9%9D%99%E6%80%81%E8%A7%A3%E6%9E%90.png"></p>
<p>回到服务器，重启服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# systemctl restart httpd</span><br></pre></td></tr></table></figure>

<p>来到主机用域名<a href="http://www.mednight420访问,成功/">www.mednight420访问，成功</a></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEapache%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%9C%8D%E5%8A%A1/%E8%87%AA%E5%AE%9A%E5%9F%9F%E5%90%8D.png"></p>
<h4 id="自定网站根目录和首页"><a href="#自定网站根目录和首页" class="headerlink" title="自定网站根目录和首页"></a>自定网站根目录和首页</h4><p>网站根目录DocumentRoot</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# vi httpd.conf</span><br><span class="line">/DocumentRoot</span><br><span class="line">n</span><br><span class="line">n</span><br><span class="line">i</span><br></pre></td></tr></table></figure>

<p>修改以下三处路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DocumentRoot &quot;/data/web_data&quot;</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment"># Relax access to content within /var/www.</span></span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash">&lt;Directory <span class="string">&quot;/data/web_data&quot;</span>&gt;</span></span><br><span class="line">    AllowOverride None</span><br><span class="line">    # Allow open access:</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Further relax access to the default document root:</span></span><br><span class="line">&lt;Directory &quot;/data/web_data&quot;&gt;</span><br><span class="line">    #</span><br><span class="line">    # Possible values for the Options directive are &quot;None&quot;, &quot;All&quot;,</span><br><span class="line">    # or any combination of:</span><br><span class="line">    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews</span><br><span class="line">    #</span><br><span class="line">    # Note that &quot;MultiViews&quot; must be named *explicitly* --- &quot;Options All&quot;</span><br><span class="line">    # doesn&#x27;t give it to you.</span><br><span class="line">    #</span><br><span class="line">    # The Options directive is both complicated and important.  Please see</span><br><span class="line">    # http://httpd.apache.org/docs/2.4/mod/core.html#options</span><br><span class="line">    # for more information.</span><br></pre></td></tr></table></figure>

<p>建立网站指向的文件夹</p>
<p>重启服务，报错，可以使用httpd来检测参数配置的错误，此处提示未建立文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# systemctl restart httpd</span><br><span class="line">Job for httpd.service failed because the control process exited with error code. See &quot;systemctl status httpd.service&quot; and &quot;journalctl -xe&quot; for details.</span><br><span class="line">[root@localhost conf]# httpd</span><br><span class="line">AH00526: Syntax error on line 119 of /etc/httpd/conf/httpd.conf:</span><br><span class="line">DocumentRoot &#x27;/data/web_data&#x27; is not a directory, or is not readable</span><br><span class="line">[root@localhost conf]# mkdir -p /data/web_data</span><br><span class="line">[root@localhost conf]# echo &quot;Welcome to 2019 Computer Network Application contest&quot; &gt; /data/web_data/index.html</span><br><span class="line">[root@localhost conf]# systemctl restart httpd</span><br></pre></td></tr></table></figure>

<p>此时我们主机查看域名，发现仍然是原来的默认主页，这是因为SELinux安全子系统的限制</p>
<p>这里，可以使用selinux配置命令semanage对特定需要进行修改，但是最小化安装并没有这个命令，安装semanage</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line">[root@localhost conf]# yum install policycoreutils-python</span><br><span class="line">端口添加-a，修改-m,删除-d，查找-l</span><br><span class="line">[root@localhost www]# semanage port -a -t http_port -p tcp 10022 </span><br><span class="line">[root@localhost www]# semanage port -m  -t http_port -p tcp 10022</span><br><span class="line">查看端口状态</span><br><span class="line">[root@localhost www]# semanage port -l | grep http </span><br></pre></td></tr></table></figure>

<p>也可以采取一刀切方法</p>
<p>SElinux弱策略</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# setenforce 0</span><br></pre></td></tr></table></figure>

<p>主机访问域名，发现已经可以了</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEapache%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%9C%8D%E5%8A%A1/%E8%87%AA%E5%AE%9A%E8%B7%AF%E5%BE%84.png"></p>
<h2 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h2><p>利用虚拟主机功能，可以把一台处于运行状态的物理服务器分割成多个“虚拟的服务器”。</p>
<p>这里介绍三种方式，IP，域名和端口。</p>
<p>首先，请给当前状态拍一个快照，方便回到当前状态。快照命名“虚拟主机服务参数配置完毕”。</p>
<h3 id="基于IP地址"><a href="#基于IP地址" class="headerlink" title="基于IP地址"></a>基于IP地址</h3><p>两个虚拟IP地址分别为</p>
<ul>
<li><p>  192.168.5.20</p>
</li>
<li><p>  192.168.5.21</p>
</li>
</ul>
<ol>
<li> 添加IP地址</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens33</span><br><span class="line">UUID=18f70089-a907-4307-b6fe-9e3e8b339116</span><br><span class="line">DEVICE=ens33</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=192.168.5.20</span><br><span class="line">IPADDR1=192.168.5.21</span><br><span class="line">MASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.5.1</span><br><span class="line">~                 </span><br><span class="line">~                                                       </span><br><span class="line">~                              </span><br><span class="line">~                           </span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line">[root@localhost conf]# service network restart</span><br><span class="line">Restarting network (via systemctl):                        [  OK  ]</span><br></pre></td></tr></table></figure>

<p>主机ping一下192.168.5.21，ping通继续</p>
<ol start="2">
<li> 建立对应的网站文件</li>
</ol>
<p>吸取到上次教训，先建文件再改配置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# mkdir -p /data/web_data/20</span><br><span class="line">[root@localhost conf]# echo &quot;this is the ip 20&quot; &gt; /data/web_data/20/index.html</span><br><span class="line">[root@localhost conf]# mkdir -p /data/web_data/21</span><br><span class="line">[root@localhost conf]# echo &quot;this is the ip 21&quot; &gt; /data/web_data/21/index.html       </span><br></pre></td></tr></table></figure>

<ol start="3">
<li> 改配置文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# vi /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">：set number</span><br><span class="line">113 shift+g</span><br><span class="line">i</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 到113行，粘贴以下</span></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 192.168.5.20&gt;</span><br><span class="line">DocumentRoot /data/web_data/20</span><br><span class="line">ServerName www.mednight420.com</span><br><span class="line">&lt;Directory /data/web_data/20&gt;</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">: 113,120 co 121</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 到121行，改为以下</span></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 192.168.5.21&gt;</span><br><span class="line">DocumentRoot /data/web_data/21</span><br><span class="line">ServerName www.mednight420.com</span><br><span class="line">&lt;Directory /data/web_data/21&gt;</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">: wq</span><br></pre></td></tr></table></figure>

<ol start="4">
<li> 重启服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# systemctl restart httpd</span><br></pre></td></tr></table></figure>

<ol start="5">
<li> 主机访问192.168.5.20和192.168.5.21</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEapache%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%9C%8D%E5%8A%A1/%E5%9F%BA%E4%BA%8Eip.png"></p>
<p>拍个快照，存档“基于ip虚拟主机配置完毕”</p>
<h3 id="基于域名"><a href="#基于域名" class="headerlink" title="基于域名"></a>基于域名</h3><p>转到快照“虚拟主机服务参数配置完毕”。</p>
<p>两台虚拟主机的域名分别为</p>
<ul>
<li><p>  <a href="http://www.mednight420.com/">www.mednight420.com</a></p>
</li>
<li><p>  <a href="http://www.mednight421.com/">www.mednight421.com</a></p>
</li>
</ul>
<ol>
<li> 建立对应的网站文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# mkdir -p /data/web_data/20</span><br><span class="line">[root@localhost conf]# echo &quot;this is the 420&quot; &gt; /data/web_data/20/index.html</span><br><span class="line">[root@localhost conf]# mkdir -p /data/web_data/21</span><br><span class="line">[root@localhost conf]# echo &quot;this is the 421&quot; &gt; /data/web_data/21/index.html       </span><br></pre></td></tr></table></figure>

<ol start="2">
<li> 给主机添加第二域名21的DNS解析</li>
</ol>
<p>打开powershell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd C:\Windows\System32\drivers\etc</span><br><span class="line">notepad hosts</span><br></pre></td></tr></table></figure>

<p>末尾添加</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.5.20 www.mednight421.com</span><br></pre></td></tr></table></figure>

<ol start="3">
<li> 改配置文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# vi /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">：set number</span><br><span class="line">113 shift+g</span><br><span class="line">i</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 到113行，粘贴以下</span></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 192.168.5.20&gt;</span><br><span class="line">DocumentRoot /data/web_data/20</span><br><span class="line">ServerName www.mednight420.com</span><br><span class="line">&lt;Directory /data/web_data/20&gt;</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">: 113,120 co 121</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 到121行，改为以下</span></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 192.168.5.20&gt;</span><br><span class="line">DocumentRoot /data/web_data/21</span><br><span class="line">ServerName www.mednight421.com</span><br><span class="line">&lt;Directory /data/web_data/21&gt;</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">: wq</span><br></pre></td></tr></table></figure>

<ol start="4">
<li> 重启服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# systemctl restart httpd</span><br></pre></td></tr></table></figure>

<ol start="5">
<li> 主机访问<a href="http://www.mednight420.com和www.mednight421.com/">www.mednight420.com和www.mednight421.com</a></li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEapache%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%9C%8D%E5%8A%A1/%E5%9F%BA%E4%BA%8E%E5%9F%9F%E5%90%8D.png"></p>
<p>拍个快照，存档“基于域名虚拟主机配置完毕”</p>
<h3 id="基于端口"><a href="#基于端口" class="headerlink" title="基于端口"></a>基于端口</h3><p>转到快照“虚拟主机服务参数配置完毕”。</p>
<p>两台虚拟主机的ip+port分别为</p>
<ul>
<li><p>  192.168.5.20:6420</p>
</li>
<li><p>  192.168.5.20:6421</p>
</li>
</ul>
<ol>
<li> 建立对应的网站文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /data/web_data/20</span><br><span class="line">[root@localhost ~]# echo &quot;this is the port 6420&quot; &gt; /data/web_data/20/index.html</span><br><span class="line">[root@localhost ~]# mkdir -p /data/web_data/21</span><br><span class="line">[root@localhost ~]# echo &quot;this is the port 6421&quot; &gt; /data/web_data/21/index.html     </span><br></pre></td></tr></table></figure>

<ol start="2">
<li> 改配置文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# vi /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line">：set number</span><br><span class="line">113 shift+g</span><br><span class="line">i</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 到113行，粘贴以下</span></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 192.168.5.20:6420&gt;</span><br><span class="line">DocumentRoot /data/web_data/20</span><br><span class="line">ServerName www.mednight420.com</span><br><span class="line">&lt;Directory /data/web_data/20&gt;</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">: 113,120 co 121</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 到121行，改为以下</span></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 192.168.5.20:6421&gt;</span><br><span class="line">DocumentRoot /data/web_data/21</span><br><span class="line">ServerName www.mednight420.com</span><br><span class="line">&lt;Directory /data/web_data/21&gt;</span><br><span class="line">AllowOverride None</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加端口监听 41行左右</span></span><br><span class="line"></span><br><span class="line">/Listen</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Listen 12.34.56.78:80</span></span><br><span class="line">Listen 80</span><br><span class="line">Listen 6420</span><br><span class="line">Listen 6421</span><br><span class="line"></span><br><span class="line">: wq</span><br></pre></td></tr></table></figure>

<ol start="3">
<li> 防火墙开启端口</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=6420/tcp</span><br><span class="line">firewall-cmd --add-port=6421/tcp</span><br></pre></td></tr></table></figure>

<ol start="4">
<li> 重启服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost conf]# systemctl restart httpd</span><br></pre></td></tr></table></figure>

<ol start="5">
<li> 主机访问192.168.5.20:6420和192.168.5.21:6421</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEapache%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E6%9C%8D%E5%8A%A1/%E5%9F%BA%E4%BA%8E%E7%AB%AF%E5%8F%A3.png"></p>
<p>拍个快照，存档“基于端口虚拟主机配置完毕”</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>系统迁移记录-系统安装</title>
    <url>/2021/01/27/xi-tong-qian-yi-ji-lu-xi-tong-an-zhuang/</url>
    <content><![CDATA[<h1 id="系统迁移记录-系统安装"><a href="#系统迁移记录-系统安装" class="headerlink" title="系统迁移记录-系统安装"></a>系统迁移记录-系统安装</h1><h2 id="win10系统安装"><a href="#win10系统安装" class="headerlink" title="win10系统安装"></a>win10系统安装</h2><p>由于我对win10比较熟悉，先装win10。</p>
<h3 id="初始化新购固态"><a href="#初始化新购固态" class="headerlink" title="初始化新购固态"></a>初始化新购固态</h3><p>关于新购的固态硬盘，写入东西之前需要先将磁盘转换为GPT分区格式（此外还有一种格式，但是固态装win10用那种格式会很蠢，我不介绍了）。转换为GPT格式的方法：</p>
<ul>
<li>有win10的情况下读取固态。<br>  具体情景：新装固态作为原有系统的磁盘拓展，此时：有硬盘盒可外接固态；或者本子有多个固态插口。<br>  处理办法：右键状态栏win10徽标键进入磁盘管理，会提示你对新装固态进行初始化，选择GBT格式即可。</li>
<li>只能在无系统下新装固态。<br>  具体情景：垃圾佬刚把电脑硬件组装好。<br>  处理办法：在U盘安装一个PE系统。进PE的分区助手将固态初始化为GBT格式。这两步骤我将在后续说明。</li>
</ul>
<p>稳妥起见，利用PE系统+ISO镜像的方式安装win10。</p>
<h3 id="下载ISO镜像"><a href="#下载ISO镜像" class="headerlink" title="下载ISO镜像"></a>下载ISO镜像</h3><p>不建议第三方提供的镜像。只建议两家：微软官网和<a href="https://msdn.itellyou.cn/">MSDN I tell you</a>。这里默认你的网络状况很好，所以介绍微软官网的镜像。</p>
<blockquote>
<p><a href="https://www.microsoft.com/zh-cn/software-download/windows10">下载 Windows 10 (microsoft.com)</a></p>
</blockquote>
<p>电脑直接进去只有镜像制作工具，不提供镜像下载入口。因为网站通过响应式检测到浏览器是pc端，ctrl+shift+I进入调试，将响应式改为手机并刷新，选择你的win10版本对应镜像并下载。镜像一般是家庭中文版，可以在<strong>设置-关于</strong>里查看。当然，你也可以下载镜像制作工具，运行后选择从ISO安装，然后再下载ISO镜像。<br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/20210202155429.png"></p>
<h3 id="U盘安装PE系统"><a href="#U盘安装PE系统" class="headerlink" title="U盘安装PE系统"></a>U盘安装PE系统</h3><details class="note "><summary><p>warming</p>
</summary>
<p>其实可以直接将镜像做在U盘里，BIOS引导改为U盘启动，开机直接安装系统。但是没有PE就不能对分区进行转换、对齐等操作，还是不推荐。</p>

</details>

<p>装备一个大于8G的空U盘。纯净一点的PE工具建议PE工具箱。下载64位最新版V2.1即可。</p>
<blockquote>
<p><a href="http://www.wepe.com.cn/download.html">微PE工具箱 - 下载 (wepe.com.cn)</a></p>
</blockquote>
<p>点击exe直接运行，选择安装PE到U盘，注意，如果你选择默认安装方案一，会将U盘划为三分区，ESD-USB分区为正常的U盘分区，可以照常存放文件；EFI分区里是PE系统文件和PE系统引导。还有一个未分配分区我也不知道干啥的。</p>
<div class="note danger"><p>手动对U盘进行分区操作非常麻烦，win10自带的磁盘管理并不支持此操作，哪怕是PE的分区助手也不能对U盘分区拓展和合并，望周知并谨慎选择方案。</p>
</div>

<p>当然我是不介意U盘多出一个分区来安装系统。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/20210202155430.png"></p>
<p>分区结果：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/20210202155431.png"></p>
<p>安装完PE后将上一步的.ISO镜像文件拷贝到ESD-USB里即可。</p>
<h3 id="拆机更换固态"><a href="#拆机更换固态" class="headerlink" title="拆机更换固态"></a>拆机更换固态</h3><p>稳妥起见，拆机前插上U盘，将引导顺序改为 U盘 &gt; 系统，看下之前的ISO是否能正常挂载运行。</p>
<p>进入BIOS修改引导顺序，每个品牌进入BIOS按键不一致，自查（hp的进入键是F10）：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/20210202155435.jpg"></p>
<p>查看ISO镜像挂载情况，右键镜像挂载后进入文件夹，有一个setup.exe文件，可以运行查看，出现安装win10的选项后确认无误，退出。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/20210202155434.png"></p>
<p>拆机，更换固态，如果是笔记本，更换固态前最好将电池拆下。更换完后别急着拧D面螺丝，先开一下机看是否能正常进入PE，确保硬件无误。<strong>更换固态后摁下开机键，头一两次不能正常开机是很正常的事情，多摁几次就行了。</strong></p>
<p>如果能正常进入PE，把电脑装好。</p>
<h3 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h3><p>在挂载ISO安装之前：</p>
<ol>
<li><p>转换GBT格式。如果之前的步骤没有将固态初始化为GBT格式，此时可以进入桌面的分区助手，然后右键将分区转换为GPT格式。</p>
</li>
<li><p><strong>分区4k对齐</strong>。所谓4K对齐，是指符合“4K扇区”定义格式化过的硬盘，并按照“4K扇区”的规则写入数据。如果你的固态是使用过的，记得务必在 <strong>分区助手-固态磁盘-右键-高级-对磁盘4K对齐</strong>，否则性能损失极大。<br> 不过我更换新固态时没有看到此选项，装完系统后查看固态分区是已对齐的。<br>装系统的分区仍然是“未分配”的状态。</p>
</li>
<li><p>挂载ISO镜像，setup.exe安装系统，系统选择你账户拥有的（一般是家庭中文版），磁盘选择新固态的磁盘。</p>
</li>
<li><p>不出意外，等win10系统安装环境制作完毕，会退回PE系统，此时重启系统。</p>
</li>
<li><p>开机引导之前进入BIOS（F10），将引导顺序改回 系统 &gt; U盘，否则又会进入PE。</p>
</li>
<li><p>BIOS更改确认，重启。</p>
</li>
<li><p>直面多嘴的小娜。</p>
<p> <img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/20210202155433.png"></p>
</li>
<li><p>小娜会让你连接网络，并在后续让你登陆微软账户。如果你对你的网络状况缺乏信心，或者对微软的土豆服务器缺乏信心，请尝试<strong>连接手机热点</strong>。因为：</p>
 <div class="note danger"><p><strong>微软系统安装选项不包含上一步。</strong></p>
</div>

<p> 如果你的网络状况不行，必定会卡在后续的微软账户登陆界面，被迫只能选择本地账户登陆。<br> 同时你还不能返回上一步更改已连接的网络。</p>
</li>
<li><p>用户登陆。如果你有微软账户，此时请务必登陆账户，这样做可以：开机默认激活系统，同步前win10系统设置项，全同步Edge。</p>
</li>
<li><p>系统安装完成。可以断掉热点换成其他网络，因为此时系统会主动检测下载硬件所需驱动<del>（linux学学人家）</del>。</p>
<p>联网晾一个小时左右，重启。</p>
<p>右键开始win徽标，进入设备管理器，检查驱动安装情况，假如没有黄色感叹号，说明驱动正常，否则请手动下载安装问题驱动<del>（懒得找驱动就再重装一次系统吧）</del>。</p>
<p>进win10的系统更新，将系统更至最新，再次重启。</p>
</li>
</ol>
<p>开始使用win10。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/20210202155432.png" alt="win10新系统的分区情况"></p>
<h2 id="linux系统安装"><a href="#linux系统安装" class="headerlink" title="linux系统安装"></a>linux系统安装</h2><h3 id="manjaro和openSuSE"><a href="#manjaro和openSuSE" class="headerlink" title="manjaro和openSuSE"></a>manjaro和openSuSE</h3><p>我先知道的manjaro。虚拟机里试了一下manjaro的两个桌面kde5和gnome3，相比与kde，gnome版本开箱不需要太多配置，装好常用软件就能使用，ohmyzsh、ranger也都默认装好了，字体渲染也很棒，只是我单纯不喜欢gnome这种为了简洁而把设置项藏得很深的风格；kde定制性很强，但感觉manjaro对这个桌面调教欠佳，比如字体渲染方面就很奇怪，过渡动画偶然卡顿，需要大折腾一把，把主题、图标、窗口界面、字体啥的统统更换一遍，没配置好桌面容易崩溃。</p>
<p>其实以上提到的这些问题不大，比较烦的是manjaro作为arch的下游发行版，软件适配的优先级arch &gt; manjaro，archlinuxcn的包是基于arch打包的，如果manjaro有包没有及时更新，可能会出现问题。一个实际的例子就是：qv2ray 前一阵子在 arch 能跑，manjaro 上就不能正常使用：<br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/20210221222414.png" alt="Qv2ray的贴心警告"></p>
<p>简单来说，上了arch系就需要谨慎操作考虑系统稳定性。我个人是喜欢折腾软件的，但不喜欢花大时间做系统回滚和重装，丢了资料就纯作死了。</p>
<p>后来通过一个视频偶然了解到SuSE系。稳：openSUSE的leap版和服务器SUSE的内核保持一致；软件安装方便：打包侠打包工具OBS，opi命令可一键添加用户仓库并安装社区软件，有ppa+aur那味；美观：对kde的调教是一众发行版中最好的，因为openSUSE开发人员在kde社区兼职；管理简单，YaST类似win10的控制面板；参考文档齐全。</p>
<iframe id="spkj" src="https://player.bilibili.com/player.html?aid=926599141&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width=100%> </iframe>
<script type="text/javascript">  
document.getElementById("spkj").style.height=document.getElementById("spkj").scrollWidth*0.76+"px";</script>
缺点还是软件包的问题。我找了一些常用的软件，这个发行版用做开发工具很完美，但学校日常使用有点吃力。毕竟obs打包侠还是没有aur的勤快，而且虽然suse系支持rpm包，但更多厂商只提供deb包下载或ubuntu下的ppa仓库，比如typora（opi能搜到仅存的一个包还是上面视频的up打的）、比如微软edge on linux preview等等。

<div class="note primary"><p>马上又开学了，时间不够折腾新系统了，以后主力机正式转linux再来补这方面的东西吧，现在wsl2能一定程度满足我对linux的要求。</p>
</div>

<h2 id="21-02-24更新补充"><a href="#21-02-24更新补充" class="headerlink" title="21.02.24更新补充"></a>21.02.24更新补充</h2><p>放个假天天玩发行版的各种包管理和花式装软件，结果到头来他妈也只学会装系统、装软件和美化，真正有用的linux命令和服务啥也没学到。<br>气死哦嘞！这些个没用的渣渣！！<br>好像也学了点文件类型。。开机引导进程。。源码打包。。啥的。。还顺便学了一手docker。。<br>总而言之，我是傻逼。</p>
]]></content>
      <categories>
        <category>装机</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机配置smb服务</title>
    <url>/2020/12/23/xu-ni-ji-pei-zhi-smb-fu-wu/</url>
    <content><![CDATA[<h1 id="虚拟机配置smb服务"><a href="#虚拟机配置smb服务" class="headerlink" title="虚拟机配置smb服务"></a>虚拟机配置smb服务</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>Samba服务器的配置：</p>
<ul>
<li><p>  修改工作组为WORKGROUP。</p>
</li>
<li><p>  注释[homes]和[printers]的内容。</p>
</li>
<li><p>  共享名为webdata。</p>
</li>
<li><p>  webdata可浏览、可写。</p>
</li>
<li><p>  共享目录为/data/web_data，且Apache用户对该目录有读、写、执行权限，使用setfacl命令配置目录权限。</p>
</li>
<li><p>  只有IP地址为192.168.5.1的主机可以访问该目录（Vmnet8）。</p>
</li>
<li><p>  添加一个Apache用户（密码自定义）并对外提供Samba服务。</p>
</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p><strong>先拍个快照，真的不麻烦</strong></p>
<p><strong>安装samba服务器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install samba</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * c7-media: </span><br><span class="line">...</span><br><span class="line">Installed size: 29 M</span><br><span class="line">Is this ok [y/d/N]: y</span><br><span class="line">Downloading packages:</span><br><span class="line">...</span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure>

<p><strong>备份服务配置文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ls /etc/samba</span><br><span class="line">lmhosts  smb.conf  smb.conf.example</span><br><span class="line">[root@localhost ~]# cp /etc/samba/smb.conf /etc/samba/smb.conf.bak</span><br><span class="line">[root@localhost ~]# vi /etc/samba/smb.conf</span><br></pre></td></tr></table></figure>

<p><strong>修改配置文件</strong></p>
<p>此处192.168.5.1为物理机vmnet8的网卡地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> See smb.conf.example <span class="keyword">for</span> a more detailed config file or</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">read</span> the smb.conf manpage.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Run <span class="string">&#x27;testparm&#x27;</span> to verify the config is correct after</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> you modified it.</span></span><br><span class="line">[global]</span><br><span class="line">        workgroup = WORKGROUP</span><br><span class="line">        security = user</span><br><span class="line">        passdb backend = tdbsam</span><br><span class="line">        printing = cups</span><br><span class="line">        printcap name = cups</span><br><span class="line">        load printers = yes</span><br><span class="line">        cups options = raw</span><br><span class="line">[webdata]</span><br><span class="line">        hosts allow = 192.168.5.1        #VMnet8</span><br><span class="line">        writable = yes</span><br><span class="line">        browseable = yes</span><br><span class="line">        path = /data/web_data</span><br><span class="line"><span class="meta">#</span><span class="bash">[homes]</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       comment = Home Directories</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       valid users = %S, %D%w%S</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       browseable = No</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       <span class="built_in">read</span> only = No</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       inherit acls = Yes</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="bash"><span class="comment">#[printers]</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">       comment = All Printers</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       path = /var/tmp</span></span><br><span class="line"><span class="meta">#</span><span class="bash">       printable = Yes</span></span><br><span class="line">&quot;/etc/samba/smb.conf&quot; 39L, 830C</span><br></pre></td></tr></table></figure>

<p><strong>配置模版</strong></p>
<p>如果有其他要求，可以在此找到键</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/samba/smb.conf.example | grep -v &quot;#&quot; | grep -v &quot;^$&quot;</span><br></pre></td></tr></table></figure>

<p><strong>测试配置文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# testparm  /etc/samba/smb.conf</span><br><span class="line">Load smb config files from /etc/samba/smb.conf</span><br><span class="line">Loaded services file OK.</span><br><span class="line">Server role: ROLE_STANDALONE</span><br><span class="line"></span><br><span class="line">Press enter to see a dump of your service definitions</span><br></pre></td></tr></table></figure>

<p><strong>建立网络服务文件</strong> </p>
<p>然后查看其权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /data/web_data</span><br><span class="line">[root@localhost ~]# echo &quot;hello&quot; &gt; /data/web_data/hello.txt</span><br><span class="line">[root@localhost ~]# getfacl /data/web_data</span><br><span class="line">getfacl: Removing leading &#x27;/&#x27; from absolute path names</span><br><span class="line"><span class="meta">#</span><span class="bash"> file: data/web_data</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> owner: root</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">group::r-x</span><br><span class="line">other::r-x</span><br></pre></td></tr></table></figure>

<p><strong>新建linux用户</strong></p>
<p>Apache</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# useradd Apache</span><br><span class="line">[root@localhost ~]# passwd Apache</span><br><span class="line">Changing password for user Apache.</span><br><span class="line">New password: </span><br><span class="line">BAD PASSWORD: The password is shorter than 8 characters</span><br><span class="line">Retype new password: </span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>

<p><strong>给smb服务配置用户</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# pdbedit -a -u Apache</span><br><span class="line">new password:</span><br><span class="line">retype new password:</span><br><span class="line">Unix username:        Apache</span><br><span class="line">NT username:          </span><br><span class="line">Account Flags:        [U          ]</span><br><span class="line">User SID:             S-1-5-21-2237892677-58617703-3176231605-1000</span><br><span class="line">Primary Group SID:    S-1-5-21-2237892677-58617703-3176231605-513</span><br><span class="line">Full Name:            </span><br><span class="line">Home Directory:       \\localhost\apache</span><br><span class="line">HomeDir Drive:        </span><br><span class="line">Logon Script:         </span><br><span class="line">Profile Path:         \\localhost\apache\profile</span><br><span class="line">Domain:               LOCALHOST</span><br><span class="line">Account desc:         </span><br><span class="line">Workstations:         </span><br><span class="line">Munged dial:          </span><br><span class="line">Logon time:           0</span><br><span class="line">Logoff time:          Wed, 06 Feb 2036 10:06:39 EST</span><br><span class="line">Kickoff time:         Wed, 06 Feb 2036 10:06:39 EST</span><br><span class="line">Password last set:    Wed, 23 Dec 2020 09:13:58 EST</span><br><span class="line">Password can change:  Wed, 23 Dec 2020 09:13:58 EST</span><br><span class="line">Password must change: never</span><br><span class="line">Last bad password   : 0</span><br><span class="line">Bad password count  : 0</span><br><span class="line">Logon hours         : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span><br></pre></td></tr></table></figure>

<p><strong>将web_data文件授权给Apache</strong></p>
<p>随后查看权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# setfacl -m u:Apache:rwx /data/web_data</span><br><span class="line">[root@localhost ~]# getfacl /data/web_data</span><br><span class="line">getfacl: Removing leading &#x27;/&#x27; from absolute path names</span><br><span class="line"><span class="meta">#</span><span class="bash"> file: data/web_data</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> owner: root</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> group: root</span></span><br><span class="line">user::rwx</span><br><span class="line">user:Apache:rwx</span><br><span class="line">group::r-x</span><br><span class="line">mask::rwx</span><br><span class="line">other::r-x</span><br></pre></td></tr></table></figure>

<p><strong>SElinux弱策略</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# setenforce 0</span><br></pre></td></tr></table></figure>

<p><strong>防火墙服务授权</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# firewall-cmd --add-service samba</span><br><span class="line">success</span><br></pre></td></tr></table></figure>

<p><strong>开启smb服务</strong></p>
<p>设置自启</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl start smb</span><br><span class="line">[root@localhost ~]# systemctl enable  smb</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/smb.service to /usr/lib/systemd/system/smb.service.</span><br></pre></td></tr></table></figure>

<p><strong>查看smb服务</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# systemctl status smb</span><br><span class="line">● smb.service - Samba SMB Daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/smb.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Wed 2020-12-23 09:17:53 EST; 48s ago</span><br><span class="line">     Docs: man:smbd(8)</span><br><span class="line">           man:samba(7)</span><br><span class="line">           man:smb.conf(5)</span><br><span class="line"> Main PID: 3810 (smbd)</span><br><span class="line">   Status: &quot;smbd: ready to serve connections...&quot;</span><br><span class="line">   CGroup: /system.slice/smb.service</span><br><span class="line">           ├─3810 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">           ├─3812 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">           ├─3813 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line">           └─3814 /usr/sbin/smbd --foreground --no-process-group</span><br><span class="line"></span><br><span class="line">Dec 23 09:17:53 localhost.localdomain systemd[1]: Starting Samba SMB Daemon...</span><br><span class="line">Dec 23 09:17:53 localhost.localdomain smbd[3810]: [2020/12/23 09:17:53.592344,  0] ../../lib/...y)</span><br><span class="line">Dec 23 09:17:53 localhost.localdomain systemd[1]: Started Samba SMB Daemon.</span><br><span class="line">Dec 23 09:17:53 localhost.localdomain smbd[3810]:   daemon_ready: daemon &#x27;smbd&#x27; finished star...ns</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show in full.</span><br></pre></td></tr></table></figure>

<p><strong>windows连接</strong></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEsmb%E6%9C%8D%E5%8A%A1/%E6%9F%A5%E7%9C%8B%E4%B8%BB%E6%9C%BA.png"></p>
<p>会弹出一个窗口，输入<strong>给smb服务配置用户</strong>这一步中新建的用户id和passwd，进入文件夹</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEsmb%E6%9C%8D%E5%8A%A1/%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9.png"></p>
<p>登陆的用户拥有该目录的rwx权，可以在此操作文件</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEsmb%E6%9C%8D%E5%8A%A1/%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6.png"></p>
<p>同时，文件会同步到linux服务器</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEsmb%E6%9C%8D%E5%8A%A1/linux%E5%90%8C%E6%AD%A5.png"></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li><p>  此次实验虚拟机为nat静态连接，ip地址设置在Vmnet8网段</p>
</li>
<li><p>  不要给/data/web_dat目录额外授权777了，<strong>如果你的pc弹窗地址无权访问，更可能是linux防火墙设置的问题，而不是共享文件夹的属性权限问题</strong></p>
</li>
<li><p>  不需要关闭windows的防火墙</p>
</li>
<li><p>  win10的这个服务也不需要开</p>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEsmb%E6%9C%8D%E5%8A%A1/win10%E8%AE%BE%E7%BD%AE.png"></p>
<ul>
<li>  跟这些东西并没有关系</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEsmb%E6%9C%8D%E5%8A%A1/win10%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE.png"></p>
<p>其实开始做这个实验时，出了些问题，百度一圈回来，找了一堆没用的建议，重做一遍发现结果是我配置文件里发布地址输错了。</p>
<hr>
<p>配置出问题了怎么办？</p>
<ul>
<li><p>  如果你的win10在警告弹窗有<strong>检测问题</strong>这个选项，记得看一下，某些时候还是挺有用的</p>
</li>
<li><p>  <code>testparm  /etc/samba/smb.conf</code>很好，可以检测你的配置文件是否“合格”</p>
</li>
<li><p>  可能只是某个步骤敲错了，回档再配一次</p>
</li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>系统迁移记录-备份</title>
    <url>/2021/01/27/xi-tong-qian-yi-ji-lu-bei-fen/</url>
    <content><![CDATA[<h1 id="系统迁移记录-备份"><a href="#系统迁移记录-备份" class="headerlink" title="系统迁移记录-备份"></a>系统迁移记录-备份</h1><p>关于系统迁移，其实有两种解决方案。</p>
<p>第一种：通过专业的分区助手等软件将整个C盘拷到新磁盘，然后再将新盘设置为C盘。这是较平滑的一种过渡方式。如果要把系统所在盘替换成新盘，再借个临时盘中转一下即可。这个方案缺点是，移动的同时C盘里的一些垃圾也迁移过去了，而且据反馈有可能会出现路径问题。具体方式可百度。</p>
<p>第二种方式：直接重装系统。我这里采用第二种，为了把一些用不到的软件完全卸载掉。</p>
<p>因为我只换了ssd，hdd还是在的，先把原ssd的资料备份到hdd。新ssd装好系统后再把hdd的资料移到ssd，最后格式化hdd来装第二个系统。所以其实我几乎不需要担心数据丢失问题，ssd只是128G，数据都在hdd，只是注册表空了后软件运行找不到路径了。</p>
<h2 id="软件名单"><a href="#软件名单" class="headerlink" title="软件名单"></a>软件名单</h2><p>且当做安利就行。划掉的就当卸载了。</p>
<h3 id="生产"><a href="#生产" class="headerlink" title="生产"></a>生产</h3><ul>
<li>  学单片机用。</li>
</ul>
<p><del>Proteus 8 Professional：单片机电路模拟</del><br><del>arm KEIL C51：ide</del></p>
<ul>
<li>  网络模拟。</li>
</ul>
<p>Cisco Packet Tracer：网络模拟(官网下载需要注册并参加课程…思科真有你的)<br>Wireshark：抓包</p>
<ul>
<li>  专业软件</li>
</ul>
<p><del>Microsoft SQL SEVER Management Sstudio ：非必要不安装，卸载是真的麻烦</del><br><del>Matlab：数字软件，非必要不安装</del><br>VSCode-win32-x64：code<br>Dev cpp：提供了gcc和g++，顺便作为一款轻量的C++语言IDE<br>visual studio：宇宙第一ide<br><del>eclipse：现在转用jb公司的产品了</del><br>JetBrains ToolBox：JB全家宝<br>IntelliJ IDEA：java code<br>IntelliJ PyCharm：python code<br>微信web开发者工具：js code<br><del>WinHex15.1SR-8：查看文件进制编码，轻量用VScode就够了</del><br><del>Fluent Terminal：转用windows Terminal</del><br>windows Terminal</p>
<ul>
<li>  虚拟机</li>
</ul>
<p>WMware Workstation Pro：虚拟机<br>xshell：连接终端<br>xftp：互传文件<br>dnplayer2：雷电安卓模拟器，注意会与wsl2冲突<br>Docker</p>
<ul>
<li>  文字</li>
</ul>
<p>Typora：码字<br>pandoc：文字格式导出插件<br>PicGo：图床<br><del>XMind：结构图</del><br>幕布：换成幕布了，懒得画图<br>office四件套<br>OneNote：笔记</p>
<ul>
<li>  爱逗比</li>
</ul>
<p>Adobe_Premiere<br>Adobe_Photoshop<br>Adobe_Audition<br>Adobe_After_Effects</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>tomcat：java servlet解析<br>Java JDK<br>python<br><del>SQL Server</del><br>Git<br>NodeJS<br>phpEnv：集成mysql，apache，php 懒人用<br>anaconda：python大杂烩<br>WSL2+Kali.exe：安全工具大杂烩<br>mingw64：gcc、g++（<a href="https://sourceforge.net/projects/mingw-w64/files/">地址</a>）</p>
<h3 id="效率插件"><a href="#效率插件" class="headerlink" title="效率插件"></a>效率插件</h3><p>Everything：文件搜索<br>QTTabBar：资源管理器增强<br>天若OCR开源版V5.0.0：OCR<br>Bandicam-Portable：截视频<br>小丸工具箱：视频压缩<br>ScreenToGif：截gif<br>Snipaste：截图<br>CClose：窗口置顶<br>Core Temp：CPU温度<br>TranslucentTB：状态栏透明<br>TrafficMonitor：流量监视<br><del>YoudaoDict：截图翻译</del><br><del>Netkeeper：一键连校园网</del></p>
<ul>
<li>  字体</li>
</ul>
<p>sarasa-gothic-ttf：windows完全支持的字体，支持设置powershell，同时支持powerline图标<br>CascadiaCode<br>JetBrainsMono<br>Monaco<br>Fira</p>
<h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><ul>
<li>  必备</li>
</ul>
<p>Dism++：系统设置集成<br>Huorong：火绒<br>图吧工具箱：系统硬件工具集成<br>PalmInput：手心输入法<br><del>PeaZip：解压缩，还带了个资源管理器</del><br>7Z：压缩工具，纯粹轻量<br>rufus：U盘制作器<br>VTDriver：雷柏外设驱动<br><del>Uninstall Tool：卸载工具</del><br>geek：卸载工具，轻量<br>potplayer：视频播放器<br>MusicPlayer2：音频播放器<br>SumatraPDF：轻量文档查看器<br> lx-music-desktop：音乐下载器<br>IDM：多线程下载器<br><del>Thunder特定版：种子下载器</del><br>xdown：aria2下载器<br>OneDrive：oneNote同步<br>v2rayN-Core：v2ray客户端<br>微PE工具箱：PE系统诊断工具<br>百度云盘：有个会员还是能用的</p>
<ul>
<li>  驱动</li>
</ul>
<p>VTDriver：鼠标驱动<br><del>GeForce Experience：显卡驱动，没用</del><br>TeamViewer：远程桌面</p>
<h3 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h3><ul>
<li>  游戏</li>
</ul>
<p>Steam<br>BATTLE<br>EPIC<br>GOG Galaxy<br>Uplay<br>LeiGod_Acc：加速器<br>Origin</p>
<ul>
<li>  通讯</li>
</ul>
<p>TIM<br>WeChat</p>
<h2 id="配置文件与插件"><a href="#配置文件与插件" class="headerlink" title="配置文件与插件"></a>配置文件与插件</h2><p>导出软件设置并备份软件的配置文件。不能导出设置的软件记录一下关键设置。<br>大部分软件的配置目录在<code>C:\Users\你的用户名\AppData\Roaming\</code>下，类似于linux的<code>/etc</code>，出于安全考虑，建议将<code>C:\Users\你的用户名</code>及以下目录全部备份，大概有10个G左右。</p>
<h3 id="火绒"><a href="#火绒" class="headerlink" title="火绒"></a>火绒</h3><p>火绒高级设置-自定义保护-文件规则：</p>
<ul>
<li>本地用户默认 ?:\Users*\AppData\Local*\User Data\Default*<br>  Chrome用户默认 ?:\Users*\AppData\Local*\Chrome\User Data\Default*<br>  window历史记录 <em>\User Data\Default\History<br>  火狐配置 ?:\Users\</em>\AppData\Roaming\Mozilla\Firefox\Profiles*</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%A4%87%E4%BB%BD/20210129192918.png"></p>
<h3 id="DISM"><a href="#DISM" class="headerlink" title="DISM++"></a>DISM++</h3><p>文件清理白名单：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%A4%87%E4%BB%BD/20210129192919.png"></p>
<h3 id="edge"><a href="#edge" class="headerlink" title="edge"></a>edge</h3><p>作为浏览器，edge和chrome可以云同步绝大多数数据，包括书签、密码、插件等，但是唯独插件配置这一项不能同步，相信chrome用户对插件的依赖是离不开了。例如：油猴订阅脚本、广告过滤订阅规则等等。建议去插件设置项里导出设置。或者直接备份全部插件：<br>edge：<code>C:\Users\17498\AppData\Local\Microsoft\Edge\User Data\Default\Extensions</code></p>
<h3 id="terminal"><a href="#terminal" class="headerlink" title="terminal"></a>terminal</h3><ul>
<li>  xftp：</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%A4%87%E4%BB%BD/20210129192920.png"></p>
<ul>
<li>  windows terminal</li>
</ul>
<blockquote>
<p>  <a href="https://mednight4.github.io/2020/12/28/win10-zhong-duan-mei-hua-zhi-bei/">Win10终端美化指北</a></p>
</blockquote>
<h3 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h3><p>一直用的手心输入法，似乎<a href="https://rime.im/">rime</a>也不错。手心设置，qq登陆账户，可备份/导入设置项和词库，有效期30天。</p>
<h3 id="Code插件"><a href="#Code插件" class="headerlink" title="Code插件"></a>Code插件</h3><p>Vscode插件：</p>
<p>路径<code>C:\Users\17498\.vscode\extensions</code></p>
<p>VS studio插件：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%A4%87%E4%BB%BD/20210129192921.png"></p>
<p>Pycharm插件：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%A4%87%E4%BB%BD/20210129192922.png"></p>
<p>Idea插件：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E7%B3%BB%E7%BB%9F%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95-%E5%A4%87%E4%BB%BD/20210129192923.png"></p>
<h3 id="游戏存档"><a href="#游戏存档" class="headerlink" title="游戏存档"></a>游戏存档</h3><p>游戏平台对大多数游戏都支持云同步，但注意只是大部分。<br>此外，steam有备份/还原功能，平滑迁移，不过需要同等大的硬盘空间。</p>
<ul>
<li>  黑魂3：<code>C:\Users\17498\AppData\Roaming\DarkSoulsIII</code> 。无云同步，存档丢了会给人删库跑路般的绝望。</li>
</ul>
]]></content>
      <categories>
        <category>装机</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机配置vsftpd服务</title>
    <url>/2021/01/03/xu-ni-ji-pei-zhi-vsftpd-fu-wu/</url>
    <content><![CDATA[<h1 id="虚拟机配置vsftpd服务"><a href="#虚拟机配置vsftpd服务" class="headerlink" title="虚拟机配置vsftpd服务"></a>虚拟机配置vsftpd服务</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><p>练习vsftpd服务器的各种配置：</p>
<ol>
<li> 使用本地yum源安装vsftpd软件</li>
<li> FTP服务器IP地址为192.168.5.10</li>
<li> 采用本地用户模式</li>
<li> 创建本地用户mednight4</li>
<li> 设置本地用户的根目录为/data/ftp_data且在目录中创建ftp_test空文件</li>
<li> 允许用户mednight4上传和下载文件</li>
<li> 锁定用户mednight4在其根目录中</li>
</ol>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>vsftpd服务程序允许三种认证方式登陆到ftp服务器上</p>
<ul>
<li><p>  匿名开放模式：任何人都可以无需密码直接登陆到ftp服务器</p>
</li>
<li><p>  本地用户模式：通过linux本地账户密码认证的模式</p>
</li>
<li><p>  虚拟用户模式：需要服务器单独建立ftp用户数据库，仅供ftp服务程序使用</p>
</li>
</ul>
<p>本次介绍前两种模式。</p>
<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><p>位置：/etc/vsftpd/vsftpd.conf</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>listen=[YES|NO]</td>
<td>是否以独立运行的方式监听服务</td>
</tr>
<tr>
<td>listen_address=IP地址</td>
<td>设置要监听的ip地址</td>
</tr>
<tr>
<td>listen_port=21</td>
<td>设置ftp服务的监听端口</td>
</tr>
<tr>
<td>download_enable=[YES|NO]</td>
<td>是否允许下载文件</td>
</tr>
<tr>
<td>userlist_enbale=[YES|NO]</td>
<td>设置用户列表为-允许-还是-禁止-操作</td>
</tr>
<tr>
<td>userlist_deny=[YES|NO]</td>
<td>设置用户列表为-允许-还是-禁止-操作</td>
</tr>
<tr>
<td>max_clients=0</td>
<td>最大客户端连接数，0位不限制</td>
</tr>
<tr>
<td>max_per_ip=0</td>
<td>同一ip的最大连接数，0位不限制</td>
</tr>
<tr>
<td>anonymous_enable=[YES|NO]</td>
<td>是否允许匿名访问</td>
</tr>
<tr>
<td>ano_upload_enable=[YES|NO]</td>
<td>是否允许匿名用户上传文件</td>
</tr>
<tr>
<td>anon_umask=022</td>
<td>匿名用户上传文件的umask值</td>
</tr>
<tr>
<td>anon_root=/var/ftp</td>
<td>匿名用户的ftp根目录</td>
</tr>
<tr>
<td>anon_mkdir_write_enable=[YES|NO]</td>
<td>是否允许匿名用户创建目录</td>
</tr>
<tr>
<td>anon_other_write_enable=[YES|NO]</td>
<td>是否开放匿名用户的其他写入权限，包括重命名、删除…</td>
</tr>
<tr>
<td>anon_max_rate=0</td>
<td>匿名用户的最大传输速率（字节/秒），0为不限制</td>
</tr>
<tr>
<td>local_enable=[YES|NO]</td>
<td>是否允许本地用户登陆ftp</td>
</tr>
<tr>
<td>local_umask=022</td>
<td>本地用户上传文件的umask值</td>
</tr>
<tr>
<td>local_root=/var/ftp</td>
<td>本地用户的ftp根目录</td>
</tr>
<tr>
<td>chroot_local_user=[YES|NO]</td>
<td>是否将用户权限禁锢在ftp目录，以保证安全</td>
</tr>
<tr>
<td>local_max_rate=0</td>
<td>本地用户最大传输速率（字节/秒），0为不限制</td>
</tr>
<tr>
<td>allow_writeable_chroot=YES</td>
<td>允许对禁锢的ftp根目录执行写入操作，而且不拒绝用户登陆请求</td>
</tr>
</tbody></table>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="匿名开放模式"><a href="#匿名开放模式" class="headerlink" title="匿名开放模式"></a>匿名开放模式</h3><p>向匿名用户开放的权限参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>anonymous_enable=YES</td>
<td>允许匿名访问模式</td>
</tr>
<tr>
<td>anon_umask=022</td>
<td>匿名用户上传文件的umask值</td>
</tr>
<tr>
<td>anon_upload_enable=YES</td>
<td>允许匿名用户上传文件</td>
</tr>
<tr>
<td>anon_mkdir_write_enable=YES</td>
<td>允许匿名用户创建用户</td>
</tr>
<tr>
<td>anon_other_write_enable=YES</td>
<td>允许匿名用户修改目录名称或删除目录</td>
</tr>
</tbody></table>
<ol>
<li> 安装ftp</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install vsftpd</span><br><span class="line">...</span><br><span class="line">Is this ok [y/d/N]: y</span><br><span class="line">...</span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure>

<ol start="2">
<li> 配置参数</li>
</ol>
<p>vsftpd命令可以查看配置参数是否出错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# ls /etc/vsftpd/</span><br><span class="line">ftpusers  user_list  vsftpd.conf  vsftpd_conf_migrate.sh</span><br><span class="line">[root@localhost /]# cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak</span><br><span class="line">[root@localhost /]# cd /etc/vsftpd/</span><br><span class="line">[root@localhost vsftpd]# cat /etc/vsftpd/vsftpd.conf.bak  | grep -v &quot;#&quot; | grep -v &quot;#$&quot; &gt; /etc/vsftpd/vsftpd.conf</span><br><span class="line">[root@localhost vsftpd]# vi /etc/vsftpd/vsftpd.conf</span><br><span class="line"></span><br><span class="line">anonymous_enable=YES</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=NO</span><br><span class="line">listen_ipv6=YES</span><br><span class="line"></span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加上下面的参数</span></span><br><span class="line">anon_umask=022</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line">~                                   </span><br><span class="line">~      </span><br><span class="line">: wq</span><br></pre></td></tr></table></figure>

<ol start="3">
<li> 防火墙打开端口20、21</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vsftpd]# firewall-cmd --add-port=20/tcp</span><br><span class="line">success</span><br><span class="line">[root@localhost vsftpd]# firewall-cmd --add-port=21/tcp</span><br><span class="line">success</span><br></pre></td></tr></table></figure>

<ol start="4">
<li> 启动服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vsftpd]# systemctl start vsftpd</span><br></pre></td></tr></table></figure>

<ol start="5">
<li> 创建一个文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost pub]# echo &quot;hello world&quot; &gt; /var/ftp/pub/hello.txt</span><br></pre></td></tr></table></figure>

<ol start="6">
<li> 连接</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEvsftpd%E6%9C%8D%E5%8A%A1/ls%E6%8B%92%E7%BB%9D.png"></p>
<p>看到ls和拉取操作失败了，</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ftp&gt; <span class="built_in">ls</span></span><br><span class="line"><span class="number">200</span> PORT command successful. Consider <span class="keyword">using</span> PASV.</span><br><span class="line"><span class="number">425</span> Failed to establish connection.</span><br></pre></td></tr></table></figure>

<p>查了一下错，<a href="http://blog.sina.com.cn/s/blog_4ce992f40101dlyl.html">朝晖的博客</a>，然后把window防火墙关了，问题解决了。</p>
<p>匿名方式就这样。</p>
<h3 id="本地用户模式"><a href="#本地用户模式" class="headerlink" title="本地用户模式"></a>本地用户模式</h3><p>向linux本地账户用户开放的权限参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>anonymous_enable=NO</td>
<td>禁止匿名访问模式</td>
</tr>
<tr>
<td>local_enable=YES</td>
<td>允许本地用户模式</td>
</tr>
<tr>
<td>write_enable=YES</td>
<td>设置可写权限</td>
</tr>
<tr>
<td>local_umask=YES</td>
<td>本地用户模式创建文件的umask值</td>
</tr>
<tr>
<td>userlist_enable=YES</td>
<td>允启用禁止用户名单，名单为ftpusers和user_list</td>
</tr>
<tr>
<td>userlist_deny=YES</td>
<td>开启用户作用名单文件功能</td>
</tr>
<tr>
<td>allow_writeable_chroot=YES</td>
<td>允许对禁锢的ftp根目录执行写入操作，而且不拒绝用户登陆请求</td>
</tr>
</tbody></table>
<ol>
<li> 安装ftp</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install vsftpd</span><br><span class="line">...</span><br><span class="line">Is this ok [y/d/N]: y</span><br><span class="line">...</span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure>

<ol start="2">
<li> 配置参数为本地用户模式</li>
</ol>
<p>vsftpd命令可以查看配置参数是否出错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# ls /etc/vsftpd/</span><br><span class="line">ftpusers  user_list  vsftpd.conf  vsftpd_conf_migrate.sh</span><br><span class="line">[root@localhost /]# cp /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak</span><br><span class="line">[root@localhost /]# cd /etc/vsftpd/</span><br><span class="line">[root@localhost vsftpd]# cat /etc/vsftpd/vsftpd.conf.bak  | grep -v &quot;#&quot; | grep -v &quot;#$&quot; &gt; /etc/vsftpd/vsftpd.conf</span><br><span class="line">[root@localhost vsftpd]# vi /etc/vsftpd/vsftpd.conf</span><br><span class="line"></span><br><span class="line">anonymous_enable=YES</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=NO</span><br><span class="line">listen_ipv6=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认开启本地用户模式，只需要将第一个参数修改为</span></span><br><span class="line">anonymous_enable=NO</span><br><span class="line">~                                   </span><br><span class="line">~      </span><br><span class="line">: wq</span><br></pre></td></tr></table></figure>

<ol start="3">
<li> 防火墙打开端口20、21</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vsftpd]# firewall-cmd --add-port=20/tcp</span><br><span class="line">success</span><br><span class="line">[root@localhost vsftpd]# firewall-cmd --add-port=21/tcp</span><br><span class="line">success</span><br></pre></td></tr></table></figure>

<ol start="4">
<li> 创建本地用户mednight4</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vsftpd]# useradd mednight4</span><br><span class="line">[root@localhost vsftpd]# passwd mednight4</span><br><span class="line">Changing password for user mednight4.</span><br><span class="line">New password: </span><br><span class="line">BAD PASSWORD: The password fails the dictionary check - it is too simplistic/systematic</span><br><span class="line">Retype new password: </span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure>

<ol start="5">
<li> 创建ftp特定目录和文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost mednight4]# mkdir -p /data/ftp_data</span><br><span class="line">[root@localhost mednight4]# echo &quot;helloworld&quot; &gt; /data/ftp_data/hello.txt</span><br></pre></td></tr></table></figure>

<ol start="5">
<li> 调整参数满足要求</li>
</ol>
<ul>
<li><p>  设置本地用户的根目录为/data/ftp_data且在目录中创建ftp_test空文件</p>
</li>
<li><p>  允许用户mednight4上传和下载文件</p>
</li>
<li><p>  锁定用户mednight4在其根目录中</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost vsftpd]# vi /etc/vsftpd/vsftpd.conf</span><br><span class="line"></span><br><span class="line">anonymous_enable=NO</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">listen=NO</span><br><span class="line">listen_ipv6=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置本地用户的根目录为/data/ftp_data</span></span><br><span class="line">local_root=/data/ftp_data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 锁定用户mednight4在其根目录中</span></span><br><span class="line">chroot_local_user=YES</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许对禁锢的ftp根目录执行写入操作</span></span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line">~                                   </span><br><span class="line">~      </span><br><span class="line">: wq</span><br></pre></td></tr></table></figure>

<ol start="6">
<li> 根目录权限全开</li>
</ol>
<p>要想用户在root所属的目录下操作文件，先把权限打开再说。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost mednight4]# chmod 777  /data/ftp_data/</span><br><span class="line">[root@localhost mednight4]# systemctl restart vsftpd</span><br></pre></td></tr></table></figure>

<ol start="7">
<li> 连接</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AEvsftpd%E6%9C%8D%E5%8A%A1/%E8%BF%9E%E6%8E%A5.png"></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="无法登陆"><a href="#无法登陆" class="headerlink" title="无法登陆"></a>无法登陆</h3><p><strong>报错</strong></p>
<p><code>500 OOPS: vsftpd: refusing to run with writable root inside chroot() Login failed.</code></p>
<p><strong>原因</strong></p>
<p>开启了<strong>将用户禁锢在根目录</strong>，目录权限包含写权限</p>
<p>从2.3.5之后，vsftpd增强了安全检查，如果用户被限定在了其主目录下，则该用户的主目录不能再具有写权限了！如果检查发现还有写权限，就会报该错误。</p>
<p><strong>解决方法</strong></p>
<ol>
<li> 在vsftpd.conf中新增allow_writeable_chroot=YES</li>
<li> 删除根目录的写权限，不过用户将不能做写相关操作</li>
</ol>
<h3 id="无法ls和get"><a href="#无法ls和get" class="headerlink" title="无法ls和get"></a>无法ls和get</h3><p><strong>报错</strong></p>
<p><code>vsftp:425 failed to establish connection</code></p>
<p><code>200 PORT command successful. Consider using PASV.</code></p>
<p><code>425 Failed to establish connection.</code></p>
<p><strong>解决办法</strong></p>
<ul>
<li>  <a href="http://blog.sina.com.cn/s/blog_4ce992f40101dlyl.html">朝晖的博客</a></li>
<li>  关闭win10防火墙</li>
</ul>
<h3 id="无法在锁定的根目录中新建文件"><a href="#无法在锁定的根目录中新建文件" class="headerlink" title="无法在锁定的根目录中新建文件"></a>无法在锁定的根目录中新建文件</h3><p><strong>原因</strong></p>
<p>检查根目录（此处是/data/ftp_data）对于用户(mednight4)的权限</p>
<p><strong>解决办法</strong></p>
<ul>
<li>  就是简单粗暴777</li>
</ul>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>超递增背包加解密基础实现</title>
    <url>/2020/11/28/chao-di-zeng-bei-bao-jia-jie-mi-ji-chu-shi-xian/</url>
    <content><![CDATA[<h1 id="超递增背包加解密基础实现"><a href="#超递增背包加解密基础实现" class="headerlink" title="超递增背包加解密基础实现"></a>超递增背包加解密基础实现</h1><blockquote>
<p>  第4章 公钥密码体制.ppt <a href="https://github.com/mednight4/Cryptography-course-ppt/blob/main/%E7%AC%AC4%E7%AB%A0%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E4%BD%93%E5%88%B6.ppt?raw=true">下载</a></p>
</blockquote>
<p>超递增背包的最后一个新加入的数 必定大于 前面的所有数的和。</p>
<p>超递增背背包的放入和取出过程，可以理解为二进制数和十进制数的互转。</p>
<p>在此就不详细写算法原理过程了，百度即可。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><code>package.py </code>仅仅实现对单个数据加密。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_package</span>(<span class="params">package</span>):</span></span><br><span class="line">    <span class="built_in">sum</span>=package[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(package)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span> &gt; package[i]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="built_in">sum</span> += package[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">1</span>:  <span class="comment"># 质数大于 1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, num):  <span class="comment"># 查看因子</span></span><br><span class="line">            <span class="keyword">if</span> (num % i) == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># print(num,&quot;/&quot;,i,&quot;=&quot;,num/i)</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selcet_M</span>(<span class="params">package</span>):</span></span><br><span class="line">    i = package[-<span class="number">1</span>] * <span class="number">2</span></span><br><span class="line">    <span class="built_in">max</span> = i + <span class="number">10</span> <span class="comment">#在这里调整 M 的区间，同时影响 W 的值，太大了程序算不来</span></span><br><span class="line">    M = random.randint(i, <span class="built_in">max</span>)</span><br><span class="line">    <span class="keyword">return</span> M</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_W</span>(<span class="params">M</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        W = random.randint(<span class="number">0</span>, M)</span><br><span class="line">        <span class="keyword">if</span> math.gcd(W, M) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> W</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pk</span>(<span class="params">package, W, M</span>):</span></span><br><span class="line">    pb_package = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> package:</span><br><span class="line">        pb_package.append(W * b % M)</span><br><span class="line">    <span class="keyword">return</span> pb_package</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>():</span></span><br><span class="line">    package = <span class="built_in">input</span>(<span class="string">&quot;请输入背包,空格分开元素，格式为1 2 4 8\n&gt; &quot;</span>)</span><br><span class="line">    package = re.split(<span class="string">r&quot; +&quot;</span>, package.strip())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(package)):</span><br><span class="line">        package[i] = <span class="built_in">int</span>(package[i])</span><br><span class="line">    print(package)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_package(package):</span><br><span class="line">        exit(<span class="string">&quot;你的输入不满足超递增背包的条件&quot;</span>)</span><br><span class="line">    M = selcet_M(package)</span><br><span class="line">    W = select_W(M)</span><br><span class="line">    public_k = get_pk(package, W, M)</span><br><span class="line">    print(<span class="string">&quot;M:&quot;</span>, M, <span class="string">&quot;\nW:&quot;</span>, W, <span class="string">&quot;\npublic_k:&quot;</span>, public_k)</span><br><span class="line">    print(<span class="string">&quot;secret_k:&quot;</span>, package, W, M)</span><br><span class="line">    message = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入待加密数字，应该小于背包容量&quot;</span>+<span class="built_in">str</span>(<span class="built_in">sum</span>(package))+<span class="string">&quot;\n&gt; &quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> message&gt;<span class="built_in">sum</span>(package):</span><br><span class="line">        exit(<span class="string">&quot;你输入的加密数字已大于背包的容纳量，请调整背包大小或者分批输入。&quot;</span>)</span><br><span class="line">    message = <span class="built_in">list</span>(<span class="built_in">bin</span>(message)[<span class="number">2</span>:].zfill(<span class="built_in">len</span>(package)))</span><br><span class="line">    print(message)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message)):</span><br><span class="line">        message[i] = <span class="built_in">int</span>(message[i])</span><br><span class="line">    cipher_li = []</span><br><span class="line">    <span class="keyword">for</span> m, k <span class="keyword">in</span> <span class="built_in">zip</span>(message, public_k):</span><br><span class="line">            cipher_li.append(m * k)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(cipher_li) % M</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_niyuan</span>(<span class="params">W, M</span>):</span></span><br><span class="line">    niyuan = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (W * niyuan) % M != <span class="number">1</span>:</span><br><span class="line">        niyuan += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> niyuan</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>():</span></span><br><span class="line">    cipher = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入解密的值\n&gt; &quot;</span>))</span><br><span class="line">    print(<span class="string">&quot;请输入私钥:W,M,package:&quot;</span>)</span><br><span class="line">    M = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;M: &quot;</span>))</span><br><span class="line">    W = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;W: &quot;</span>))</span><br><span class="line">    package = <span class="built_in">input</span>(<span class="string">&quot;package:原背包,空格分开元素，格式为1 2 4 8\n&gt; &quot;</span>)</span><br><span class="line">    package = re.split(<span class="string">r&quot; +&quot;</span>, package.strip())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(package)):</span><br><span class="line">        package[i] = <span class="built_in">int</span>(package[i])</span><br><span class="line">    print(package)</span><br><span class="line">    package_sum = get_niyuan(W, M) * cipher % M</span><br><span class="line">    print(<span class="string">&quot;package_sum&quot;</span>,package_sum)</span><br><span class="line">    text = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(package):</span><br><span class="line">        <span class="keyword">if</span> i &lt;= package_sum:</span><br><span class="line">            text.append(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            package_sum -= i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            text.append(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">reversed</span>(text)), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cipher = encode()</span><br><span class="line">    print(<span class="string">&quot;加密后的值为：&quot;</span>, cipher)</span><br><span class="line">    print(<span class="string">&quot;-&quot;</span> * <span class="number">10</span>)</span><br><span class="line">    message = decode()</span><br><span class="line">    print(<span class="string">&quot;解密后的值为：&quot;</span>, message)</span><br></pre></td></tr></table></figure>

<p>运行</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%B6%85%E9%80%92%E5%A2%9E%E8%83%8C%E5%8C%85%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%9F%BA%E7%A1%80%E5%AE%9E%E7%8E%B0/%E8%B6%85%E9%80%92%E5%A2%9E%E8%83%8C%E5%8C%85%E5%8A%A0%E5%AF%86.png"></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>现有背包<code>package=[1,2,3,6,13,15]</code></p>
<p>首先，毫无疑问的是，背包加密输入的值应该是一个整数。然后以<code>整数转二进制的类似形式</code>转为背包公钥对应的二进制序列，且序列长度应和背包长度相同。所以：<strong>输入的整数应该小于sum(package)</strong> ，否则：将所有的package元素下标置1，背包也无法容纳这个数。也就是说，输入的加密值， <strong>有区间！</strong></p>
<p>那么问题来了，怎么对文件进行背包加密呢？也许可以对文件转16进制序列，构造一个<code>sum(package) &gt; F</code>的背包，构造W和M即可。但是明显这样做的话package太小，易于破解。那么对文件转更高进制序列呢？或是还有其他方法，可以控制文件单元数据在背包区间内，然后流输入加密。</p>
<p>总之，如何用递增背包加密文件还可以深入学习一下。</p>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>配置个人图床</title>
    <url>/2020/01/22/pei-zhi-ge-ren-tu-chuang/</url>
    <content><![CDATA[<h1 id="使用PicGo-Github快速部署个人图床"><a href="#使用PicGo-Github快速部署个人图床" class="headerlink" title="使用PicGo+Github快速部署个人图床"></a>使用PicGo+Github快速部署个人图床</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1-PicGo是什么"><a href="#1-PicGo是什么" class="headerlink" title="1. PicGo是什么"></a>1. PicGo是什么</h3><p>PicGo是一款<strong>图床工具</strong>，支持微博图床，七牛云，腾讯云COS，又拍云，GitHub，阿里云OSS，SM.MS，Imgur 等8种常用图床，简单易用。</p>
<ul>
<li>简单易用<br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%AD%98%E5%9B%BE.gif"></li>
<li>复制Markdown链接<br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%A4%8D%E5%88%B6%E9%93%BE%E6%8E%A5%E6%88%90%E5%8A%9F.jpg"></li>
<li>支持的图床<br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%AE%BE%E7%BD%AE.jpg"></li>
</ul>
<h3 id="2-公共图床推荐"><a href="#2-公共图床推荐" class="headerlink" title="2. 公共图床推荐"></a>2. 公共图床推荐</h3><ul>
<li><a href="https://chrome.google.com/webstore">微博图床</a> : 封装成chrome插件，比较方便</li>
<li><a href="https://imgur.com/">imgur</a></li>
<li><a href="https://sm.ms/">sm.ms</a> </li>
<li><a href="https://www.superbed.cn/">聚合图床</a></li>
<li><a href="https://imgchr.com/">路过图床</a> : 不允许使用梯子</li>
<li>。。。</li>
</ul>
<h2 id="二、快速部署"><a href="#二、快速部署" class="headerlink" title="二、快速部署"></a>二、快速部署</h2><p>网上有很多教程，所以就简短说明一下可能会踩的坑</p>
<blockquote>
<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html">参考PicGo官方配置手册</a></p>
</blockquote>
<h3 id="1-安装PicGo"><a href="#1-安装PicGo" class="headerlink" title="1. 安装PicGo"></a>1. 安装PicGo</h3><blockquote>
<p><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo项目地址</a></p>
</blockquote>
<h3 id="2-准备GitHub仓库"><a href="#2-准备GitHub仓库" class="headerlink" title="2. 准备GitHub仓库"></a>2. 准备GitHub仓库</h3><p>这里我干脆直接新建了一个专门用做图床的仓库</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE.jpg"></p>
<ul>
<li>注意仓库必须设置为公开</li>
</ul>
<h3 id="3-生成-token"><a href="#3-生成-token" class="headerlink" title="3. 生成 token"></a>3. 生成 <em>token</em></h3><p>在 GitHub 上生成一个 <em>token</em> 以便 PicGo 操作我们的仓库，来到个人中心，选择 <em>Developer settings</em> 就能看到 <em>Personal access tokens</em>，我们在这里创建需要的 <em>token</em>。</p>
<h4 id="进设置"><a href="#进设置" class="headerlink" title="进设置"></a>进设置</h4><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E8%AE%BE%E7%BD%AE.jpg"></p>
<h4 id="创立token"><a href="#创立token" class="headerlink" title="创立token"></a>创立<em>token</em></h4><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%88%9B%E7%AB%8Btokens.jpg"></p>
<h4 id="勾repo"><a href="#勾repo" class="headerlink" title="勾repo"></a>勾repo</h4><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%8B%BErepo.jpg"></p>
<h4 id="记录token"><a href="#记录token" class="headerlink" title="记录token"></a>记录token</h4><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%AE%B0%E5%BD%95token.jpg"></p>
<ul>
<li>建议把token记好</li>
</ul>
<h3 id="4-设置PicGo"><a href="#4-设置PicGo" class="headerlink" title="4. 设置PicGo"></a>4. 设置PicGo</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/picgo%E8%AE%BE%E7%BD%AE.jpg"></p>
<ul>
<li>设定仓库名的时候，是按照“账户名/仓库名的格式填写”，<strong>不能带空格</strong></li>
<li>分支名填写<em>master</em>即可</li>
<li>将刚才的<em>token</em>贴在<em>设定Token</em></li>
<li><em>指定储存路径</em>可不写，写了的话会在<em>repository</em>下创建一个与之对应的文件夹</li>
<li>自定义域名的作用是，在上传图片后成功后，PicGo会生成“自定义域名+上传的图片名”形式的访问链接，将其放到剪切板。这是格式：   <code>https://raw.githubusercontent.com/用户名/项目名/分支名</code></li>
<li>一般可以不写自定义域名</li>
</ul>
<h3 id="5-其他说明"><a href="#5-其他说明" class="headerlink" title="5. 其他说明"></a>5. 其他说明</h3><ol>
<li>建议设置一下热键</li>
<li>这个工具的作用是<strong>把本地图片推到仓库去</strong>，默认不同步删除操作。即<ul>
<li>将PicGo相册的图片删除后，仓库里的图片不会咋样；</li>
<li>直接把仓库删了,PicGo相册里的图片也暂时不会消失。当然，链接会挂。<br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%90%8C%E6%AD%A5.jpg"></li>
</ul>
</li>
<li>PicGo支持扩展<ul>
<li><a href="https://github.com/zWingz/picgo-plugin-github-plus">githubPlus插件地址</a></li>
</ul>
</li>
<li>如果遇到这种无法显示的问题：<ul>
<li>图片外链能够正常打开</li>
<li>应用程序的相册无法显示<br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E7%9B%B8%E5%86%8C%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA.jpg"></li>
<li>点击单张图片，稍加加载之后无法显示<br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E9%85%8D%E7%BD%AE%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA.gif"><br>…大概率只是网不好…毕竟国内直连Github也不是很稳定，挂个代理试试</li>
</ul>
</li>
<li>介于以上原因，我还是文章图片一起推好了…:first_quarter_moon:</li>
</ol>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>AES加解密基础实现</title>
    <url>/2020/11/11/aes-jia-jie-mi-ji-chu-shi-xian/</url>
    <content><![CDATA[<h1 id="AES加解密基础实现"><a href="#AES加解密基础实现" class="headerlink" title="AES加解密基础实现"></a>AES加解密基础实现</h1><blockquote>
<p>第3章 分组密码.ppt <a href="https://github.com/mednight4/Cryptography-course-ppt/blob/main/%E7%AC%AC3%E7%AB%A0%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81.ppt?raw=true">下载</a></p>
<p>课本参考：现代密码学(第四版) 杨波编著 清华大学出版社 P58</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>非常让人恼火的一个加密算法。</p>
<p>书上介绍了下GF(2<sup>8</sup>)有限域，随后AES过程混着伪C代码讲完了，讲得很细但是不形象。所以照着课堂上的PPT敲的，边看别写，一页讲一个步骤敲一个函数，慢慢把整个加密过程敲出来了。一轮下来的数据结构是按照矩阵存的，当时对numpy这个库不是很熟，所以代码里矩阵没有用numpy对象存，单纯地套几个列表。</p>
<p>对了，<strong>列表填入矩阵是按列填入的，填满一列后填第二列…直到填满整个矩阵</strong>。所以看到代码里对矩阵反复转置移位什么的，当没看到就行了，嗯，就是这样。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><code>AES.py</code></p>
<p>仅由加密部分，本想实现128,192,256，另外两个会error，有时间再改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dec2bin</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;0~15整数转二进制字符串</span></span><br><span class="line"><span class="string">    返回的是四位二进制字符串 4-&gt;0100&quot;&quot;&quot;</span></span><br><span class="line">    bit = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">        bit.insert(<span class="number">0</span>, <span class="built_in">str</span>(n % <span class="number">2</span>))</span><br><span class="line">        n = <span class="built_in">int</span>(n / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(bit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex2bin</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;十六进制字符串转二进制字符串&quot;&quot;&quot;</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)):</span><br><span class="line">        result.extend(dec2bin(<span class="built_in">int</span>(text[i], <span class="number">16</span>)))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin2hex</span>(<span class="params">text</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;二进制字符串转十六进制字符串&quot;&quot;&quot;</span></span><br><span class="line">    result = []</span><br><span class="line">    q = <span class="built_in">len</span>(text) // <span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(q):</span><br><span class="line">        dec = <span class="built_in">int</span>(text[<span class="number">4</span> * i]) * <span class="number">8</span> + <span class="built_in">int</span>(text[<span class="number">4</span> * i + <span class="number">1</span>]) * <span class="number">4</span> + \</span><br><span class="line">              <span class="built_in">int</span>(text[<span class="number">4</span> * i + <span class="number">2</span>]) * <span class="number">2</span> + <span class="built_in">int</span>(text[<span class="number">4</span> * i + <span class="number">3</span>]) * <span class="number">1</span></span><br><span class="line">        x = <span class="built_in">hex</span>(dec)[<span class="number">2</span>:].upper()</span><br><span class="line">        result.extend(x)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>(<span class="params">bit1, bit2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;比特字符串异或运算&quot;&quot;&quot;</span></span><br><span class="line">    xor_result = [<span class="string">&#x27;&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bit1))]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bit1)):</span><br><span class="line">        xor_result[i] = <span class="built_in">str</span>(<span class="built_in">int</span>(bit1[i]) ^ <span class="built_in">int</span>(bit2[i]))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(xor_result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">left_move</span>(<span class="params"><span class="built_in">bin</span>, step</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;循环左移,step为左移位数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bin</span>[step:] + <span class="built_in">bin</span>[:step]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x_time</span>(<span class="params"><span class="built_in">bin</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;x乘  x *b(x)=xtime(b)&quot;&quot;&quot;</span></span><br><span class="line">    result = left_move(<span class="built_in">bin</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> result[-<span class="number">1</span>] != <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        result = result[:<span class="number">3</span>] + <span class="built_in">str</span>(<span class="number">1</span> ^ <span class="built_in">int</span>(result[<span class="number">3</span>])) + <span class="built_in">str</span>(<span class="number">1</span> ^ <span class="built_in">int</span>(result[<span class="number">4</span>])) + result[<span class="number">5</span>] + <span class="built_in">str</span>(<span class="number">1</span> ^ <span class="built_in">int</span>(result[<span class="number">6</span>])) + \</span><br><span class="line">                 result[<span class="number">7</span>]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x_sqr_y_time</span>(<span class="params"><span class="built_in">bin</span>, sqr</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;次方x乘  x2*b(x)=xtime(xtime(b))  sqr表示次方</span></span><br><span class="line"><span class="string">    实际上这个函数并不需要，因为cx=(03)x3+(01)x2+(01)x+(02)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(sqr):</span><br><span class="line">        <span class="built_in">bin</span> = x_time(<span class="built_in">bin</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bin</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi</span>(<span class="params">bin1, bin2</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;倍乘函数&quot;&quot;&quot;</span></span><br><span class="line">    sqr_list, <span class="built_in">bin</span>, result = [], [], <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bin1)):</span><br><span class="line">        <span class="keyword">if</span> bin1[i] == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            sqr_list.append(<span class="built_in">len</span>(bin1) - i - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sqr_list:</span><br><span class="line">        <span class="keyword">return</span> xor(bin2, bin1)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sqr_list)):</span><br><span class="line">        <span class="built_in">bin</span>.append(x_sqr_y_time(bin2, sqr_list[i]))</span><br><span class="line">    result = <span class="built_in">bin</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>) - <span class="number">1</span>):</span><br><span class="line">        result = xor(result, <span class="built_in">bin</span>[i + <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matrix_str</span>(<span class="params"><span class="built_in">bin</span>, col</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;将原始的01字符列转化为 4行Nb列的矩阵 矩阵一个单位是8bit&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 矩阵填数是按照一列一列填的</span></span><br><span class="line">    b_unit = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(<span class="built_in">bin</span>), <span class="number">8</span>):</span><br><span class="line">        b_unit.append(<span class="built_in">bin</span>[i:(i + <span class="number">8</span>)])</span><br><span class="line">    <span class="keyword">return</span> matrix_li(b_unit, col)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">matrix_li</span>(<span class="params">b_unit, col</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;将8bit单位的列表转化为 4行row列的矩阵 矩阵一个单位是8bit&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># print(&quot;b_unit:&quot;,b_unit)</span></span><br><span class="line">    b_list = []</span><br><span class="line">    count, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> count &lt; <span class="built_in">len</span>(b_unit):</span><br><span class="line">        row = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(col):</span><br><span class="line">            <span class="comment"># print(j)</span></span><br><span class="line">            row.append(b_unit[j])</span><br><span class="line">            j += col</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        j -= <span class="built_in">len</span>(b_unit) - <span class="number">1</span></span><br><span class="line">        b_list.append(row)</span><br><span class="line">    <span class="keyword">return</span> b_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;明文和密钥&quot;&quot;&quot;</span></span><br><span class="line">message = <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;0&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)])</span><br><span class="line">key = <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;1&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)])  <span class="comment"># 128 192 256</span></span><br><span class="line"><span class="comment"># message = hex2bin(&quot;3243F6A8885A308D313198A2E0370734&quot;)</span></span><br><span class="line"><span class="comment"># key = hex2bin(&quot;2b7e151628aed2a6abf7158809cf4f3c&quot;)</span></span><br><span class="line">Nb = <span class="built_in">len</span>(message) // <span class="number">32</span>  <span class="comment"># 明文一行的单元个数 一个单元8位 4.6.8</span></span><br><span class="line">Nk = <span class="built_in">len</span>(key) // <span class="number">32</span>  <span class="comment"># 密文一行的单元个数    4.6.8</span></span><br><span class="line">Nr = (<span class="keyword">lambda</span> Nb, Nk: Nb + <span class="number">6</span> <span class="keyword">if</span> Nb &gt; Nk <span class="keyword">else</span> Nk + <span class="number">6</span>)(Nb, Nk)  <span class="comment"># 迭代轮数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;S盒加密&quot;&quot;&quot;</span></span><br><span class="line">sbox = (<span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>,</span><br><span class="line">        <span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>,</span><br><span class="line">        <span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">        <span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>,</span><br><span class="line">        <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>,</span><br><span class="line">        <span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>, <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>,</span><br><span class="line">        <span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>,</span><br><span class="line">        <span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>, <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>,</span><br><span class="line">        <span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">        <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>,</span><br><span class="line">        <span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>,</span><br><span class="line">        <span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>, <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>,</span><br><span class="line">        <span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>, <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>,</span><br><span class="line">        <span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>,</span><br><span class="line">        <span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>,</span><br><span class="line">        <span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byte_sub</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;给8位二进制数进行s盒字节代换&quot;&quot;&quot;</span></span><br><span class="line">    x, y = <span class="built_in">int</span>(num[:<span class="number">4</span>], <span class="number">2</span>), <span class="built_in">int</span>(num[<span class="number">4</span>:], <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bin</span>(sbox[<span class="number">16</span> * x + y])[<span class="number">2</span>:].zfill(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_Ci</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Ci(Ci,Nb)行移位字节数，抱歉我找不到规律了，直接抄表&quot;&quot;&quot;</span></span><br><span class="line">    Ci = &#123;</span><br><span class="line">        (<span class="number">0</span>, <span class="number">4</span>): <span class="number">0</span>, (<span class="number">1</span>, <span class="number">4</span>): <span class="number">1</span>, (<span class="number">2</span>, <span class="number">4</span>): <span class="number">2</span>, (<span class="number">3</span>, <span class="number">4</span>): <span class="number">3</span>,</span><br><span class="line">        (<span class="number">0</span>, <span class="number">4</span>): <span class="number">0</span>, (<span class="number">1</span>, <span class="number">6</span>): <span class="number">1</span>, (<span class="number">2</span>, <span class="number">6</span>): <span class="number">2</span>, (<span class="number">3</span>, <span class="number">6</span>): <span class="number">3</span>,</span><br><span class="line">        (<span class="number">0</span>, <span class="number">4</span>): <span class="number">0</span>, (<span class="number">1</span>, <span class="number">8</span>): <span class="number">1</span>, (<span class="number">2</span>, <span class="number">8</span>): <span class="number">3</span>, (<span class="number">3</span>, <span class="number">8</span>): <span class="number">4</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Ci[i, Nb]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift_row</span>(<span class="params">matrix</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;行移位：将状态矩阵的每行进行循环左移&quot;&quot;&quot;</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix)):</span><br><span class="line">        result.append(left_move(matrix[i], get_Ci(i)))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mix_column</span>(<span class="params">matrix</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;列混合常数 cx=(03)x3+(01)x2+(01)x+(02)&quot;&quot;&quot;</span></span><br><span class="line">    b0, b1, b2, b3 = [<span class="string">&quot;00000010&quot;</span>, <span class="string">&quot;00000001&quot;</span>, <span class="string">&quot;00000001&quot;</span>, <span class="string">&quot;00000011&quot;</span>]  <span class="comment"># 次幂依次为x0,x1,x2,x3</span></span><br><span class="line">    col_c = []</span><br><span class="line">    <span class="keyword">for</span> a0, a1, a2, a3 <span class="keyword">in</span> <span class="built_in">zip</span>(matrix[<span class="number">0</span>], matrix[<span class="number">1</span>], matrix[<span class="number">2</span>], matrix[<span class="number">3</span>]):</span><br><span class="line">        col_c.append(xor(xor(xor(multi(a0, b0), multi(a3, b1)), multi(a2, b2)), multi(a1, b3)))</span><br><span class="line">        col_c.append(xor(xor(xor(multi(a1, b0), multi(a0, b1)), multi(a3, b2)), multi(a2, b3)))</span><br><span class="line">        col_c.append(xor(xor(xor(multi(a2, b0), multi(a1, b1)), multi(a0, b2)), multi(a3, b3)))</span><br><span class="line">        col_c.append(xor(xor(xor(multi(a3, b0), multi(a2, b1)), multi(a1, b2)), multi(a0, b3)))</span><br><span class="line">    i, count, result = <span class="number">0</span>, <span class="number">0</span>, [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Nb)]</span><br><span class="line">    <span class="keyword">while</span> count &lt; <span class="built_in">len</span>(col_c):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(Nk):</span><br><span class="line">            result[count // Nk].append(col_c[i])</span><br><span class="line">            <span class="comment"># print(&quot;i&quot;,i)</span></span><br><span class="line">            i += <span class="number">4</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        i -= <span class="built_in">len</span>(col_c) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_round_key</span>(<span class="params">message, key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;将状态矩阵与子密钥矩阵的对应字节进行逐比特异或 row(4) * col(4,6,8)&quot;&quot;&quot;</span></span><br><span class="line">    result, result_row = [], []</span><br><span class="line">    <span class="keyword">for</span> m_row, k_row <span class="keyword">in</span> <span class="built_in">zip</span>(message, key):</span><br><span class="line">        <span class="keyword">for</span> m_unit, k_unit <span class="keyword">in</span> <span class="built_in">zip</span>(m_row, k_row):</span><br><span class="line">            result_row.append(xor(m_unit, k_unit))</span><br><span class="line">        result.append(result_row)</span><br><span class="line">        result_row = []</span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_RC</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;根据Nb生成RC 128位、196位、256位的明文RC对应10,12,14个二进制队&quot;&quot;&quot;</span></span><br><span class="line">    result = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Nr)]</span><br><span class="line">    result[<span class="number">0</span>] = hex2bin(<span class="string">&quot;01&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, Nr):</span><br><span class="line">        result[i] = x_time(result[i - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RC = build_RC()  <span class="comment"># RC的值 2进制字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_Rcon</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Rcon常量，Rcon每个元素都是2进制的&quot;&quot;&quot;</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Nr):</span><br><span class="line">        result.append([RC[i], <span class="string">&#x27;00000000&#x27;</span>, <span class="string">&#x27;00000000&#x27;</span>, <span class="string">&#x27;00000000&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Rcon = build_Rcon()  <span class="comment"># Rcon的值 2进制字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">T</span>(<span class="params">W, nr</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;扩展密匙里的T运算,输入的数为 8位二进制字符*4</span></span><br><span class="line"><span class="string">    nr表示轮数，从第零轮开始&quot;&quot;&quot;</span></span><br><span class="line">    W = left_move(W, <span class="number">1</span>)</span><br><span class="line">    sub_li, result = [], []</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> W:</span><br><span class="line">        sub_li.append(byte_sub(<span class="built_in">str</span>))</span><br><span class="line">    <span class="keyword">for</span> li, r <span class="keyword">in</span> <span class="built_in">zip</span>(sub_li, Rcon[nr]):</span><br><span class="line">        result.append(xor(li, r))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_expansion</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;密钥扩展，Nk&lt;=6和Nk&gt;6又不同的扩展方法&quot;&quot;&quot;</span></span><br><span class="line">    W = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Nb * (Nr + <span class="number">1</span>))]</span><br><span class="line">    matrix_key = matrix_str(key, Nk)</span><br><span class="line">    print(matrix_key)</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(Nk):  <span class="comment"># row的值可能为4,6,8</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(matrix_key)):</span><br><span class="line">            W[col].append(matrix_key[i][col])</span><br><span class="line">    <span class="keyword">if</span> Nk &lt;= <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Nk, <span class="built_in">len</span>(W)):</span><br><span class="line">            temp = W[i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> i % Nk == <span class="number">0</span>:</span><br><span class="line">                temp = T(W[i - <span class="number">1</span>], i // Nk - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(W[i - Nk], temp):</span><br><span class="line">                W[i].append(xor(x, y))</span><br><span class="line">    <span class="keyword">if</span> Nk &gt; <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Nk, <span class="built_in">len</span>(W)):</span><br><span class="line">            temp = W[i - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> i % Nk == <span class="number">0</span>:</span><br><span class="line">                temp = T(W[i - <span class="number">1</span>], i // Nk - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> i % Nk == <span class="number">4</span>:</span><br><span class="line">                sub_li = []</span><br><span class="line">                <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> temp:</span><br><span class="line">                    sub_li.append(byte_sub(<span class="built_in">str</span>))</span><br><span class="line">                temp = sub_li</span><br><span class="line">            <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(W[i - Nk], temp):</span><br><span class="line">                W[i].append(xor(x, y))</span><br><span class="line">    <span class="comment"># print(len(W), len(W) / 4)</span></span><br><span class="line">    <span class="comment"># 将每一轮的密钥矩阵转置</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(W), Nk):</span><br><span class="line">        temp = W[i:i + Nk]</span><br><span class="line">        extend_temp = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> temp:</span><br><span class="line">            extend_temp.extend(i)</span><br><span class="line">        result.append(matrix_li(extend_temp, Nk))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">round_bin2hex</span>(<span class="params"><span class="built_in">round</span></span>):</span></span><br><span class="line">    row_li, result = [], []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">round</span>:</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> row:</span><br><span class="line">            row_li.append(bin2hex(col))</span><br><span class="line">        result.append(row_li)</span><br><span class="line">        row_li = []</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>(<span class="params">message, key</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;加密函数&quot;&quot;&quot;</span></span><br><span class="line">    key = key_expansion(key)</span><br><span class="line">    message = matrix_str(message, Nb)</span><br><span class="line">    <span class="comment"># &quot;因为debug滴完了还是数不清一堆的0101是对是错，所以加了很多的print&quot;</span></span><br><span class="line">    print(<span class="string">&quot;message\n&quot;</span>, round_bin2hex(message), <span class="string">&quot;\n------------&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;key[0]\n&quot;</span>, round_bin2hex(key[<span class="number">0</span>]), <span class="string">&quot;\n------------&quot;</span>)</span><br><span class="line">    <span class="built_in">round</span> = add_round_key(message, key[<span class="number">0</span>])</span><br><span class="line">    print(<span class="string">&quot;B1\n&quot;</span>, round_bin2hex(<span class="built_in">round</span>), <span class="string">&quot;\n------------&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(Nr):</span><br><span class="line">        replace_row, replace_matrix = [], []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">round</span>:</span><br><span class="line">            <span class="keyword">for</span> unit <span class="keyword">in</span> row:</span><br><span class="line">                replace_row.append(byte_sub(unit))</span><br><span class="line">            replace_matrix.append(replace_row)</span><br><span class="line">            replace_row = []</span><br><span class="line">        <span class="built_in">round</span> = replace_matrix</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&quot;byte_sub\n&quot;</span>, round_bin2hex(<span class="built_in">round</span>), <span class="string">&quot;\n------------&quot;</span>)</span><br><span class="line">        <span class="built_in">round</span> = shift_row(<span class="built_in">round</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&quot;shift_row\n&quot;</span>, round_bin2hex(<span class="built_in">round</span>), <span class="string">&quot;\n------------&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> i == Nr - <span class="number">1</span>:</span><br><span class="line">            <span class="built_in">round</span> = mix_column(<span class="built_in">round</span>)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">&quot;mix_column\n&quot;</span>, round_bin2hex(<span class="built_in">round</span>), <span class="string">&quot;\n------------&quot;</span>)</span><br><span class="line">            print(<span class="string">&quot;key[1]\n&quot;</span>, round_bin2hex(key[<span class="number">1</span>]), <span class="string">&quot;\n------------&quot;</span>)</span><br><span class="line">        <span class="built_in">round</span> = add_round_key(<span class="built_in">round</span>, key[i + <span class="number">1</span>])</span><br><span class="line">        print(<span class="string">&quot;add_round_key&quot;</span>,i,<span class="string">&quot;\n&quot;</span>, round_bin2hex(<span class="built_in">round</span>), <span class="string">&quot;\n------------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> round_bin2hex(<span class="built_in">round</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;加密结果：&quot;</span>, encode(message, key))</span><br><span class="line"></span><br><span class="line">jump_text = <span class="number">0</span>  <span class="comment"># 测试函数功能</span></span><br><span class="line"><span class="comment"># print(hex2bin(&quot;ba&quot;))</span></span><br><span class="line"><span class="comment"># print(bin2hex(&quot;10111010&quot;))</span></span><br><span class="line"><span class="comment"># print(dec2bin(20))</span></span><br><span class="line"><span class="comment"># print(x_time(&quot;10000000&quot;))</span></span><br><span class="line"><span class="comment"># print(x_sqr_y_time(&quot;10000000&quot;, 0))</span></span><br><span class="line"><span class="comment"># print(bin2hex(multi(hex2bin(&quot;57&quot;), hex2bin(&quot;13&quot;))))</span></span><br><span class="line"><span class="comment"># print(Nr(4,6))</span></span><br><span class="line"><span class="comment"># print(byte_sub(&quot;00010001&quot;))</span></span><br><span class="line"><span class="comment"># print(round_bin2hex(matrix_str(message,Nb)))</span></span><br><span class="line"><span class="comment"># print(shift_row(matrix_str(message,Nb)))</span></span><br><span class="line"><span class="comment"># print(mix_column(matrix_str(message,Nb)))</span></span><br><span class="line"><span class="comment"># print(add_round_key(matrix_str(message,Nb),matrix_str(key,Nb)))</span></span><br><span class="line"><span class="comment"># ---------</span></span><br><span class="line"><span class="comment"># T函数 应该输出79 C5 7A 91</span></span><br><span class="line"><span class="comment"># w3 = [hex2bin(&quot;ac&quot;), hex2bin(&quot;c1&quot;), hex2bin(&quot;07&quot;), hex2bin(&quot;bd&quot;)]</span></span><br><span class="line"><span class="comment"># for i in T(w3,0):</span></span><br><span class="line"><span class="comment">#     print(bin2hex(i),end=&quot; &quot;)</span></span><br><span class="line"><span class="comment"># ---------</span></span><br><span class="line"><span class="comment"># RC生成值 RC = &#123;00, 01, 02, 04, 08, 10, 20, 40, 80, 1B, 36&#125;</span></span><br><span class="line"><span class="comment"># for i in RC:</span></span><br><span class="line"><span class="comment">#     print(bin2hex(i),end=&quot; &quot;)</span></span><br><span class="line"><span class="comment"># ---------</span></span><br><span class="line"><span class="comment"># Rcon生成值</span></span><br><span class="line"><span class="comment"># print(round_bin2hex(Rcon))</span></span><br><span class="line"><span class="comment"># print(key_expansion(key))</span></span><br></pre></td></tr></table></figure>

<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>这是128位的，196位和256位似乎有bug，但我暂时没时间调。</p>
<p>在上面的代码里，你可以看到：</p>
<ul>
<li><p>矩阵已然是按列存入，之后跑列混合函数，又需要将每一列的数据拉出来做倍乘。也就是说，比起按行填入矩阵时一个下标就能搞定的数据提取，我需要用两个循环来把每一个元素做遍历，再将一列数据存入到一个新列表里…</p>
</li>
<li><p>c(x)=(03)x3+(01)x2+(01)x+(02)</p>
<p>GF(2<sup>8</sup>)有限域概念里提到<strong>x<sup>y</sup>time</strong>，例如x<sup>2</sup>b(x)=xtime( xtime(b) )函数，在后续根本用不到，因为最高也只有<br>x<sup>1</sup>b(x)次幂，即xtime()这一个函数就够了。</p>
<p>大费周章地用两个变量进行多项式相乘也没必要，因为最终给出的c(x)是一个常数多项式</p>
</li>
</ul>
<p>总而言之，照着这个教程PPT写出的代码各种复杂冗余绕来绕去，我最后自己都被自己的代码逗笑了。</p>
<p>可以考虑的优化方法有：</p>
<ol>
<li><p>使用按行填入矩阵的方式，此时直接用矩阵的行代表列，省去遍历矩阵取列元素的步骤。使用矩阵的最大好处是函数的功能显得比较清晰，传入特定的数据类型参数，返回特定的数据类型值。同时控制台调试代码也人性化一些。当然，自己对一个列表套几个框框肯定不是真正的矩阵，不仅不能优化算法反而有可能加了时间复杂度。</p>
</li>
<li><p>不使用矩阵的数据结构，改用线性的列表进行操作，下标访问即可，省去各种转倒腾挪。要求数学不错。</p>
</li>
<li><p>不需要将公式定理写的一板一眼，能省则省。固定的结果直接定义好就行了，像通过完整的公式套上固定的常量进一步得出值这样的做法，应该是说明书教科书做的内容，实际应用里完全没有必要。</p>
</li>
<li><p>导入numpy，一行搞定各种花里胡哨的要求，代码清晰跑得飞快，码字人省出大量for…in数下标的时间。</p>
</li>
</ol>
<p>对了，对C版本感兴趣的可以看这位老哥的<a href="https://github.com/dhuertas/AES/blob/master/aes.c">AES/aes.c at master · dhuertas/AES (github.com)</a>，C实现难度比python更大，但毫无疑问效率会更高。不过我没跑过就是了。</p>
<p>对Java实现感兴趣的话可以看这位老哥的<a href="https://github.com/szluyu99/Encryption-And-Decryption-By-Yu/tree/master/src/encryption">Encryption-And-Decryption-By-Yu/src/encryption at master · szluyu99/Encryption-And-Decryption-By-Yu (github.com)</a>，这老哥比较骚，基本密码学课程教的全来了，还写了一个GUI，着实顶呱呱。</p>
<p><strong>别人的代码，交个作业救急：</strong></p>
<p><a href="https://www.cnblogs.com/Kerne0/p/5067878.html">Python 实现AES算法 - Kerne0 - 博客园 (cnblogs.com)</a></p>
<p>写的比我好，底层数据应该就是确确实实的整数，计算机视作二进制计算。而不是我的’0’,’1’,’0’,’1’假序列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AESE</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, blk, key, Nr</span>):</span></span><br><span class="line">        self.blk = blk</span><br><span class="line">        self.key = key</span><br><span class="line">        self.Nr = Nr</span><br><span class="line">        self.sbox = (<span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>,</span><br><span class="line">                     <span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>,</span><br><span class="line">                     <span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">                     <span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>,</span><br><span class="line">                     <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>,</span><br><span class="line">                     <span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>, <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>,</span><br><span class="line">                     <span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>,</span><br><span class="line">                     <span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>, <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>,</span><br><span class="line">                     <span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">                     <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>,</span><br><span class="line">                     <span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>,</span><br><span class="line">                     <span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>, <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>,</span><br><span class="line">                     <span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>, <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>,</span><br><span class="line">                     <span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>,</span><br><span class="line">                     <span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>,</span><br><span class="line">                     <span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># xtime process</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">xtime</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">0x80</span>):</span><br><span class="line">            <span class="keyword">return</span> (((x &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1b</span>) &amp; <span class="number">0xff</span>)</span><br><span class="line">        <span class="keyword">return</span> x &lt;&lt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># MixColumns: Process the entire block</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">MixColumns</span>(<span class="params">self</span>):</span></span><br><span class="line">        tmp = [<span class="number">0</span> <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        xt = [<span class="number">0</span> <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            xt[<span class="number">0</span>] = self.xtime(self.blk[n])</span><br><span class="line">            xt[<span class="number">1</span>] = self.xtime(self.blk[n + <span class="number">1</span>])</span><br><span class="line">            xt[<span class="number">2</span>] = self.xtime(self.blk[n + <span class="number">2</span>])</span><br><span class="line">            xt[<span class="number">3</span>] = self.xtime(self.blk[n + <span class="number">3</span>])</span><br><span class="line">            tmp[<span class="number">0</span>] = xt[<span class="number">0</span>] ^ xt[<span class="number">1</span>] ^ self.blk[n + <span class="number">1</span>] ^ self.blk[n + <span class="number">2</span>] ^ self.blk[n + <span class="number">3</span>]</span><br><span class="line">            tmp[<span class="number">1</span>] = self.blk[n] ^ xt[<span class="number">1</span>] ^ xt[<span class="number">2</span>] ^ self.blk[n + <span class="number">2</span>] ^ self.blk[n + <span class="number">3</span>]</span><br><span class="line">            tmp[<span class="number">2</span>] = self.blk[n] ^ self.blk[n + <span class="number">1</span>] ^ xt[<span class="number">2</span>] ^ xt[<span class="number">3</span>] ^ self.blk[n + <span class="number">3</span>]</span><br><span class="line">            tmp[<span class="number">3</span>] = xt[<span class="number">0</span>] ^ self.blk[n] ^ self.blk[n + <span class="number">1</span>] ^ self.blk[n + <span class="number">2</span>] ^ xt[<span class="number">3</span>]</span><br><span class="line">            self.blk[n] = tmp[<span class="number">0</span>]</span><br><span class="line">            self.blk[n + <span class="number">1</span>] = tmp[<span class="number">1</span>]</span><br><span class="line">            self.blk[n + <span class="number">2</span>] = tmp[<span class="number">2</span>]</span><br><span class="line">            self.blk[n + <span class="number">3</span>] = tmp[<span class="number">3</span>]</span><br><span class="line">            n = n + <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ShiftRows:Shifts the entire block</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ShiftRows</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 2nd row</span></span><br><span class="line">        t = self.blk[<span class="number">1</span>]</span><br><span class="line">        self.blk[<span class="number">1</span>] = self.blk[<span class="number">5</span>]</span><br><span class="line">        self.blk[<span class="number">5</span>] = self.blk[<span class="number">9</span>]</span><br><span class="line">        self.blk[<span class="number">9</span>] = self.blk[<span class="number">13</span>]</span><br><span class="line">        self.blk[<span class="number">13</span>] = t</span><br><span class="line">        <span class="comment"># 3nd row</span></span><br><span class="line">        t = self.blk[<span class="number">2</span>]</span><br><span class="line">        self.blk[<span class="number">2</span>] = self.blk[<span class="number">10</span>]</span><br><span class="line">        self.blk[<span class="number">10</span>] = t</span><br><span class="line">        t = self.blk[<span class="number">6</span>]</span><br><span class="line">        self.blk[<span class="number">6</span>] = self.blk[<span class="number">14</span>]</span><br><span class="line">        self.blk[<span class="number">14</span>] = t</span><br><span class="line">        <span class="comment"># 4nd row</span></span><br><span class="line">        t = self.blk[<span class="number">15</span>]</span><br><span class="line">        self.blk[<span class="number">15</span>] = self.blk[<span class="number">11</span>]</span><br><span class="line">        self.blk[<span class="number">11</span>] = self.blk[<span class="number">7</span>]</span><br><span class="line">        self.blk[<span class="number">7</span>] = self.blk[<span class="number">3</span>]</span><br><span class="line">        self.blk[<span class="number">3</span>] = t</span><br><span class="line"></span><br><span class="line">    <span class="comment"># SubBytes</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">SubBytes</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            self.blk[x] = self.sbox[self.blk[x]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># AddRoundKey</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AddRoundKey</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        k = [<span class="number">0</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                k[x] = key[r][c]</span><br><span class="line">                x = x + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            self.blk[y] ^= <span class="built_in">int</span>(k[y])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            print(<span class="built_in">hex</span>(self.blk[i]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Schedule a secret key for use.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ScheduleKey</span>(<span class="params">self, w, Nk</span>):</span></span><br><span class="line">        Rcon = [<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>, <span class="number">0x36</span>]</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                w[<span class="number">0</span>][r][c] = self.key[r + c * <span class="number">4</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.Nr + <span class="number">1</span>, <span class="number">1</span>):  <span class="comment"># 问题1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(Nk):</span><br><span class="line">                t = [<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                    <span class="keyword">if</span> j:</span><br><span class="line">                        t[r] = w[i][r][j - <span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        t[r] = w[i - <span class="number">1</span>][r][<span class="number">3</span>]</span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">                    temp = t[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                        t[r] = self.sbox[t[(r + <span class="number">1</span>) % <span class="number">4</span>]]</span><br><span class="line">                    t[<span class="number">3</span>] = self.sbox[temp]</span><br><span class="line">                    t[<span class="number">0</span>] ^= <span class="built_in">int</span>(Rcon[i - <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                    w[i][r][j] = w[i - <span class="number">1</span>][r][j] ^ t[r]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加密函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AesEncrypt</span>(<span class="params">self</span>):</span></span><br><span class="line">        outkey = []</span><br><span class="line">        outkey = [[[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line">        self.ScheduleKey(outkey, <span class="number">4</span>)</span><br><span class="line">        self.AddRoundKey(outkey[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.Nr, <span class="number">1</span>):</span><br><span class="line">            self.SubBytes()</span><br><span class="line">            self.ShiftRows()</span><br><span class="line">            self.MixColumns()</span><br><span class="line">            self.AddRoundKey(outkey[x])</span><br><span class="line">        self.SubBytes()</span><br><span class="line">        self.ShiftRows()</span><br><span class="line">        self.AddRoundKey(outkey[<span class="number">10</span>])</span><br><span class="line">        print(<span class="string">&quot;密文的16进制:&quot;</span>)</span><br><span class="line">        cText = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            xxl = <span class="built_in">hex</span>(self.blk[i])</span><br><span class="line">            cText += xxl[<span class="number">2</span>:]</span><br><span class="line">        print(cText)</span><br><span class="line">        <span class="keyword">return</span> blk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AESD</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, blk, key, Nr</span>):</span></span><br><span class="line">        self.blk = blk</span><br><span class="line">        self.key = key</span><br><span class="line">        self.Nr = Nr</span><br><span class="line">        self.sbox = (<span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>,</span><br><span class="line">                     <span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>,</span><br><span class="line">                     <span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">                     <span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>,</span><br><span class="line">                     <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>,</span><br><span class="line">                     <span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>, <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>,</span><br><span class="line">                     <span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>,</span><br><span class="line">                     <span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>, <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>,</span><br><span class="line">                     <span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">                     <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>,</span><br><span class="line">                     <span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>,</span><br><span class="line">                     <span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>, <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>,</span><br><span class="line">                     <span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>, <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>,</span><br><span class="line">                     <span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>,</span><br><span class="line">                     <span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>,</span><br><span class="line">                     <span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">xtime</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (x &amp; <span class="number">0x80</span>):</span><br><span class="line">            <span class="keyword">return</span> (((x &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1b</span>) &amp; <span class="number">0xff</span>)</span><br><span class="line">        <span class="keyword">return</span> x &lt;&lt; <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReMixColumns</span>(<span class="params">self</span>):</span></span><br><span class="line">        tmp = [<span class="number">0</span> <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        xt1 = [<span class="number">0</span> <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        xt2 = [<span class="number">0</span> <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        xt3 = [<span class="number">0</span> <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            xt1[<span class="number">0</span>] = self.xtime(self.blk[n])</span><br><span class="line">            xt1[<span class="number">1</span>] = self.xtime(self.blk[n + <span class="number">1</span>])</span><br><span class="line">            xt1[<span class="number">2</span>] = self.xtime(self.blk[n + <span class="number">2</span>])</span><br><span class="line">            xt1[<span class="number">3</span>] = self.xtime(self.blk[n + <span class="number">3</span>])</span><br><span class="line">            xt2[<span class="number">0</span>] = self.xtime(self.xtime(self.blk[n]))</span><br><span class="line">            xt2[<span class="number">1</span>] = self.xtime(self.xtime(self.blk[n + <span class="number">1</span>]))</span><br><span class="line">            xt2[<span class="number">2</span>] = self.xtime(self.xtime(self.blk[n + <span class="number">2</span>]))</span><br><span class="line">            xt2[<span class="number">3</span>] = self.xtime(self.xtime(self.blk[n + <span class="number">3</span>]))</span><br><span class="line">            xt3[<span class="number">0</span>] = self.xtime(self.xtime(self.xtime(self.blk[n])))</span><br><span class="line">            xt3[<span class="number">1</span>] = self.xtime(self.xtime(self.xtime(self.blk[n + <span class="number">1</span>])))</span><br><span class="line">            xt3[<span class="number">2</span>] = self.xtime(self.xtime(self.xtime(self.blk[n + <span class="number">2</span>])))</span><br><span class="line">            xt3[<span class="number">3</span>] = self.xtime(self.xtime(self.xtime(self.blk[n + <span class="number">3</span>])))</span><br><span class="line">            tmp[<span class="number">0</span>] = xt1[<span class="number">0</span>] ^ xt2[<span class="number">0</span>] ^ xt3[<span class="number">0</span>] ^ self.blk[n + <span class="number">1</span>] ^ xt1[<span class="number">1</span>] ^ xt3[<span class="number">1</span>] ^ self.blk[n + <span class="number">2</span>] ^ xt2[<span class="number">2</span>] ^ xt3[<span class="number">2</span>] ^ \</span><br><span class="line">                     self.blk[n + <span class="number">3</span>] ^ xt3[<span class="number">3</span>]</span><br><span class="line">            tmp[<span class="number">1</span>] = self.blk[n] ^ xt3[<span class="number">0</span>] ^ xt1[<span class="number">1</span>] ^ xt2[<span class="number">1</span>] ^ xt3[<span class="number">1</span>] ^ self.blk[n + <span class="number">2</span>] ^ xt1[<span class="number">2</span>] ^ xt3[<span class="number">2</span>] ^ self.blk[</span><br><span class="line">                n + <span class="number">3</span>] ^ xt2[<span class="number">3</span>] ^ xt3[<span class="number">3</span>]</span><br><span class="line">            tmp[<span class="number">2</span>] = self.blk[n] ^ xt2[<span class="number">0</span>] ^ xt3[<span class="number">0</span>] ^ self.blk[n + <span class="number">1</span>] ^ xt3[<span class="number">1</span>] ^ xt1[<span class="number">2</span>] ^ xt2[<span class="number">2</span>] ^ xt3[<span class="number">2</span>] ^ self.blk[</span><br><span class="line">                n + <span class="number">3</span>] ^ xt1[<span class="number">3</span>] ^ xt3[<span class="number">3</span>]</span><br><span class="line">            tmp[<span class="number">3</span>] = self.blk[n] ^ xt1[<span class="number">0</span>] ^ xt3[<span class="number">0</span>] ^ self.blk[n + <span class="number">1</span>] ^ xt2[<span class="number">1</span>] ^ xt3[<span class="number">1</span>] ^ self.blk[n + <span class="number">2</span>] ^ xt3[<span class="number">2</span>] ^ xt1[</span><br><span class="line">                <span class="number">3</span>] ^ xt2[<span class="number">3</span>] ^ xt3[<span class="number">3</span>]</span><br><span class="line">            self.blk[n] = tmp[<span class="number">0</span>]</span><br><span class="line">            self.blk[n + <span class="number">1</span>] = tmp[<span class="number">1</span>]</span><br><span class="line">            self.blk[n + <span class="number">2</span>] = tmp[<span class="number">2</span>]</span><br><span class="line">            self.blk[n + <span class="number">3</span>] = tmp[<span class="number">3</span>]</span><br><span class="line">            n = n + <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReShiftRows</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 2nd row</span></span><br><span class="line">        t = self.blk[<span class="number">13</span>]</span><br><span class="line">        self.blk[<span class="number">13</span>] = self.blk[<span class="number">9</span>]</span><br><span class="line">        self.blk[<span class="number">9</span>] = self.blk[<span class="number">5</span>]</span><br><span class="line">        self.blk[<span class="number">5</span>] = self.blk[<span class="number">1</span>]</span><br><span class="line">        self.blk[<span class="number">1</span>] = t</span><br><span class="line">        <span class="comment"># 3rd row</span></span><br><span class="line">        t = self.blk[<span class="number">2</span>]</span><br><span class="line">        self.blk[<span class="number">2</span>] = self.blk[<span class="number">10</span>]</span><br><span class="line">        self.blk[<span class="number">10</span>] = t</span><br><span class="line">        t = self.blk[<span class="number">6</span>]</span><br><span class="line">        self.blk[<span class="number">6</span>] = self.blk[<span class="number">14</span>]</span><br><span class="line">        self.blk[<span class="number">14</span>] = t</span><br><span class="line">        <span class="comment"># 4th row</span></span><br><span class="line">        t = self.blk[<span class="number">3</span>]</span><br><span class="line">        self.blk[<span class="number">3</span>] = self.blk[<span class="number">7</span>]</span><br><span class="line">        self.blk[<span class="number">7</span>] = self.blk[<span class="number">11</span>]</span><br><span class="line">        self.blk[<span class="number">11</span>] = self.blk[<span class="number">15</span>]</span><br><span class="line">        self.blk[<span class="number">15</span>] = t</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReSubBytes</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">                <span class="keyword">if</span> (self.sbox[j] == self.blk[i]):</span><br><span class="line">                    self.blk[i] = j</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AddRoundKey</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        x = <span class="number">0</span></span><br><span class="line">        k = [<span class="number">0</span> <span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                k[x] = key[r][c]</span><br><span class="line">                x = x + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            self.blk[y] ^= k[y]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ScheduleKey</span>(<span class="params">self, w, Nk</span>):</span></span><br><span class="line">        Rcon = [<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>, <span class="number">0x36</span>]</span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                w[<span class="number">0</span>][r][c] = self.key[r + c * <span class="number">4</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.Nr + <span class="number">1</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(Nk):</span><br><span class="line">                t = [<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                    <span class="keyword">if</span> j:</span><br><span class="line">                        t[r] = w[i][r][j - <span class="number">1</span>]</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        t[r] = w[i - <span class="number">1</span>][r][<span class="number">3</span>]</span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">0</span>:</span><br><span class="line">                    temp = t[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">                        t[r] = self.sbox[t[(r + <span class="number">1</span>) % <span class="number">4</span>]]</span><br><span class="line">                    t[<span class="number">3</span>] = self.sbox[temp]</span><br><span class="line">                    t[<span class="number">0</span>] ^= <span class="built_in">int</span>(Rcon[i - <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">                    w[i][r][j] = w[i - <span class="number">1</span>][r][j] ^ t[r]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">AesDecrpyt</span>(<span class="params">self</span>):</span></span><br><span class="line">        outkey = [[[<span class="number">0</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]  <span class="comment"># 改</span></span><br><span class="line">        self.ScheduleKey(outkey, <span class="number">4</span>)</span><br><span class="line">        self.AddRoundKey(outkey[<span class="number">10</span>])</span><br><span class="line">        self.ReShiftRows()</span><br><span class="line">        self.ReSubBytes()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(self.Nr - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            self.AddRoundKey(outkey[x])</span><br><span class="line">            self.ReMixColumns()  <span class="comment"># 第二次循环出问题了</span></span><br><span class="line">            self.ReShiftRows()</span><br><span class="line">            self.ReSubBytes()</span><br><span class="line">        self.AddRoundKey(outkey[<span class="number">0</span>])</span><br><span class="line">        print(<span class="string">&quot;解密结果:&quot;</span>)</span><br><span class="line">        mText = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">            mText += <span class="built_in">chr</span>(self.blk[x])</span><br><span class="line">        print(mText)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">StringToListN</span>(<span class="params">string</span>):</span></span><br><span class="line">    s = [<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    l = <span class="built_in">len</span>(string)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        s[x] = <span class="built_in">int</span>(<span class="built_in">ord</span>(string[x]))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 加密</span></span><br><span class="line">    plainText = <span class="built_in">input</span>(<span class="string">&quot;请输入待加密的字符串:&quot;</span>)</span><br><span class="line">    blk = StringToListN(plainText)</span><br><span class="line">    skey = <span class="built_in">input</span>(<span class="string">&quot;请输入待加密的秘钥:&quot;</span>)</span><br><span class="line">    key = StringToListN(skey)</span><br><span class="line">    a = AESE(blk, key, <span class="number">10</span>)</span><br><span class="line">    rblk = a.AesEncrypt()</span><br><span class="line">    <span class="comment"># 解密</span></span><br><span class="line">    b = AESD(rblk, key, <span class="number">10</span>)</span><br><span class="line">    b.AesDecrpyt()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Cmd基础</title>
    <url>/2020/01/31/cmd-ji-chu/</url>
    <content><![CDATA[<h1 id="Cmd基础"><a href="#Cmd基础" class="headerlink" title="Cmd基础"></a>Cmd基础</h1><blockquote>
<p> Cmd指令集：<a href="https://gist.github.com/mednight4/a3781e11f7d7b034313b6e2bc51c7c9a#file-windows-cmd">Github gist</a></p>
</blockquote>
<hr>
<hr>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>cmd命令 分为 内部命令 和 外部命令<br>​        内部命令：物理内存中可以直接调用的命令<br>​                比如 ls , copy , echo …<br>​        外部命令：内部命令的功能扩展，通过调用应用程序来执行结果，可扩展自定义 : 把ping重命名为ping2，可以使用ping2执行原来的ping命令<br>​                扩展：如果要使用 <a href="https://www.gnu.org/software/wget/manual/wget.html">wget 命令</a>，可以下载并安装wget<br>​                使用wget下载百度的首页：wget  <a href="http://www.baidu.com/">www.baidu.com</a></p>
<hr>
<hr>
<h2 id="2-简单命令"><a href="#2-简单命令" class="headerlink" title="2. 简单命令"></a>2. 简单命令</h2><p><code>cd </code>切换目录，路径带空格需要双引号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:	</span><br><span class="line"><span class="built_in">cd</span> ..	</span><br><span class="line"><span class="built_in">cd</span> /	</span><br><span class="line"><span class="built_in">cd</span> .	</span><br></pre></td></tr></table></figure>

<p><code>dir</code>  列出文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dir /a	all</span><br><span class="line">dir /h	hide</span><br><span class="line">dir /r	<span class="built_in">read</span></span><br><span class="line">dir /s	system</span><br></pre></td></tr></table></figure>

<p><code>md</code> 创建文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">md C:\hello</span><br></pre></td></tr></table></figure>

<p><code>rd</code>删除文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rd C:\hello</span><br></pre></td></tr></table></figure>

<p><code>attrib</code>设置文件属性<br>​        查看文件属性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">attrib C:\hello.txt</span><br></pre></td></tr></table></figure>
<p>​        <code>+r</code>添加只读</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">attrib +r demo.txt</span><br></pre></td></tr></table></figure>
<p>​        <code>-h</code>删除隐藏</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">attrib -h demo.txt</span><br></pre></td></tr></table></figure>

<p><code>type </code> <code>more</code>打印查看文档文件(more)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> C:\hello.txt</span><br></pre></td></tr></table></figure>

<p><code>copy</code>只能复制文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">copy  C:\hello.txt  D:\  </span><br><span class="line">copy  C:\hello.txt  C:\HELLO.txt	 rem改名</span><br></pre></td></tr></table></figure>

<p><code>xcopy</code><br>​        <code>/s</code>  不能复制空目录<br>​        <code>/e</code>  能赋值空目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xcopy /e C:\hello.txt  D:\</span><br></pre></td></tr></table></figure>

<p><code>rename </code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rename hello.txt HELLO.txt	     rem文件</span><br><span class="line">rename hello  HELLO				rem文件夹</span><br></pre></td></tr></table></figure>

<p><code>move</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">move C:\demo.txt  D:\</span><br><span class="line">move C:\demo.txt  D:\DEMO.txt		rem重命名</span><br></pre></td></tr></table></figure>

<p><code>ren</code> 重命名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ren C:\demo.txt  D:\DEMO.txt		rem重命名</span><br></pre></td></tr></table></figure>

<p><code>replace</code> 替换<br>​        <code>/a</code>  add将新文件添加到目标目录(复制)<br>​        <code>/s</code>  same递归替换目标目录与所有子目录下的同名文件<br>​        <code>/u</code>  update更新且替换同名文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">replace /a C:\demo.txt  D:\</span><br></pre></td></tr></table></figure>

<p><code>mode</code> 宽度，高度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mode 80,30</span><br></pre></td></tr></table></figure>

<p><code>color</code>背景色字体颜色</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">color 07</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><p><code>set</code>查看系统环境变量<br>​        局部变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> name=xxx</span><br></pre></td></tr></table></figure>
<p>​        打印值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> name</span><br></pre></td></tr></table></figure>
<p>​        删除：赋予空值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> name=</span><br></pre></td></tr></table></figure>
<p>​        运算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> /a 1+1</span><br><span class="line"><span class="built_in">set</span> /a 2*2</span><br></pre></td></tr></table></figure>
<p>​        接受输入<code>/p</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> /p var=请输入一个字符</span><br></pre></td></tr></table></figure>
<p>​        忽略大小写<code>/i</code>  ignore</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /p var=请输入一个数字：</span><br><span class="line"><span class="built_in">echo</span> 您输入的数字是：%var%</span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p><code>setx</code>在用户或系统环境创建或修改环境变量。能基于参数、注册表项或文件输入设置变量。<br>​        设置全局变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setx PATH <span class="string">&quot;%path%;C:\python\bin&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>errorlevel</code>错误变量：如果上一条命令的返回值,0表示执行成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> %errorlevel%</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h2 id="4-特殊字符"><a href="#4-特殊字符" class="headerlink" title="4. 特殊字符"></a>4. 特殊字符</h2><p><code>|</code>命令管道，将第一条的命令的结果作为第二条的命令的参数来使用<br>​        <code>find</code>查找文件或者文件夹<br>​        <code>findstr</code>筛选对应字符串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dir f:\ | find <span class="string">&quot;hello&quot;</span></span><br><span class="line">dir f:\ | findstr <span class="string">&quot;hello&quot;</span></span><br><span class="line">netstat -ano | findstr TCP</span><br></pre></td></tr></table></figure>

<p><code>&amp;</code>组合命令，当第一条命令执行失败了，后边的命令继续执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dir a:\ &amp; dir c:\		rem 会显示A:\和C:\目录</span><br></pre></td></tr></table></figure>

<p><code>&amp;&amp;</code>组合命令，第一个命令失败后，后边的命令不会执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dir a:\ &amp;&amp; dir c:\		rem 不会显示目录</span><br></pre></td></tr></table></figure>

<p><code>||</code>组合命令，第一个命令失败后，才会执行第二条命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dir a:\ &amp; dir c:\		rem 会显示C:\目录</span><br></pre></td></tr></table></figure>

<p><code>()</code>括号</p>
<p><code>;</code>分号</p>
<p><code>*</code>通配符，全部字符</p>
<p><code>?</code>通配符，单个字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dir c:\???		rem打印长度为3的文件名和文件夹</span><br></pre></td></tr></table></figure>

<p><code>@echo off </code>关闭回显</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> /a var = 4*5     rem var变量</span><br><span class="line"><span class="built_in">echo</span> %var%	         rem %变量%</span><br><span class="line">pause &gt;nul 	         rem 暂停,重定向到nul,去掉‘请按任意键继续’</span><br></pre></td></tr></table></figure>

<p><code>rem</code>注释</p>
<p><code>::</code>注释</p>
<p><code>goto</code>跳转<code>:flag</code>，类似汇编</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">rem 注释部分</span><br><span class="line">:part1</span><br><span class="line"><span class="built_in">echo</span> this is part1</span><br><span class="line">goto part1</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p><code>start</code>打开盘符、文件、文件夹、网址、程序等<br>​        <code>/min</code> 最大化<br>​        <code>/max</code> 最小化<br>​        文件夹路径带空格要加双引号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">start F:\</span><br><span class="line">start /max F:\</span><br><span class="line">start F:\demo.txt</span><br><span class="line">start www.baidu.com</span><br><span class="line">start <span class="string">&quot;&quot;</span> <span class="string">&quot;space space&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>call</code>调用，类似汇编</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> this is main</span><br><span class="line">call demo.bat</span><br><span class="line"><span class="built_in">echo</span> 调用完成</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p><code>sort</code>排序<br>​        默认按照以一个字母升序排序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort demo.txt</span><br></pre></td></tr></table></figure>

<p>​        <code>/+n</code>按照第n个字母排序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort /+n demo.txt</span><br></pre></td></tr></table></figure>

<p>​        <code>/r</code>倒序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort /r demo.txt &gt; demo1.txt</span><br></pre></td></tr></table></figure>

<p>​        <code>/o</code>导出output</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort  demo.txt /o demo1.txt</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h2 id="5-条件"><a href="#5-条件" class="headerlink" title="5. 条件"></a>5. 条件</h2><p><code>if exist</code> <code>if not exist</code>判断文件或者文件夹是否存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> exist C:\ (<span class="built_in">echo</span> 存在C盘) <span class="keyword">else</span> (<span class="built_in">echo</span> 不存在C盘) </span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p><code>if &quot;str1&quot;==&quot;str2&quot;</code> <code>else</code> 判断两个字符串是否相等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> var1=hello</span><br><span class="line"><span class="built_in">set</span> var2=helle</span><br><span class="line"><span class="keyword">if</span> %var1%==%var2% (<span class="built_in">echo</span> equal) <span class="keyword">else</span> (<span class="built_in">echo</span> not equal) </span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p><code>if sum1 equ sum2</code>判断某两个数值是否相等</p>
<p><code>if defined var</code>判断某个变量是否已经被赋值</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> defined var1 (<span class="built_in">echo</span> defed) <span class="keyword">else</span> (<span class="built_in">echo</span> undefed) </span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p>判断两个数值值之间的大小关系的关系符：</p>
<table>
<thead>
<tr>
<th align="center">判断</th>
<th align="center">关系符</th>
<th align="center">解释记忆</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td align="center">equ</td>
<td align="center">equal</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">gtr</td>
<td align="center">greeter than</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">geq</td>
<td align="center">gteater then or equal</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">lss</td>
<td align="center">less than</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">leq</td>
<td align="center">less than or equal</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">neq</td>
<td align="center">not equal</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /p num1=请输入数字1：</span><br><span class="line"><span class="built_in">set</span> /p num2=请输入数字2：</span><br><span class="line"><span class="keyword">if</span> %num1% equ %num2% (<span class="built_in">echo</span> equ) <span class="keyword">else</span> (<span class="built_in">echo</span> not equ) </span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p>判断文件夹是否存在，不在则创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> exist F:\BOOM (<span class="built_in">echo</span> 存在文件夹) <span class="keyword">else</span> (md F:\BOOM &amp;&amp; <span class="built_in">echo</span> 创建成功)</span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p>判断文件是否存在，不存在则创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> exist E:\桌面\hello.py (<span class="built_in">echo</span> 存在文件) <span class="keyword">else</span> (<span class="built_in">type</span> nul &gt;E:\桌面\hello.py &amp;&amp; <span class="built_in">echo</span> 创建成功)</span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>
<p>​        <code>type nul &gt;route</code>回显重定向到文件输出 </p>
<hr>
<hr>
<h2 id="6-循环"><a href="#6-循环" class="headerlink" title="6. 循环"></a>6. 循环</h2><p><code>for %var in (set) do conmand</code><br>处于cmd dos界面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> %i <span class="keyword">in</span> (1 2 3 4 5) <span class="keyword">do</span> <span class="built_in">echo</span> %i</span><br><span class="line"><span class="keyword">for</span> %i <span class="keyword">in</span> (a b c) <span class="keyword">do</span> <span class="built_in">echo</span> %i</span><br></pre></td></tr></table></figure>

<p>处于.bat文件中:    变量var需要双百分号<code>%%var</code>    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> %%i <span class="keyword">in</span> (1 2 3 4 5) <span class="keyword">do</span> <span class="built_in">echo</span> %%i</span><br><span class="line"><span class="keyword">for</span> %%i <span class="keyword">in</span> (a b c) <span class="keyword">do</span> <span class="built_in">echo</span> %%i</span><br><span class="line"><span class="keyword">for</span> %%i <span class="keyword">in</span> (c:\a*) <span class="keyword">do</span> <span class="built_in">echo</span> %%i	</span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p>4-遍历出F盘中以a开头的文件，不是文件夹</p>
<p><code>for /l  %var in (start , step , end) do conmend</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> E:\桌面</span><br><span class="line"><span class="keyword">for</span> /l %%i <span class="keyword">in</span> (1,2,10) <span class="keyword">do</span> <span class="built_in">echo</span> %%i</span><br><span class="line"><span class="keyword">for</span> /l %%i <span class="keyword">in</span> (1,1,3) <span class="keyword">do</span> md text%%i</span><br><span class="line"><span class="keyword">for</span> /l %%i <span class="keyword">in</span> (1,1,3) <span class="keyword">do</span> start www.baidu.com</span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>
<p>​        3-step参数为跳跃间隙值，同python<br>​        4-批量创建文件夹text1 text3 text3<br>​        5-从浏览器打开3次百度首页</p>
<p><code>for /d %var in (set) do command</code>  (directory)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> /d %%i <span class="keyword">in</span> (*) <span class="keyword">do</span> <span class="built_in">echo</span> %%i</span><br><span class="line"><span class="keyword">for</span> /d %%i <span class="keyword">in</span> (F:\???) <span class="keyword">do</span> <span class="built_in">echo</span> %%i</span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p>​        2-筛选出当前目录的所有文件夹：<br>​        3-筛选出f盘下，命名字符长度小于等于3的文件夹匹配出的只能是目录，文件夹，不能是文件</p>
<p><code>for /r [drive:]path %var in (set) do command</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> /r F:\ %%i <span class="keyword">in</span> (*.txt) <span class="keyword">do</span> <span class="built_in">echo</span> %%i</span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p>​        匹配出F:盘下所有以.txt结尾的文件<br><code>for /f &quot;eol=; tokens=2,3* delims=, &quot; %i in (myfile.txt) do @echo %i %j %k</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> /f %%i <span class="keyword">in</span> (F:\demo.txt) <span class="keyword">do</span> <span class="built_in">echo</span> %%i</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;delims= &quot;</span> %%i <span class="keyword">in</span> (F:\demo.txt) <span class="keyword">do</span> <span class="built_in">echo</span> %%i</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;delims=&quot;</span> %%i <span class="keyword">in</span>(F:\demo.txt) <span class="keyword">do</span> <span class="built_in">echo</span> %%i</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;tokens=1,2 delims=&quot;</span> %%i <span class="keyword">in</span>(F:\demo.txt) <span class="keyword">do</span> <span class="built_in">echo</span> %%i %%j</span><br><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;skip=1 tokens=1,2 delims=&quot;</span> %%i <span class="keyword">in</span>(F:\demo.txt) <span class="keyword">do</span> <span class="built_in">echo</span> %%i %%j</span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p>​        读取文件内容,如果不加<code>/f</code>，只会把文件路径打印出来<br>​        2-默认以空格为每行的分隔符，读取F盘下demo.txt的内容，遇到空格认为此行结束<br>​        3-以<code>&quot;delims=?&quot; </code>，?作为每行的分隔符<br>​        4-取<code>&quot;delims=&quot;</code>时，以此行不再有内容认为此行结束<br>​        5-<code>&quot;delims=&quot;</code>按行提取文档，<code>tokens=1,2,...</code>并只提取出第1,2，…列的字符，注意echo接收的参数数量需要和提出的tokens数量一致<br>​        6-在第5行命令的基础上增加了<code>skip=1</code>，指跳过第一行的读取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">for</span> /f %%i <span class="keyword">in</span> (F:\demo.txt) <span class="keyword">do</span> md %%i</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p>​        从F:demo.txt中按行读取内容，将每行内容按字符命名新文件夹</p>
<p><code>%0</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">start cmd</span><br><span class="line">%0</span><br></pre></td></tr></table></figure>
<p>​        死循环，无法ctrl+c取消，慎用</p>
<hr>
<hr>
<h2 id="7-重定向"><a href="#7-重定向" class="headerlink" title="7. 重定向"></a>7. 重定向</h2><p>操作符：<code>&gt;</code>,<code>&gt;&gt;</code>,<code>&lt;</code></p>
<p><code>&gt;</code>写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">ping www.baidu.com &gt; f:\test.txt &amp;&amp; <span class="built_in">type</span> f:\test.txt</span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p><code>&gt;&gt;</code>追加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">ping www.baidu.com &gt;&gt; f:\test.txt &amp;&amp; <span class="built_in">type</span> f:\test.txt</span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p><code>&lt;</code>读</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">ping www.baidu.com &gt; f:\test.txt &amp;&amp; sort &lt; f:\test.txt</span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>

<p>句柄的数字代码描述<br>​        0：键盘输入<br>​        1：输出到命令提示符窗口<br>​        2：错误输出<br>​        常用于错误日志捕捉</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">di f:\ &gt;directory.txt 2&gt;error.txt</span><br><span class="line">pause &gt;nul</span><br></pre></td></tr></table></figure>
<p>​        故意将<code>dir</code>写成<code>di</code>，结果任会生成两个文件，错误日志保存在error.txt</p>
<hr>
<hr>
<h2 id="8-系统"><a href="#8-系统" class="headerlink" title="8. 系统"></a>8. 系统</h2><h3 id="1-ping"><a href="#1-ping" class="headerlink" title="1.ping"></a>1.ping</h3><ul>
<li><p>选项:<br><strong>-t</strong>  Ping 指定的主机，直到停止。若要查看统计信息并继续操作，请键入 Ctrl+Break；若要停止,请键入 Ctrl+C。<br><strong>-a</strong>            将地址解析为主机名。<br>-n count       要发送的回显请求数。<br>-l size           发送缓冲区大小。<br>-f                  在数据包中设置“不分段”标记(仅适用于 IPv4)。<br>-i TTL            生存时间。<br>-v TOS          服务类型(仅适用于 IPv4。该设置已被弃用，对 IP 标头中的服务类型字段没有任何影响)。<br>-r count       记录计数跃点的路由(仅适用于 IPv4)。<br>-s count       计数跃点的时间戳(仅适用于 IPv4)。<br>-j host-list    与主机列表一起使用的松散源路由(仅适用于 IPv4)。<br>-k host-list   与主机列表一起使用的严格源路由(仅适用于 IPv4)。<br>-w timeout   等待每次回复的超时时间(毫秒)。<br>-R         同样使用路由标头测试反向路由(仅适用于 IPv6)。根据 RFC 5095，已弃用此路由标头。如果使用此标头，某些系统可能丢弃回显请求。<br>-S srcaddr   要使用的源地址。<br>-c compartment 路由隔离舱标识符。<br>-p                Ping Hyper-V 网络虚拟化提供程序地址。<br>-4                强制使用 IPv4。<br>-6                强制使用 IPv6。</p>
</li>
<li><p>常见系统的TTL值：<br>WINDOWS NT/2000  TTL：128<br>WINDOWS 95/98   TTL：32<br>WIN7      TTL：64<br>UNIX        TTL：255<br>LINUX       TTL：64/255</p>
</li>
<li><p>给baidu丢垃圾</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping -l 65500 www.baidu.com -t</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h3 id="2-telnet"><a href="#2-telnet" class="headerlink" title="2.telnet"></a>2.telnet</h3><p>查看某个端口是否可访问。首先要开启telnet功能。<br><code>net start telnet</code></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Cmd%E5%9F%BA%E7%A1%80/%E5%BC%80%E5%90%AFtelnet.jpg"></p>
<ul>
<li>选项:<br>telnet [-a][-e escape char][-f log file][-l user][-t term] [host[port]]<br> -a       企图自动登录。除了用当前已登陆的用户名以外，与 -l 选项相同。<br> -e       跳过字符来进入 telnet 客户端提示。<br> -f        客户端登录的文件名<br> -l        指定远程系统上登录用的用户名。要求远程系统支持 TELNET ENVIRON 选项。<br> -t        指定终端类型。支持的终端类型仅是: vt100, vt52, ansi 和 vtnt。<br> host    指定要连接的远程计算机的主机名或 IP 地址。<br> port    指定端口号或服务名。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet www.baidu.com 80</span><br></pre></td></tr></table></figure>
访问百度服务器的80端口</li>
</ul>
<hr>
<h3 id="3-netstat"><a href="#3-netstat" class="headerlink" title="3.netstat"></a>3.netstat</h3><p>显示协议统计信息和当前 TCP/IP 网络连接。</p>
<ul>
<li><p>选项：<br>NETSTAT [-a] [-b] [-e] [-f] [-n] [-o] [-p proto] [-r] [-s] [-x] [-t] [interval]<br>  <strong>-a           显示所有连接和侦听端口。</strong><br>  -b            显示在创建每个连接或侦听端口时涉及的可执行程序。在某些情况下，已知可执行程序承载多个独立的组件，这些情况下，显示创建连接或侦听端口时涉及的组件序列。在此情况下，可执行程序的名称位于底部 [] 中，它调用的组件位于顶部，直至达到 TCP/IP。注意，此选项可能很耗时，并且在你没有足够权限时可能失败。<br>  -e            显示以太网统计信息。此选项可以与 -s 选项结合使用。<br>  -f            显示外部地址的完全限定域名(FQDN)。<br>  <strong>-n       以数字形式显示地址和端口号。</strong><br>  <strong>-o           显示拥有的与每个连接关联的进程 ID。</strong><br>  -p proto      显示 proto 指定的协议的连接；proto可以是下列任何一个: TCP、UDP、TCPv6 或 UDPv6。如果与 -s选项一起用来显示每个协议的统计信息，proto 可以是下列任何一个:IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 UDPv6。<br>  -q            显示所有连接、侦听端口和绑定的非侦听 TCP 端口。绑定的非侦听端口不一定与活动连接相关联。<br>  <strong>-r            显示路由表。</strong><br>  -s            显示每个协议的统计信息。默认情况下，显示 IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6 的统计信息;-p 选项可用于指定默认的子网。<br>  -t            显示当前连接卸载状态。<br>  -x            显示 NetworkDirect 连接、侦听器和共享终结点。<br>  -y            显示所有连接的 TCP 连接模板。无法与其他选项结合使用。<br>  interval   重新显示选定的统计信息，各个显示间暂停的间隔秒数。按 CTRL+C 停止重新显示统计信息。如果省略，则 netstat 将打印当前的配置信息一次。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure>
</li>
<li><p>状态：<br>LISTENING:监听<br>ESTABLISHED:已建立连接<br>TIME_WAIT:超时</p>
</li>
<li><p>利用<code>netstat</code>查询端口被哪个进程占用：<br><code>netstat</code>查询 tcp/ip 连接<br><code>tasklist</code>列举任务进程<br><code>taskill</code>杀任务进程<br><code>taskmgr</code>打开任务管理器</p>
</li>
</ul>
<p>1.查找所需端口,得到应用PID</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano | findstr [port]</span><br></pre></td></tr></table></figure>

<p>2.得到详细进程信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tasklist | findstr [PID]</span><br></pre></td></tr></table></figure>

<p><del>看看任务管理器，查找PID</del></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskmgr</span><br></pre></td></tr></table></figure>

<p>3.关闭应用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">taskill /im [name.exe]</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-netsh"><a href="#4-netsh" class="headerlink" title="4.netsh"></a>4.netsh</h3><ul>
<li><p>定义：netsh(Network Shell)是一个windows系统本身提供的<strong>网络配置命令行</strong>工具，可以用来修改windows的ip、网关、dns信息</p>
</li>
<li><p>用法：<br><code>netsh</code><br>?              - 显示命令列表<br>add            - 在项目列表上添加一个配置项目<br>advfirewall    - 更改到 netsh advfirewall上下文<br>bridge         - 更改到netsh bridge上下文<br>delete         - 在项目列表上删除一个配置项目<br>dhcpclient     - 更改到netsh dhcpclien 上下文<br>dnsclient      - 更改到 netsh dnsclient上下文<br>dump           - 显示一个配置脚本<br>exec           - 运行一个脚本文件<br>firewall       - 更改到netsh firewall 上下文<br>help           - 显示命令列表<br>http           - 更改到 netsh http上下文<br>interface      - 更改到 netsh interface上下文<br>ipsec          - 更改到netsh ipsec上下文<br>lan            - 更改到netsh lan上下文<br>mbn            - 更改到 netsh mbn上下文<br>namespace      - 更改到 netsh namespace上下文<br>netio          - 更改到 netsh netio上下文<br>p2p            - 更改到 netsh p2p上下文<br>ras            - 更改到 netsh ras上下文<br>rpc            - 更改到 netsh rpc上下文<br>set            - 更新配置设置<br>show           - 显示信息<br>trace          - 更改到 netsh trace上下文<br>wcn            - 更改到 netsh wcn上下文<br>wfp            - 更改到 netsh wfp上下文<br>winhttp        - 更改到 netsh winhttp上下文<br>winsock        - 更改到 netsh winsock上下文<br>wlan           - 更改到 netsh wlan上下文</p>
<p><code>int ip</code></p>
<p><code>dump</code></p>
</li>
<li><p>备份网络配置<br><code>netsh dump &gt; [route]</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netsh dump &gt; F:netsh_dump.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置静态ip<br><code>set address name=&quot;[locallink]&quot; source=static addr=192.168.0.7 mask=255.255.255.0</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> address name=<span class="string">&quot;VLAN&quot;</span> sourse=static addr=192.168.43.160 mask=255.255.255.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置自动获取ip<br><code>set address name=&quot;[locallink]&quot; source=dhcp</code></p>
</li>
<li><p>设置其他（网关，dns等）<br><code>set address name=&quot;[locallink]&quot; gateway=[172.19.96.1] gwmetric=1</code></p>
</li>
<li><p>重置winsock目录。<br><code>netsh winsock reset</code></p>
<p>如果计算机<strong>winsock协议配置</strong>有问题的话将会导致网络连接等问题，通过重置winsock目录借以恢复网络，这个命令可以重新初始化网络环境，已解决由于软件冲突，病毒原因造成的参数错误问题。</p>
<p>适用情况：当端口被占用，却又无法查出进程时，<code>netsh winsock reset</code>重置winsock目录+重启电脑。</p>
</li>
<li><p>重置TCP/IP协议<br><code>netsh int ip reset &#123;C:\resetlog.txt&#125;</code><br>相当于卸载并重新安装TCP/IP协议，使其恢复到初次安装操作系统时的状态</p>
</li>
<li><p>设置防火墙<br><del>查看图形界面</del><br><code>firewall.cpl</code><br>1.关闭/开启防火墙<br><code>netsh firewall set opmode mode=[disable/enable]</code></p>
</li>
<li><p>获取连接过的wifi密码<br>1.查看当前系统已经保存的网络<br><code>netsh wlan show profiles</code><br>2.查看指定wifi的密码<br><code>netsh wlan show profile name=&quot;ssid&quot; key=clear</code></p>
</li>
<li><p>查看TCP全局参数<br><code>netsh interface tcp show global</code><br>设置接受窗口级别（normal）<br><code>netsh interface tcp set global autotuninglevel=normal</code></p>
</li>
</ul>
<hr>
<h3 id="5-ipconfig"><a href="#5-ipconfig" class="headerlink" title="5.ipconfig"></a>5.ipconfig</h3><ul>
<li><p>定义：可用来显示当前的TCP/IP配置的设定值。这些信息一般用来检验人工配置的TCP/IP设置是否正确</p>
</li>
<li><p>用法:<br>ipconfig [/allcompartments] [/? | /all |<br>/renew [adapter] | /release [adapter] |<br>/renew6 [adapter] | /release6 [adapter] |<br>/flushdns | /displaydns | /registerdns |<br>/showclassid adapter |<br>/setclassid adapter [classid] |<br>/showclassid6 adapter |<br>/setclassid6 adapter [classid] ]<br>其中<br>adapter             连接名称<br>(允许使用通配符 * 和 ?，参见示例)</p>
</li>
<li><p>选项:<br>/?               显示此帮助消息<br>/all             显示完整配置信息。<br><strong>/release         释放ip。(适用于ip地址非静态分配的网卡，+/renew)</strong><br>/release6        释放指定适配器的 IPv6 地址。<br><strong>/renew           更新获取ip。</strong><br>/renew6          更新指定适配器的 IPv6 地址。<br><strong>/flushdns        刷新dns。</strong><br>/registerdns     刷新所有 DHCP 租用并重新注册 DNS 名称<br>/displaydns      显示 DNS 解析程序缓存的内容。<br>/showclassid     显示适配器允许的所有 DHCP 类 ID。<br>/setclassid      修改 DHCP 类 ID。<br>/showclassid6    显示适配器允许的所有 IPv6 DHCP 类 ID。<br>/setclassid6     修改 IPv6 DHCP 类 ID。</p>
</li>
</ul>
<p><code>ipconfig /flushdns</code>刷新DNS解析缓存</p>
<hr>
<h3 id="6-net"><a href="#6-net" class="headerlink" title="6.net"></a>6.net</h3><p>NET<br>    [ ACCOUNTS | COMPUTER | CONFIG | CONTINUE | FILE | GROUP | HELP |<br>      HELPMSG | LOCALGROUP | PAUSE | SESSION | SHARE | START |<br>      STATISTICS | STOP | TIME | USE | USER | VIEW ]</p>
<p>查看用户<code>net user</code><br>添加用户<code>net user [user] /add</code><br>删除用户<code>net user [user] /del</code><br>启用/禁用用户<code>net user [user] /active:&#123;yes|no&#125; </code><br>添加到管理员组<code>net localgroup administrators [user] /add</code><br>查看共享<code>net share</code><br>共享F盘 <code>net share f=F:/</code><br>取消共享<code>net share f/delete</code><br>查看特定主机共享<code>net view [hostname]</code><br>开启服务<code>net start [services]</code> 查看服务<code>services.msc</code><br>停止服务<code>net stop [services]</code></p>
<hr>
<h3 id="7-tracert"><a href="#7-tracert" class="headerlink" title="7.tracert"></a>7.tracert</h3><ul>
<li><p>定义：tracert是windows路由器跟踪实用程序，可以用于确定ip数据包访问目标时选择的路径，也可以用于故障排查。</p>
</li>
<li><p>用法：<br>tracert + ip<br>tracert + 域名</p>
</li>
<li><p>参数<br>​    <strong>-d                             不将地址解析成主机名。</strong><br>​    <strong>-h maximum_hops    搜索目标的最大跃点数。</strong><br>​    -j host-list                   与主机列表一起的松散源路由(仅适用于 IPv4)。<br>​    <strong>-w timeout             等待每个回复的超时时间(以毫秒为单位)。</strong><br>​    -R                         跟踪往返行程路径(仅适用于 IPv6)。<br>​    -S srcaddr             要使用的源地址(仅适用于 IPv6)。<br>​    -4                         强制使用 IPv4。<br>​    -6                         强制使用 IPv6。</p>
</li>
</ul>
<hr>
<h3 id="8-shutdown"><a href="#8-shutdown" class="headerlink" title="8.shutdown"></a>8.shutdown</h3><ul>
<li><p>用法: </p>
<p>​    C:\Windows\system32\shutdown.exe [/?]</p>
</li>
<li><p>参数：<br>​    /?         显示帮助。这与不键入任何选项是一样的。<br>​    <strong>/i         显示图形用户界面(GUI)。</strong>这必须是第一个选项。<br>​    <strong>/l</strong>         注销。这不能与 /m 或 /d 选项一起使用。<br>​    /s         关闭计算机。<br>​    /sg        关闭计算机。在下一次启动时，如果启用了自动重启登录，则将自动登录并锁定上次交互用户。登录后，重启任何已注册的应用程序。<br>​    <strong>/r         完全关闭并重启计算机。</strong><br>​    /g         完全关闭并重启计算机。重新启动系统后，如果启用了自动重启登录，则将自动登录并锁定上次交互用户。登录后，重启任何已注册的应用程序。<br>​    /a         中止系统关闭。这只能在超时期间使用。与 /fw 结合使用，以清除任何未完成的至固件的引导。<br>​    <strong>/p         关闭本地计算机，没有超时或警告。</strong> 可以与 /d 和 /f 选项一起使用。<br>​    /h         休眠本地计算机。可以与 /f 选项一起使用。<br>​    /hybrid    执行计算机关闭并进行准备以快速启动。必须与 /s 选项一起使用。<br>​    /fw        与关闭选项结合使用，使下次启动转到固件用户界面。<br>​    /e         记录计算机意外关闭的原因。<br>​    /o         转到高级启动选项菜单并重新启动计算机。必须与 /r 选项一起使用。<br>​    /m \computer 指定目标计算机。<br>​    /t xxx     将关闭前的超时时间设置为 xxx 秒。有效范围是 0-315360000 (10 年)，默认值为 30。如果超时时间大于 0，则默示为/f 参数。<br>​    /c “comment” 有关重新启动或关闭的原因的注释。最多允许 512 个字符。<br>​    /f         强制关闭正在运行的应用程序而不事先警告用户。 如果为 /t 参数指定大于 0 的值，则默示为 /f 参数。<br>​    /d [p|u:]xx:yy  提供重新启动或关闭的原因。p 指示重启或关闭是计划内的。 u 指示原因是用户定义的。 如果未指定 p 也未指定 u，则重新启动或关闭是计划外的。xx 是主要原因编号(小于 256 的正整数)。yy 是次要原因编号(小于 65536 的正整数)。</p>
</li>
<li><p>两分钟后关闭计算机</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown /p -t 120</span><br></pre></td></tr></table></figure>
</li>
<li><p>取消计划</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shutdown /a</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h3 id="9-disk"><a href="#9-disk" class="headerlink" title="9.disk"></a>9.disk</h3><p>磁盘修复：</p>
<ul>
<li><p>chkdsk(非法关机或者系统死机)查看磁盘信息<br>​        <code>chkdks F:</code>加上盘符<br>​        <code>chkdks /f</code>检测错误并修复<br>​        <code>chkdks /r</code>查找坏扇区并修复<br>​        <code>...</code></p>
</li>
<li><p>convert<br>​        。。。</p>
</li>
<li><p>diskpart(分区，格式化等等)<br>​        <code>diskpart</code>进入模式<br>​        <code>listdisk</code>ls磁盘<br>​        <code>select disk 1</code>选择磁盘1<br>​        <code>clean</code>格式化磁盘<br>​        <code>creat partition primary</code>创建主分区<br>​        <code> format fs=ntfs quick lable=“E”</code>分区E盘<br>​        <code>...</code></p>
</li>
</ul>
<p>系统文件缺失:</p>
<ul>
<li><p><code>sfc</code>(system file check)检查系统文件完整性并修复</p>
</li>
<li><p><code>sfc verifyonly </code>仅扫描，不修复</p>
</li>
<li><p><code>sfc...</code></p>
<p><del>10.wget</del></p>
</li>
</ul>
<hr>
<h3 id="10-net-use"><a href="#10-net-use" class="headerlink" title="10.net use"></a>10.net use</h3><p>IPC$是共享“命名管道”的资源，利用IPC$连接者可以与目标主机建立一个空的连接而无需用户名与密码（<del>在对方主机开启IPC$共享的情况下</del>），利用这个连接，连接者可以得到目标主机的用户列表（<del>在管理员未禁止导出用户列表时</del>）</p>
<ul>
<li><code>net use \\IP\ipc% &quot;&quot; /user:&quot;&quot;</code>建立空连接（包含三个空格）</li>
<li><code>net use \\IP\ipc$ &quot;用户名&quot; /user:&quot;密码&quot;</code>建立非空连接</li>
<li><code>net use z:\\IP\c$ &quot;密码&quot; /user:&quot;用户名&quot;</code>映射默认连接，将对方的C盘映射为自己的Z盘<br><code>net use z:\\IP\c$</code>如果已经和目标建立了IPC$，则可以直接用IP+盘符+$访问</li>
<li><code>net use \\IP\ipc$ /del</code>删除一个ipc$连接</li>
<li><code>net use c: /del</code>删除共享映射，删除映射的C盘</li>
</ul>
<hr>
<hr>
<h2 id="9-小结"><a href="#9-小结" class="headerlink" title="9.小结"></a>9.小结</h2><ul>
<li>一个简单的.bat小工具<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> G:\Code\Blog\files</span><br><span class="line">title hexo <span class="keyword">for</span> blog</span><br><span class="line">color 0a</span><br><span class="line">chcp 65001</span><br><span class="line"><span class="built_in">echo</span>=</span><br><span class="line">:start</span><br><span class="line"><span class="built_in">echo</span> 1.new</span><br><span class="line"><span class="built_in">echo</span> 2.generate</span><br><span class="line"><span class="built_in">echo</span> 3.server</span><br><span class="line"><span class="built_in">echo</span> 4.deploy</span><br><span class="line"><span class="built_in">echo</span> 5.clean</span><br><span class="line"><span class="built_in">echo</span> 6.exit</span><br><span class="line"><span class="built_in">set</span> /p var=Input your choice PLZ:</span><br><span class="line"><span class="keyword">if</span> not defined var goto start</span><br><span class="line"><span class="keyword">if</span> %var%==1 goto 1</span><br><span class="line"><span class="keyword">if</span> %var%==2 goto 2</span><br><span class="line"><span class="keyword">if</span> %var%==3 goto 3</span><br><span class="line"><span class="keyword">if</span> %var%==4 goto 4</span><br><span class="line"><span class="keyword">if</span> %var%==5 goto 5</span><br><span class="line"><span class="keyword">if</span> %var%==6 goto 6</span><br><span class="line">goto start</span><br><span class="line">:1</span><br><span class="line"><span class="built_in">set</span> /p var1=hexo new ：</span><br><span class="line"><span class="built_in">echo</span> new %var1% ...</span><br><span class="line">start G:\Code\Blog\files\<span class="built_in">source</span>\_posts</span><br><span class="line">hexo new %var1%</span><br><span class="line">:2</span><br><span class="line">hexo g</span><br><span class="line">:3</span><br><span class="line">start http://localhost:4000 </span><br><span class="line">hexo s</span><br><span class="line">:4</span><br><span class="line">hexo d</span><br><span class="line">:5</span><br><span class="line">hexo clean</span><br><span class="line">:6</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas常用方法</title>
    <url>/2020/11/29/pandas-chang-yong-fang-fa/</url>
    <content><![CDATA[<h1 id="Pandas常用方法"><a href="#Pandas常用方法" class="headerlink" title="Pandas常用方法"></a>Pandas常用方法</h1><blockquote>
<p>  课程地址：<a href="https://www.icourse163.org/course/BIT-1001870002?tid=1450349444">Python数据分析与展示</a></p>
<p>  官方文档：<a href="https://www.pypandas.cn/docs/getting_started/">快速入门 | Pandas 中文 (pypandas.cn)</a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>搞数据分析处理的。索引很方便。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直连的情况下，直接 <code>pip install pandas</code>可能报错超时，可以</p>
<p><code> pip --default-time=100 install pandas</code>等久一点,从默认源安装。</p>
<p>也可在操作修改pip镜像为国内源</p>
<p><code>pip install pandas -i https://pypi.tuna.tsinghua.edu.cn/simple</code>   </p>
<p>如想永久修改镜像地址，需要在当前对用户目录下（C:\Users\用户\pip）创建一个 <code>pip.ini</code>，然后在<code>pip.ini</code>文件中输入以下内容：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="section">[install]</span></span><br><span class="line"><span class="attr">trusted-host</span> = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>

<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Pandas库提供了两个数据类型<code>Serious</code>  <code>DataFrame</code></p>
<p>基于这两个数据类型，Pandas提供 基本操作、运算操作、特征类操作、关联类操作</p>
<p>对比Numpy和Pandas</p>
<table>
<thead>
<tr>
<th>Numpy</th>
<th>Pandas</th>
</tr>
</thead>
<tbody><tr>
<td>基础数据类型</td>
<td>扩展数据类型</td>
</tr>
<tr>
<td>关注数据的结构表达</td>
<td>关注数据的应用表达</td>
</tr>
<tr>
<td>数据与维度间关系</td>
<td>数据与索引间关系</td>
</tr>
</tbody></table>
<h2 id="Series类型"><a href="#Series类型" class="headerlink" title="Series类型"></a>Series类型</h2><p>Series类型由一组数据及与之相关的数据索引组成。</p>
<h3 id="Serious创建"><a href="#Serious创建" class="headerlink" title="Serious创建"></a>Serious创建</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="string">&quot;&quot;&quot;从列表创建&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(<span class="built_in">range</span>(<span class="number">5</span>)) </span><br><span class="line"><span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4</span></span><br><span class="line">dtype: int64 </span><br><span class="line"><span class="string">&quot;&quot;&quot;自定义索引，用&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;作为1,2,3,4索引&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="comment"># [1,2],[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]会报错，也可以写成这样：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="string">&quot;&quot;&quot;从一个标量做索引&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(<span class="number">4</span>,[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line">a    <span class="number">4</span></span><br><span class="line">b    <span class="number">4</span></span><br><span class="line">c    <span class="number">4</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="string">&quot;&quot;&quot;从字典创建&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>&#125;)</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="string">&quot;&quot;&quot;从字典创建，然后用自定义的索引给series做索引&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;d&#x27;</span>:<span class="number">4</span>&#125;,index=[<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;e&#x27;</span>])</span><br><span class="line">d    <span class="number">4.0</span></span><br><span class="line">c    <span class="number">3.0</span></span><br><span class="line">b    <span class="number">2.0</span></span><br><span class="line">a    <span class="number">1.0</span></span><br><span class="line">e    NaN</span><br><span class="line">dtype: float64 <span class="comment"># 是浮点数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;从ndarray创建&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(np.arange(<span class="number">5</span>))</span><br><span class="line"><span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4</span></span><br><span class="line">dtype: int32</span><br><span class="line"><span class="string">&quot;&quot;&quot;从ndrange创建，然后用自定义的索引给series做索引&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.Series(np.arange(<span class="number">5</span>),index=np.arange(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line"><span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">1</span></span><br><span class="line"><span class="number">4</span>    <span class="number">2</span></span><br><span class="line"><span class="number">6</span>    <span class="number">3</span></span><br><span class="line"><span class="number">8</span>    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>

<h3 id="Series索引"><a href="#Series索引" class="headerlink" title="Series索引"></a>Series索引</h3><p>和字典类似</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=pd.Series(np.arange(<span class="number">4</span>),[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;获取索引&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index</span><br><span class="line">Index([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>) <span class="comment"># 索引存在自建立类型</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;获取数据&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.values</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;用户自定义索引&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;多个自定义索引并用&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line">a    <span class="number">0</span></span><br><span class="line">b    <span class="number">1</span></span><br><span class="line">dtype: int32</span><br><span class="line"><span class="string">&quot;&quot;&quot;自动索引&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;多个自动索引并用&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[[<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">a    <span class="number">0</span></span><br><span class="line">b    <span class="number">1</span></span><br><span class="line">dtype: int32</span><br><span class="line"><span class="string">&quot;&quot;&quot;用户自定义索引 和 自动索引 不能混用&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[[<span class="number">0</span>,<span class="string">&#x27;a&#x27;</span>]]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">KeyError: <span class="string">&quot;Passing list-likes to .loc or [] with any missing labels is no longer supported. &quot;</span></span><br><span class="line"><span class="string">&quot;The following labels were missing: Index([0, 1], dtype=&#x27;object&#x27;). &quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Series切片"><a href="#Series切片" class="headerlink" title="Series切片"></a>Series切片</h3><p>Series索引的操作类似ndarray类型：</p>
<ul>
<li><p>  <strong>NumPy中对ndarray的运算和操作可用于Series类型。</strong></p>
</li>
<li><p>  可以通过自定义索引的列表进行切片。</p>
</li>
<li><p>  可以通过自动索引进行切片，如果存在自定义索引，则一同被切片。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;通过自动索引进行切片&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">4</span>]</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="string">&quot;&quot;&quot;对ndarray的运算和操作可用于Series类型&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[a&gt;a.median()]</span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="string">&quot;&quot;&quot;对ndarray的运算和操作可用于Series类型&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.exp(a)</span><br><span class="line">a     <span class="number">2.718282</span></span><br><span class="line">b     <span class="number">7.389056</span></span><br><span class="line">c    <span class="number">20.085537</span></span><br><span class="line">d    <span class="number">54.598150</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>

<h3 id="Series基础方法"><a href="#Series基础方法" class="headerlink" title="Series基础方法"></a>Series基础方法</h3><p>Series类型的操作类似Python字典类型</p>
<p><strong>通过自定义索引访问</strong>    <strong>保留字in操作</strong>    <strong>使用.get()方法</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;通过自定义索引访问&quot;&quot;&quot;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;保留字in操作&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;a&#x27;</span> <span class="keyword">in</span> a  <span class="comment"># &#x27;a&#x27;是a的索引</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;保留字in不判定自动索引&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> <span class="keyword">in</span> a  <span class="comment"># 0不在用户自定义索引中</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;使用.get()方法&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.get(<span class="string">&#x27;a&#x27;</span>,<span class="number">404</span>)  <span class="comment"># 从&#x27;a&#x27;中提取值</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;.get()方法,如该下标不存在，返回参数&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.get(<span class="string">&#x27;e&#x27;</span>,<span class="number">4</span>)  <span class="comment"># 如果&#x27;e&#x27;不存在，返回4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;.get()方法,下标可以是自动下标&quot;&quot;&quot;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.get(<span class="number">5</span>,<span class="string">&quot;404&quot;</span>)  <span class="comment"># 后置参数可以是4:int，也可以是str，o,list</span></span><br><span class="line"><span class="string">&#x27;404&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>多个Series对象自动对齐</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=pd.Series([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;z&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a+b</span><br><span class="line">a    <span class="number">4.0</span>  <span class="comment"># 4.0=a[&#x27;a&#x27;]+b[&#x27;a&#x27;]=1+3</span></span><br><span class="line">b    NaN  <span class="comment"># NaN=a[&#x27;b&#x27;]+b[&#x27;b&#x27;]=1+NaN</span></span><br><span class="line">c    NaN</span><br><span class="line">d    NaN</span><br><span class="line">y    NaN</span><br><span class="line">z    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure>

<p><strong>name属性</strong></p>
<p>Series有一个name属性，Series对象和索引都可以有一个名字，存储在属性.name中。</p>
<p>Series对象属性可以即刻修改</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.name=<span class="string">&quot;Series a&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;a&#x27;</span>]=<span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]=<span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">a    <span class="number">11</span></span><br><span class="line">b    <span class="number">22</span></span><br><span class="line">c    <span class="number">22</span></span><br><span class="line">d     <span class="number">4</span></span><br><span class="line">Name: Series a, dtype: int64</span><br></pre></td></tr></table></figure>

<h2 id="DateFrame类型"><a href="#DateFrame类型" class="headerlink" title="DateFrame类型"></a>DateFrame类型</h2><p>DataFrame类型由共用相同索引的一组数据列组成。</p>
<p>DataFrame是一个表格型的数据类型，每列值类型可以不同。</p>
<p>DataFrame既有行索引、也有列索引。</p>
<p>DataFrame常用于表达二维数据，也可以表达多维数据。</p>
<h3 id="DateFrame创建"><a href="#DateFrame创建" class="headerlink" title="DateFrame创建"></a>DateFrame创建</h3><p>由一维ndarray对象创建，由二维ndarray对象创建，由列表、字典、元组创建，由Series字典创建，由其他的DataFrame类型创建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="string">&quot;&quot;&quot;由一维ndarray创建&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=pd.DataFrame(np.arange(<span class="number">10</span>).reshape(<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">   <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span> 	<span class="comment"># 0 1 2 3 4表示自动索引</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line"><span class="number">1</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;由一维ndarray对象字典创建&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 创建一维ndarray对象字典</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt=&#123;<span class="string">&#x27;one&#x27;</span> : pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]),</span><br><span class="line">        <span class="string">&#x27;two&#x27;</span> : pd.Series([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])&#125;                                              </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt                                                                      </span><br><span class="line">&#123;<span class="string">&#x27;one&#x27;</span>: a    <span class="number">1</span>                                                              </span><br><span class="line">        b    <span class="number">2</span>                                                                      </span><br><span class="line">        c    <span class="number">3</span>                                                                      </span><br><span class="line">	dtype: int64, </span><br><span class="line"> <span class="string">&#x27;two&#x27;</span>: a    <span class="number">9</span>                                                 </span><br><span class="line">        b    <span class="number">8</span>                                                                      </span><br><span class="line">        c    <span class="number">7</span>                                                                      </span><br><span class="line">        d    <span class="number">6</span>                                                                      </span><br><span class="line">	dtype: int64&#125;    </span><br><span class="line"><span class="comment"># 创建DataFrame对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=pd.DataFrame(dt)  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d                   </span><br><span class="line">   one  two             </span><br><span class="line">a  <span class="number">1.0</span>    <span class="number">9</span>             </span><br><span class="line">b  <span class="number">2.0</span>    <span class="number">8</span>             </span><br><span class="line">c  <span class="number">3.0</span>    <span class="number">7</span>             </span><br><span class="line">d  NaN    <span class="number">6</span>   <span class="comment"># 缺少的值为NAN</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;对DataFrame对象表进行拖动,自动补齐&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.DataFrame(dt,index=[<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>],columns=[<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;three&#x27;</span>])</span><br><span class="line">   two three </span><br><span class="line">b    <span class="number">8</span>   NaN</span><br><span class="line">c    <span class="number">7</span>   NaN</span><br><span class="line">d    <span class="number">6</span>   NaN</span><br><span class="line"><span class="string">&quot;&quot;&quot;由列表类型的字典创建&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dl=&#123;<span class="string">&#x27;one&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="string">&#x27;two&#x27;</span>:[<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=pd.DataFrame(dl,index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">   one  two</span><br><span class="line">a    <span class="number">1</span>    <span class="number">9</span></span><br><span class="line">b    <span class="number">2</span>    <span class="number">8</span></span><br><span class="line">c    <span class="number">3</span>    <span class="number">7</span></span><br><span class="line">d    <span class="number">4</span>    <span class="number">6</span></span><br></pre></td></tr></table></figure>

<h3 id="DateFrame索引"><a href="#DateFrame索引" class="headerlink" title="DateFrame索引"></a>DateFrame索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;由列表类型的字典创建DataFrame对象&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dl=&#123;<span class="string">&#x27;one&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="string">&#x27;two&#x27;</span>:[<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=pd.DataFrame(dl,index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">   one  two</span><br><span class="line">a    <span class="number">1</span>    <span class="number">9</span></span><br><span class="line">b    <span class="number">2</span>    <span class="number">8</span></span><br><span class="line">c    <span class="number">3</span>    <span class="number">7</span></span><br><span class="line">d    <span class="number">4</span>    <span class="number">6</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;列th&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.columns </span><br><span class="line">Index([<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;行th&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.index </span><br><span class="line">Index([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;去掉表格的列和行,查看数据内容&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.values </span><br><span class="line">array([[<span class="number">1</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">2</span>, <span class="number">8</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">7</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">6</span>]], dtype=int64)</span><br><span class="line"><span class="string">&quot;&quot;&quot;查看单独一列&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;one&#x27;</span>]</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">Name: one, dtype: int64</span><br><span class="line"><span class="string">&quot;&quot;&quot;查看单独一行&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.loc[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">one    <span class="number">1</span></span><br><span class="line">two    <span class="number">9</span></span><br><span class="line">Name: a, dtype: int64</span><br><span class="line"><span class="string">&quot;&quot;&quot;查看具体一个数据&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;one&#x27;</span>][<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.loc[<span class="string">&#x27;a&#x27;</span>][<span class="string">&#x27;one&#x27;</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;one&#x27;</span>].a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.loc[<span class="string">&#x27;a&#x27;</span>].one</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="改变Series和DataFrame值"><a href="#改变Series和DataFrame值" class="headerlink" title="改变Series和DataFrame值"></a>改变Series和DataFrame值</h2><h3 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h3><p><code>.reindex()</code>可改变或者重排<code>Series</code>和<code>DataFrame</code>索引</p>
<p>但是索引的Index对象不可修改类型</p>
<p>详细方法<code>.reindex(index,columns,...)</code>：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>index,columns</td>
<td>新的行列自定义索引</td>
</tr>
<tr>
<td>fill_value</td>
<td>重新索引中，用于填充缺失位置的值</td>
</tr>
<tr>
<td>method</td>
<td>填充方法，ffill当前值向前填充，bfill向后填充</td>
</tr>
<tr>
<td>limit</td>
<td>最大填充量</td>
</tr>
<tr>
<td>copy</td>
<td>默认True，生成新的对象，False时，新旧相等不复制</td>
</tr>
</tbody></table>
<p>特别的，当重新索引时，<code>fill_value</code>用于填充缺失位置的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;由列表类型的字典创建&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dl=&#123;<span class="string">&#x27;one&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="string">&#x27;two&#x27;</span>:[<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=pd.DataFrame(dl,index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">   one  two</span><br><span class="line">a    <span class="number">1</span>    <span class="number">9</span></span><br><span class="line">b    <span class="number">2</span>    <span class="number">8</span></span><br><span class="line">c    <span class="number">3</span>    <span class="number">7</span></span><br><span class="line">d    <span class="number">4</span>    <span class="number">6</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;reindex重排行索引index&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=d.reindex(index=[<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">   one  two</span><br><span class="line">d    <span class="number">4</span>    <span class="number">6</span></span><br><span class="line">c    <span class="number">3</span>    <span class="number">7</span></span><br><span class="line">b    <span class="number">2</span>    <span class="number">8</span></span><br><span class="line">a    <span class="number">1</span>    <span class="number">9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;reindex重排列索引columns&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=d.reindex(columns=[<span class="string">&#x27;two&#x27;</span>,<span class="string">&#x27;one&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">   two  one</span><br><span class="line">a    <span class="number">9</span>    <span class="number">1</span></span><br><span class="line">b    <span class="number">8</span>    <span class="number">2</span></span><br><span class="line">c    <span class="number">7</span>    <span class="number">3</span></span><br><span class="line">d    <span class="number">6</span>    <span class="number">4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;reindex只能重排，不能重命名&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=d.reindex(index=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">   one  two</span><br><span class="line">A  NaN  NaN</span><br><span class="line">B  NaN  NaN</span><br><span class="line">C  NaN  NaN</span><br><span class="line">D  NaN  NaN</span><br><span class="line"><span class="string">&quot;&quot;&quot;reindex排错了 不可恢复&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=d.reindex(index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">   one  two</span><br><span class="line">a  NaN  NaN</span><br><span class="line">b  NaN  NaN</span><br><span class="line">c  NaN  NaN</span><br><span class="line">d  NaN  NaN</span><br><span class="line"><span class="string">&quot;&quot;&quot;初始化d&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=pd.DataFrame(dl,index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;插入新列，200填充&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_d=d.columns.insert(<span class="number">2</span>,<span class="string">&#x27;new&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_d</span><br><span class="line">Index([<span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;new&#x27;</span>], dtype=<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newd=d.reindex(columns=new_d,fill_value=<span class="number">200</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newd</span><br><span class="line">   two  one  new</span><br><span class="line">a    <span class="number">9</span>    <span class="number">1</span>  <span class="number">200</span></span><br><span class="line">b    <span class="number">8</span>    <span class="number">2</span>  <span class="number">200</span></span><br><span class="line">c    <span class="number">7</span>    <span class="number">3</span>  <span class="number">200</span></span><br><span class="line">d    <span class="number">6</span>    <span class="number">4</span>  <span class="number">200</span></span><br></pre></td></tr></table></figure>

<h3 id="按照索引修改数据"><a href="#按照索引修改数据" class="headerlink" title="按照索引修改数据"></a>按照索引修改数据</h3><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.append(index)</code></td>
<td>连接另一个Inedx对象，产生新的Index对象</td>
</tr>
<tr>
<td><code>.diff(index)</code></td>
<td>计算差集，产生新的Index对象</td>
</tr>
<tr>
<td><code>.intersection(index)</code></td>
<td>计算交际</td>
</tr>
<tr>
<td><code>.union(index)</code></td>
<td>计算并集</td>
</tr>
<tr>
<td><code>.delete(loc)</code></td>
<td>删除loc位置处的元素，loc只能是int下标</td>
</tr>
<tr>
<td><code>.insert(loc,e)</code></td>
<td>在loc位置处增加一个元素e</td>
</tr>
<tr>
<td><code>.drop(index)</code></td>
<td>删除指定行或列</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;由列表类型的字典创建&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dl=&#123;<span class="string">&#x27;one&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="string">&#x27;two&#x27;</span>:[<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=pd.DataFrame(dl,index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">   one  two</span><br><span class="line">a    <span class="number">1</span>    <span class="number">9</span></span><br><span class="line">b    <span class="number">2</span>    <span class="number">8</span></span><br><span class="line">c    <span class="number">3</span>    <span class="number">7</span></span><br><span class="line">d    <span class="number">4</span>    <span class="number">6</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;根据索引修改数据&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dc=d.columns.delete(<span class="number">0</span>)	<span class="comment"># 删除one列</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>di=d.index.insert(<span class="number">4</span>,<span class="string">&#x27;e&#x27;</span>)	<span class="comment"># 在4的位置(d的下边)插入e</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_new=d.reindex(index=di,columns=dc,method=<span class="string">&#x27;ffill&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_new</span><br><span class="line">   one</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line">e    <span class="number">4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;删除指定行&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_new=d_new.drop([<span class="string">&#x27;e&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_new</span><br><span class="line">   one</span><br><span class="line">a    <span class="number">1</span></span><br><span class="line">b    <span class="number">2</span></span><br><span class="line">c    <span class="number">3</span></span><br><span class="line">d    <span class="number">4</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;删除指定列&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.drop(<span class="string">&#x27;two&#x27;</span>,axis=<span class="number">1</span>)   <span class="comment"># Series只有0轴，DataFrame有1轴</span></span><br><span class="line">   one                             </span><br><span class="line">a    <span class="number">1</span>                             </span><br><span class="line">b    <span class="number">2</span>                             </span><br><span class="line">c    <span class="number">3</span>                             </span><br><span class="line">d    <span class="number">4</span>                             </span><br></pre></td></tr></table></figure>

<h2 id="数据四则运算"><a href="#数据四则运算" class="headerlink" title="数据四则运算"></a>数据四则运算</h2><p>算术运算根据行列索引，索引补齐后运算，运算默认产生浮点数。</p>
<p>补齐时缺项填充NaN（空值）</p>
<p>二维和一维、一维和零维间(标量)为广播运算(类似矩阵乘标量)</p>
<p>采用<code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>==</code> <code>!=</code>等符号进行的二元运算将产生布尔对象</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.add(d,**argws)</code></td>
<td>类型间加法运算，可选参数</td>
</tr>
<tr>
<td><code>.sub(d,**argws)</code></td>
<td>类型间减法运算，可选参数</td>
</tr>
<tr>
<td><code>.mul(d,**argws)</code></td>
<td>类型间乘法运算，可选参数</td>
</tr>
<tr>
<td><code>.div(d,**argws)</code></td>
<td>类型间除法运算，可选参数</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=pd.DataFrame(np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=pd.DataFrame(np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">   <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">1</span>  <span class="number">4</span>  <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line"><span class="number">2</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span><br><span class="line"><span class="number">0</span>   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span><br><span class="line"><span class="number">1</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span><br><span class="line"><span class="number">2</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span><br><span class="line"><span class="number">3</span>  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;加法运算&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a+b</span><br><span class="line">      <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span>   <span class="number">4</span></span><br><span class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">2.0</span>   <span class="number">4.0</span>   <span class="number">6.0</span> NaN</span><br><span class="line"><span class="number">1</span>   <span class="number">9.0</span>  <span class="number">11.0</span>  <span class="number">13.0</span>  <span class="number">15.0</span> NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">18.0</span>  <span class="number">20.0</span>  <span class="number">22.0</span>  <span class="number">24.0</span> NaN</span><br><span class="line"><span class="number">3</span>   NaN   NaN   NaN   NaN NaN</span><br><span class="line"><span class="comment"># 使用add(DataFrame,fill_value)方法,不存在的值按fill_value填充</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.add(a,fill_value=<span class="number">100</span>)</span><br><span class="line">       <span class="number">0</span>      <span class="number">1</span>      <span class="number">2</span>      <span class="number">3</span>      <span class="number">4</span></span><br><span class="line"><span class="number">0</span>    <span class="number">0.0</span>    <span class="number">2.0</span>    <span class="number">4.0</span>    <span class="number">6.0</span>  <span class="number">104.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">9.0</span>   <span class="number">11.0</span>   <span class="number">13.0</span>   <span class="number">15.0</span>  <span class="number">109.0</span></span><br><span class="line"><span class="number">2</span>   <span class="number">18.0</span>   <span class="number">20.0</span>   <span class="number">22.0</span>   <span class="number">24.0</span>  <span class="number">114.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">115.0</span>  <span class="number">116.0</span>  <span class="number">117.0</span>  <span class="number">118.0</span>  <span class="number">119.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;乘法运算&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a*b</span><br><span class="line">      <span class="number">0</span>     <span class="number">1</span>      <span class="number">2</span>      <span class="number">3</span>   <span class="number">4</span></span><br><span class="line"><span class="number">0</span>   <span class="number">0.0</span>   <span class="number">1.0</span>    <span class="number">4.0</span>    <span class="number">9.0</span> NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">20.0</span>  <span class="number">30.0</span>   <span class="number">42.0</span>   <span class="number">56.0</span> NaN</span><br><span class="line"><span class="number">2</span>  <span class="number">80.0</span>  <span class="number">99.0</span>  <span class="number">120.0</span>  <span class="number">143.0</span> NaN</span><br><span class="line"><span class="number">3</span>   NaN   NaN    NaN    NaN NaN</span><br><span class="line"><span class="comment"># 使用mul(DataFrame,fill_value)方法,不存在的值按fill_value填充</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.mul(a,fill_value=<span class="number">100</span>)</span><br><span class="line">        <span class="number">0</span>       <span class="number">1</span>       <span class="number">2</span>       <span class="number">3</span>       <span class="number">4</span></span><br><span class="line"><span class="number">0</span>     <span class="number">0.0</span>     <span class="number">1.0</span>     <span class="number">4.0</span>     <span class="number">9.0</span>   <span class="number">400.0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">20.0</span>    <span class="number">30.0</span>    <span class="number">42.0</span>    <span class="number">56.0</span>   <span class="number">900.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">80.0</span>    <span class="number">99.0</span>   <span class="number">120.0</span>   <span class="number">143.0</span>  <span class="number">1400.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">1500.0</span>  <span class="number">1600.0</span>  <span class="number">1700.0</span>  <span class="number">1800.0</span>  <span class="number">1900.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;广播减法&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a-<span class="number">100</span></span><br><span class="line">     <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">0</span> -<span class="number">100</span> -<span class="number">99</span> -<span class="number">98</span> -<span class="number">97</span></span><br><span class="line"><span class="number">1</span>  -<span class="number">96</span> -<span class="number">95</span> -<span class="number">94</span> -<span class="number">93</span></span><br><span class="line"><span class="number">2</span>  -<span class="number">92</span> -<span class="number">91</span> -<span class="number">90</span> -<span class="number">89</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;行列减法&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=pd.Series(np.arange(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="number">0</span>    <span class="number">0</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2</span></span><br><span class="line">dtype: int32</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sub(c,axis=<span class="number">0</span>)</span><br><span class="line">   <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"><span class="number">0</span>  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line"><span class="number">1</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></span><br><span class="line"><span class="number">2</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>    </span><br><span class="line"><span class="string">&quot;&quot;&quot;同维度比较运算&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=pd.DataFrame(np.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=pd.DataFrame(np.arange(<span class="number">1</span>,<span class="number">5</span>).reshape(<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c&gt;d</span><br><span class="line">       <span class="number">0</span>      <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="literal">False</span>  <span class="literal">False</span></span><br><span class="line"><span class="number">1</span>  <span class="literal">False</span>  <span class="literal">False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;二维与标量广播比较运算&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c&gt;<span class="number">0</span></span><br><span class="line">       <span class="number">0</span>     <span class="number">1</span></span><br><span class="line"><span class="number">0</span>  <span class="literal">False</span>  <span class="literal">True</span></span><br><span class="line"><span class="number">1</span>   <span class="literal">True</span>  <span class="literal">True</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;二维与一维比较运算&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e=pd.Series(np.arange(<span class="number">4</span>)) <span class="comment"># 默认在1轴</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a==e</span><br><span class="line">       <span class="number">0</span>      <span class="number">1</span>      <span class="number">2</span>      <span class="number">3</span></span><br><span class="line"><span class="number">0</span>   <span class="literal">True</span>   <span class="literal">True</span>   <span class="literal">True</span>   <span class="literal">True</span></span><br><span class="line"><span class="number">1</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span></span><br><span class="line"><span class="number">2</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span>  <span class="literal">False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;不同二维的比较运算&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a&gt;c</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">ValueError: Can only compare identically-labeled DataFrame objects</span><br></pre></td></tr></table></figure>

<h2 id="数据排序"><a href="#数据排序" class="headerlink" title="数据排序"></a>数据排序</h2><p>横轴axis=0，纵轴axis=1</p>
<h3 id="按照索引的排序"><a href="#按照索引的排序" class="headerlink" title="按照索引的排序"></a>按照索引的排序</h3><p><code>.sort_index()</code>在指定轴上根据索引进行排序，默认升序ascending=True</p>
<p><code>.sort_index(axis=0,ascending=True)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=pd.DataFrame(np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>),index=[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span><br><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span><br><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span><br><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span><br><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=b.sort_index()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span><br><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span><br><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span><br><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span><br><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=c.sort_index(axis=<span class="number">1</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">    <span class="number">4</span>   <span class="number">3</span>   <span class="number">2</span>   <span class="number">1</span>   <span class="number">0</span></span><br><span class="line">a   <span class="number">9</span>   <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span>   <span class="number">5</span></span><br><span class="line">b  <span class="number">19</span>  <span class="number">18</span>  <span class="number">17</span>  <span class="number">16</span>  <span class="number">15</span></span><br><span class="line">c   <span class="number">4</span>   <span class="number">3</span>   <span class="number">2</span>   <span class="number">1</span>   <span class="number">0</span></span><br><span class="line">d  <span class="number">14</span>  <span class="number">13</span>  <span class="number">12</span>  <span class="number">11</span>  <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="按照数据的排序"><a href="#按照数据的排序" class="headerlink" title="按照数据的排序"></a>按照数据的排序</h3><p><code>.sort_values()</code>在指定轴上根据数值进行排序，默认升序ascending=True</p>
<p><code>Series.sort_values(axis=0,ascending=True)</code></p>
<p><code>DataFrame.sort_values(by,axis=0,ascending=True)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b=pd.DataFrame(np.arange(<span class="number">20</span>).reshape(<span class="number">4</span>,<span class="number">5</span>),index=[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span><br><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span><br><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span></span><br><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></span><br><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;按照某一列的值进行排序&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=b.sort_values(<span class="number">2</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>	<span class="comment"># 参与排序的一列是</span></span><br><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span>  <span class="number">19</span>	<span class="comment"># 17</span></span><br><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>	<span class="comment"># 12 </span></span><br><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span>   <span class="number">9</span>	<span class="comment"># 7 </span></span><br><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span>	<span class="comment"># 2</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;按照某一行的值进行排序&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=c.sort_values(<span class="string">&#x27;a&#x27;</span>,axis=<span class="number">1</span>,ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">    <span class="number">4</span>   <span class="number">3</span>   <span class="number">2</span>   <span class="number">1</span>   <span class="number">0</span>	<span class="comment"># 参与排序的一行是</span></span><br><span class="line">b  <span class="number">19</span>  <span class="number">18</span>  <span class="number">17</span>  <span class="number">16</span>  <span class="number">15</span></span><br><span class="line">d  <span class="number">14</span>  <span class="number">13</span>  <span class="number">12</span>  <span class="number">11</span>  <span class="number">10</span></span><br><span class="line">a   <span class="number">9</span>   <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span>   <span class="number">5</span>	<span class="comment"># 9 8 7 6 5</span></span><br><span class="line">c   <span class="number">4</span>   <span class="number">3</span>   <span class="number">2</span>   <span class="number">1</span>   <span class="number">0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;NaN统一放到排序未尾&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=pd.DataFrame(np.zeros((<span class="number">4</span>,<span class="number">4</span>),dtype=<span class="built_in">int</span>),index=[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">   <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">c  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line">a  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line">d  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line">b  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=a+b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>   <span class="number">4</span></span><br><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span> NaN</span><br><span class="line">a   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span>   <span class="number">8</span> NaN</span><br><span class="line">d  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span> NaN</span><br><span class="line">b  <span class="number">15</span>  <span class="number">16</span>  <span class="number">17</span>  <span class="number">18</span> NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.sort_values(<span class="string">&#x27;a&#x27;</span>,axis=<span class="number">1</span>,ascending=<span class="literal">False</span>)</span><br><span class="line">    <span class="number">3</span>   <span class="number">2</span>   <span class="number">1</span>   <span class="number">0</span>   <span class="number">4</span>	<span class="comment"># 参与排序的一行是</span></span><br><span class="line">c   <span class="number">3</span>   <span class="number">2</span>   <span class="number">1</span>   <span class="number">0</span> NaN</span><br><span class="line">a   <span class="number">8</span>   <span class="number">7</span>   <span class="number">6</span>   <span class="number">5</span> NaN</span><br><span class="line">d  <span class="number">13</span>  <span class="number">12</span>  <span class="number">11</span>  <span class="number">10</span> NaN	<span class="comment"># 13 12 11 10</span></span><br><span class="line">b  <span class="number">18</span>  <span class="number">17</span>  <span class="number">16</span>  <span class="number">15</span> NaN</span><br></pre></td></tr></table></figure>

<h2 id="数据统计分析"><a href="#数据统计分析" class="headerlink" title="数据统计分析"></a>数据统计分析</h2><h3 id="基本统计分析函数"><a href="#基本统计分析函数" class="headerlink" title="基本统计分析函数"></a>基本统计分析函数</h3><p><strong>适用于Series和DataFrame类型</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.sum()</code></td>
<td>计算数据的总和，按0轴计算，下同</td>
</tr>
<tr>
<td><code>.count()</code></td>
<td>非NaN值的数量</td>
</tr>
<tr>
<td><code>.mean()</code>   <code>.median()</code></td>
<td>计算数据的算水平均值、算术中位数</td>
</tr>
<tr>
<td><code>.var()</code>   <code> .std()</code></td>
<td>计算数据的方差、标准差</td>
</tr>
<tr>
<td><code>.min()</code>   <code>.max()</code></td>
<td>计算数据的最小值、最大值</td>
</tr>
</tbody></table>
<p><strong>适用于Series类型</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.argmin()</code>    <code>.argmax()</code></td>
<td>计算数据最大值、最小值所在位置的索引位置（自动索引）</td>
</tr>
<tr>
<td><code>.idxmin()</code>    <code>.idxmax()</code></td>
<td>计算数据最大值、最小值所在位置的索引（自定义索引）</td>
</tr>
</tbody></table>
<p><strong>适用于Series和DataFrame类型</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.describe()</code></td>
<td>针对0轴（各列）的统计汇总</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="string">&quot;&quot;&quot;Series类型&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=pd.Series([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">a    <span class="number">9</span></span><br><span class="line">b    <span class="number">8</span></span><br><span class="line">c    <span class="number">7</span></span><br><span class="line">d    <span class="number">6</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="string">&quot;&quot;&quot;查看所有信息&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.describe()</span><br><span class="line">count    <span class="number">4.000000</span></span><br><span class="line">mean     <span class="number">7.500000</span></span><br><span class="line">std      <span class="number">1.290994</span></span><br><span class="line"><span class="built_in">min</span>      <span class="number">6.000000</span></span><br><span class="line"><span class="number">25</span>%      <span class="number">6.750000</span></span><br><span class="line"><span class="number">50</span>%      <span class="number">7.500000</span></span><br><span class="line"><span class="number">75</span>%      <span class="number">8.250000</span></span><br><span class="line"><span class="built_in">max</span>      <span class="number">9.000000</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="string">&quot;&quot;&quot;查看部分信息&quot;&quot;&quot;</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a.describe())</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">series</span>.<span class="title">Series</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span>.<span class="title">describe</span>()[&#x27;<span class="title">count</span>&#x27;]</span></span><br><span class="line"><span class="class">4.0</span></span><br><span class="line"><span class="class">&quot;&quot;&quot;<span class="title">DataFrame</span>类型&quot;&quot;&quot;</span></span><br><span class="line">&gt;&gt;&gt; b=pd.DataFrame(np.arange(8).reshape(4,2),index=[&#x27;c&#x27;,&#x27;a&#x27;,&#x27;d&#x27;,&#x27;b&#x27;])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">   <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">c  <span class="number">0</span>  <span class="number">1</span></span><br><span class="line">a  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">d  <span class="number">4</span>  <span class="number">5</span></span><br><span class="line">b  <span class="number">6</span>  <span class="number">7</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;查看所有信息&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.describe()</span><br><span class="line">              <span class="number">0</span>         <span class="number">1</span></span><br><span class="line">count  <span class="number">4.000000</span>  <span class="number">4.000000</span></span><br><span class="line">mean   <span class="number">3.000000</span>  <span class="number">4.000000</span></span><br><span class="line">std    <span class="number">2.581989</span>  <span class="number">2.581989</span></span><br><span class="line"><span class="built_in">min</span>    <span class="number">0.000000</span>  <span class="number">1.000000</span></span><br><span class="line"><span class="number">25</span>%    <span class="number">1.500000</span>  <span class="number">2.500000</span></span><br><span class="line"><span class="number">50</span>%    <span class="number">3.000000</span>  <span class="number">4.000000</span></span><br><span class="line"><span class="number">75</span>%    <span class="number">4.500000</span>  <span class="number">5.500000</span></span><br><span class="line"><span class="built_in">max</span>    <span class="number">6.000000</span>  <span class="number">7.000000</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;查看部分信息&quot;&quot;&quot;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(b)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">pandas</span>.<span class="title">core</span>.<span class="title">frame</span>.<span class="title">DataFrame</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&quot;&quot;&quot;查看一行&quot;&quot;&quot;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">b</span>.<span class="title">describe</span>().<span class="title">loc</span>[&#x27;<span class="title">count</span>&#x27;]</span></span><br><span class="line"><span class="class">0    4.0</span></span><br><span class="line"><span class="class">1    4.0</span></span><br><span class="line"><span class="class"><span class="title">Name</span>:</span> count, dtype: float64</span><br><span class="line"><span class="string">&quot;&quot;&quot;查看一列&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.describe()[<span class="number">0</span>]</span><br><span class="line">count    <span class="number">4.000000</span></span><br><span class="line">mean     <span class="number">3.000000</span></span><br><span class="line">std      <span class="number">2.581989</span></span><br><span class="line"><span class="built_in">min</span>      <span class="number">0.000000</span></span><br><span class="line"><span class="number">25</span>%      <span class="number">1.500000</span></span><br><span class="line"><span class="number">50</span>%      <span class="number">3.000000</span></span><br><span class="line"><span class="number">75</span>%      <span class="number">4.500000</span></span><br><span class="line"><span class="built_in">max</span>      <span class="number">6.000000</span></span><br><span class="line">Name: <span class="number">0</span>, dtype: float64</span><br></pre></td></tr></table></figure>

<h3 id="累计统计分析函数"><a href="#累计统计分析函数" class="headerlink" title="累计统计分析函数"></a>累计统计分析函数</h3><p><strong>适用于Series和DataFrame类型</strong>，累加计算</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.cumsum()</code></td>
<td>依次给出前1、2、…、n个数的和</td>
</tr>
<tr>
<td><code>.cumprod()</code></td>
<td>依次给出前1、2、…、n个数的积</td>
</tr>
<tr>
<td><code>.cummax()</code></td>
<td>依次给出前1、2、…、n个数的最大值</td>
</tr>
<tr>
<td><code>.cummin()</code></td>
<td>依次给出前1、2、…、n个数的最小值</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=pd.DataFrame(np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>),index=[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">a   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">d   <span class="number">8</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line">b  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;依次给出前1、2、…、n个数的和&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.cumsum()</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">a   <span class="number">4</span>   <span class="number">6</span>   <span class="number">8</span>  <span class="number">10</span> <span class="comment"># 4=0+4 6=1+5 8=6+2 10=3+7</span></span><br><span class="line">d  <span class="number">12</span>  <span class="number">15</span>  <span class="number">18</span>  <span class="number">21</span> <span class="comment"># 12=4+8 15=6+9 8=8+10 21=10+11</span></span><br><span class="line">b  <span class="number">24</span>  <span class="number">28</span>  <span class="number">32</span>  <span class="number">36</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;依次给出前1、2、...、n个数的积&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.cumprod()</span><br><span class="line">   <span class="number">0</span>    <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">c  <span class="number">0</span>    <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">a  <span class="number">0</span>    <span class="number">5</span>    <span class="number">12</span>    <span class="number">21</span> <span class="comment"># 0=0*0 5=5*1</span></span><br><span class="line">d  <span class="number">0</span>   <span class="number">45</span>   <span class="number">120</span>   <span class="number">231</span> <span class="comment"># 0=0*0 45=5*9</span></span><br><span class="line">b  <span class="number">0</span>  <span class="number">585</span>  <span class="number">1680</span>  <span class="number">3465</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;依次给出前1、2、...、n个数的最大值&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.cummax()</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">a   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">d   <span class="number">8</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line">b  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;依次给出前1、2、...、n个数的最小值&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.cummin()</span><br><span class="line">   <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">c  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">a  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">d  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br><span class="line">b  <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><strong>适用于Series和DataFrame类型</strong>，相邻计算</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.rolling(w).sum()</code></td>
<td>依次计算相邻w个元素的和</td>
</tr>
<tr>
<td><code>.rolling(w).mean()</code></td>
<td>依次计算相邻w个元素的算术平均值</td>
</tr>
<tr>
<td><code>.rolling(w).var()</code></td>
<td>依次计算相邻w个元素的方差</td>
</tr>
<tr>
<td><code>.rolling(w).std()</code></td>
<td>依次计算相邻w个元素的标准差</td>
</tr>
<tr>
<td><code>.rolling(w).min().max()</code></td>
<td>依次计算相邻w个元素的最小值和最大值</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=pd.DataFrame(np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>),index=[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;d&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">c   <span class="number">0</span>   <span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line">a   <span class="number">4</span>   <span class="number">5</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line">b   <span class="number">8</span>   <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span></span><br><span class="line">d  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>  <span class="number">15</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;依次计算相邻2个行元素的和&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.rolling(<span class="number">2</span>).<span class="built_in">sum</span>()</span><br><span class="line">      <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">c   NaN   NaN   NaN   NaN <span class="comment"># NaN=0+NaN</span></span><br><span class="line">a   <span class="number">4.0</span>   <span class="number">6.0</span>   <span class="number">8.0</span>  <span class="number">10.0</span> <span class="comment"># 4.0=0+4</span></span><br><span class="line">b  <span class="number">12.0</span>  <span class="number">14.0</span>  <span class="number">16.0</span>  <span class="number">18.0</span> <span class="comment"># 12.0=4.0+8.0</span></span><br><span class="line">d  <span class="number">20.0</span>  <span class="number">22.0</span>  <span class="number">24.0</span>  <span class="number">26.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;依次计算相邻3个行元素的和&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.rolling(<span class="number">3</span>).<span class="built_in">sum</span>()</span><br><span class="line">      <span class="number">0</span>     <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">c   NaN   NaN   NaN   NaN</span><br><span class="line">a   NaN   NaN   NaN   NaN</span><br><span class="line">b  <span class="number">12.0</span>  <span class="number">15.0</span>  <span class="number">18.0</span>  <span class="number">21.0</span></span><br><span class="line">d  <span class="number">24.0</span>  <span class="number">27.0</span>  <span class="number">30.0</span>  <span class="number">33.0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;依次计算相邻3个列元素的和&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.rolling(<span class="number">3</span>,axis=<span class="number">1</span>).<span class="built_in">sum</span>()</span><br><span class="line">    <span class="number">0</span>   <span class="number">1</span>     <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">c NaN NaN   <span class="number">3.0</span>   <span class="number">6.0</span></span><br><span class="line">a NaN NaN  <span class="number">15.0</span>  <span class="number">18.0</span></span><br><span class="line">b NaN NaN  <span class="number">27.0</span>  <span class="number">30.0</span></span><br><span class="line">d NaN NaN  <span class="number">39.0</span>  <span class="number">42.0</span></span><br></pre></td></tr></table></figure>

<h2 id="数据相关分析"><a href="#数据相关分析" class="headerlink" title="数据相关分析"></a>数据相关分析</h2><p>X与Y两个值：</p>
<ul>
<li><p>  X增大，Y增大，两个变量正相关。</p>
</li>
<li><p>  X增大，Y减小，两个变量负相关。</p>
</li>
</ul>
<p><strong>协方差</strong><br>$$<br>cov(X,Y)=\frac<br>{\sum_{i=1}^n(X_i-\overline X)(Y_i-\overline Y)}<br>{n-1}<br>$$</p>
<ul>
<li><p>  协方差&gt;0，X和Y正相关</p>
</li>
<li><p>  协方差&lt;0，X和Y负相关</p>
</li>
<li><p>  协方差=0，X和Y无关</p>
</li>
</ul>
<p><strong>Pearson相关系数</strong><br>$$<br>r=\frac<br>{\sum_{r=1}^n(x_i-\overline x)(y_i-\overline y)}<br>{\sqrt{\sum_{i=1}^n(x_i-\overline x)^2}\sqrt{\sum_{i=1}^n(x_i-\overline x)^2}}<br>$$<br>r就是相关系数    取值范围[-1,1]</p>
<ul>
<li>  0.8-1.0 极强相关    </li>
<li>  0.6-0.8强相关</li>
<li>  0.4-0.6中等相关</li>
<li>  0.2-0.4弱相关    </li>
<li>  0.0-0.2极弱相关或无相关</li>
</ul>
<p><strong>适用于Series和DataFrame类型</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.cov()</code></td>
<td>计算协方差矩阵</td>
</tr>
<tr>
<td><code>.corr()</code></td>
<td>计算相关系数矩阵，Pearson、Spearman、Kendall等系数</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hprice=pd.Series([<span class="number">3.04</span>,<span class="number">22.93</span>,<span class="number">12.75</span>,<span class="number">22.6</span>,<span class="number">12.33</span>],index=[<span class="string">&#x27;2008&#x27;</span>,<span class="string">&#x27;2009&#x27;</span>,<span class="string">&#x27;2010&#x27;</span>,<span class="string">&#x27;2011&#x27;</span>,<span class="string">&#x27;2012&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m2=pd.Series([<span class="number">8.18</span>,<span class="number">18.38</span>,<span class="number">9.13</span>,<span class="number">7.82</span>,<span class="number">6.69</span>],index=[<span class="string">&#x27;2008&#x27;</span>,<span class="string">&#x27;2009&#x27;</span>,<span class="string">&#x27;2010&#x27;</span>,<span class="string">&#x27;2011&#x27;</span>,<span class="string">&#x27;2012&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hprice</span><br><span class="line"><span class="number">2008</span>     <span class="number">3.04</span></span><br><span class="line"><span class="number">2009</span>    <span class="number">22.93</span></span><br><span class="line"><span class="number">2010</span>    <span class="number">12.75</span></span><br><span class="line"><span class="number">2011</span>    <span class="number">22.60</span></span><br><span class="line"><span class="number">2012</span>    <span class="number">12.33</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m2</span><br><span class="line"><span class="number">2008</span>     <span class="number">8.18</span></span><br><span class="line"><span class="number">2009</span>    <span class="number">18.38</span></span><br><span class="line"><span class="number">2010</span>     <span class="number">9.13</span></span><br><span class="line"><span class="number">2011</span>     <span class="number">7.82</span></span><br><span class="line"><span class="number">2012</span>     <span class="number">6.69</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="string">&quot;&quot;&quot;计算相关系数矩阵,r&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hprice.corr(m2)</span><br><span class="line"><span class="number">0.5239439145220387</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL2+linux配置流程超详细指南</title>
    <url>/2021/02/08/wsl2-linux-pei-zhi-liu-cheng-chao-xiang-xi-zhi-nan/</url>
    <content><![CDATA[<h1 id="WSL2-linux配置流程超详细指南"><a href="#WSL2-linux配置流程超详细指南" class="headerlink" title="WSL2+linux配置流程超详细指南"></a>WSL2+linux配置流程超详细指南</h1><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053420.png?raw=true" alt="再也不用问“debian系如何安装qq”这样的傻批问题了"></div><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053422.png?raw=true" alt="win10最全面的安全工具是kali"></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053405.png" alt="甚至还可以远程开发"></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053421.png?raw=true" alt="状态栏两个系统的文件管理器，我愿称之为梦幻combo"></div></div></div>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>为什么说最好的linux发行版是windows子系统？</strong></p>
<p>这几天把win10重装后一直在整蛊软件，系统迁移-系统安装这篇记录写到一半，才把win10部分写完，linux系统部分就没下文了。这是为什么呢，<del>这是因为守望先锋出新年活动了</del>，其实是因为我玩了几天manjaro后，充分认识到了纯linux作为桌面环境的无奈和局限性：各种工具、插件的配置，源与代理，办公软件的替代与安装，字体渲染，浏览器同步等等大大小小的问题，真实老折磨人了。国外桌面环境软件到国内日常使用确实是各种水土不服，（现在进一步认识到deepin用爱发电的真诚），到头来各办公软件还得是deepin-wine-XXX，转了一圈截图、资源监视器等软件还得是dde自带的最好用。虽然yay确实比apt香，而且manjaro对双显卡支持更好，但是优雅的gnome3桌面必须跟一堆插件才能满足日常使用，定制性强的kde5桌面必须配置一大坨东西才跟得上审美要求。</p>
<p>最后，我把目光投向了win10的linux子系统，WSL2（Windows Subsystem for Linux）。</p>
<p>在win10的基础上，可以完成linux的大部分要求。win10文件资源自动挂载到linux的/mnt，无需考虑文件系统的问题从而实现无缝切换，性能比VMWare高，内存占用更低，VSCode对WSL的支持贼棒。最重要的一点是，不折腾，搞炸了就删掉，代码全在win10里，稳得一批，不需要花大精力在操作系统上，专心软件就行了。</p>
<blockquote>
<p>这篇文章最好的参考是官网文档 <a href="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-vscode">适用于 Linux 的 Windows 子系统文档</a></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>正好win10里没怎么装安全相关的工具，与其一个一个装，不如虚拟机装个kali，全齐了，到时候用不上了删掉也方便，没有垃圾文件残留用户文件夹。</p>
<p>具体流程可以看微软官方的这篇帖子，讲的最正规的了：</p>
<blockquote>
<p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#manual-installation-steps">适用于 Linux 的 Windows 子系统安装指南 (Windows 10)—-日期：2020/09/15</a></p>
</blockquote>
<p>但是我是看的民间版本，这个流程更加简单无脑：</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/246595603">在Windows运行完整的Linux桌面GUI！Kali on WSL2安装与简单配置指南—-日期：2020/09/15</a></p>
</blockquote>
<p>下面我要开始复制粘贴了，顺便更正一些东西。</p>
<h3 id="升级系统"><a href="#升级系统" class="headerlink" title="升级系统"></a>升级系统</h3><p>首先检查当前系统版本，按Win+R，输入winver，可以看到当前的系统版本：</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053406.jpg" alt="原作者的版本"></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209122150.png" alt="我的版本"></div></div></div>
<p>此处显然，19042是要比19041要更新的，毕竟我的系统镜像前几天从官网下的，所以向后兼容。<br>如果不是2004版本的话，要把系统升级到2004版本，微软说是有推送，但时好时坏，检查不到更新的同学请自行下载官方的“易升”工具检查更新</p>
<blockquote>
<p><a href="https://www.microsoft.com/zh-cn/software-download/windows10">下载 Windows 10 (microsoft.com)</a>：更新助手可以帮助你更新到 Windows 10 的最新版本。若要开始更新，请单击“<strong>立即更新</strong>”。</p>
</blockquote>
<h3 id="启用Linux子系统"><a href="#启用Linux子系统" class="headerlink" title="启用Linux子系统"></a>启用Linux子系统</h3><p>在升级到2004版之后，可以开始安装系统了，如果没有启用Linux子系统的话，得先启用。</p>
<div class="note info"><p>PS：由于WSL2是使用Hyper-V虚拟机的，所以开启之后会和VMware、VirtualBox冲突，可以通过升级VMware和Vbox到支持HyperV的版本解决。</p>
</div>

<p>使用管理员权限打开PowerShell，输入以下命令，启用Linux子系统：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span></span><br></pre></td></tr></table></figure>

<p><strong>重启系统。</strong></p>
<h3 id="启用虚拟化"><a href="#启用虚拟化" class="headerlink" title="启用虚拟化"></a>启用虚拟化</h3><p>使用管理员权限打开PowerShell，输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure>

<p><strong>重启系统。</strong></p>
<h3 id="下载WSL2的Linux内核"><a href="#下载WSL2的Linux内核" class="headerlink" title="下载WSL2的Linux内核"></a>下载WSL2的Linux内核</h3><blockquote>
<p>介绍地址：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">步骤 4 - 下载 Linux 内核更新包</a><br>下载直链：<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">适用于 x64 计算机的 WSL2 Linux 内核更新包</a></p>
</blockquote>
<p>下载后安装。</p>
<h3 id="设置子系统的默认版本为WSL2"><a href="#设置子系统的默认版本为WSL2" class="headerlink" title="设置子系统的默认版本为WSL2"></a>设置子系统的默认版本为WSL2</h3><p>使用管理员权限打开PowerShell，输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="安装Kali-Linux"><a href="#安装Kali-Linux" class="headerlink" title="安装Kali Linux"></a><strong>安装Kali Linux</strong></h3><p>打开应用商店，搜索安装Kali Linux。装ubuntu也行，记得装评分最好的。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053409.png"></p>
<p>安装完成后选择“启动”，就会开始解压安装，然后输入用户名和密码就ok了。</p>
<h3 id="升级原有linux系统到WSL2"><a href="#升级原有linux系统到WSL2" class="headerlink" title="升级原有linux系统到WSL2"></a>升级原有linux系统到WSL2</h3><p>如果原本就安装有WSL，可以直接升级到WSL2。<br>使用管理员权限打开PowerShell，输入以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-version</span> kali<span class="literal">-linux</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="安装Win-Kex图形界面包"><a href="#安装Win-Kex图形界面包" class="headerlink" title="安装Win-Kex图形界面包"></a>安装Win-Kex图形界面包</h3><p>Win-Kex工具包是Kali提供的在Windows上运行的图形化工具包，可以一键傻瓜式在WSL中跑图形界面。<br>在Kali命令行中输入命令安装：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install kali<span class="literal">-win</span><span class="literal">-kex</span></span><br></pre></td></tr></table></figure>

<p>安装完成后就可以启动图像界面了，命令如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ <span class="comment"># 注意要先切换当前目录到home目录再启动kex，不然会获取不到key。</span></span><br><span class="line"><span class="comment"># 模式kex是启用全屏模式，和窗口模式同使用vnc连接，若vnc报错可尝试另外两种方式，占用内存相对更大。</span></span><br><span class="line">kex</span><br><span class="line"><span class="comment"># 窗口模式，缺点是VNC容易出问题</span></span><br><span class="line">kex -<span class="literal">-win</span> <span class="literal">-s</span></span><br><span class="line"><span class="comment"># 增强会话模式，缺点是和有一个类似工具栏的小窗口，命令太长记不住</span></span><br><span class="line">kex -<span class="literal">-esm</span> -<span class="literal">-ip</span> <span class="literal">-s</span></span><br><span class="line"><span class="comment"># 无缝模式，缺点是应用的字体渲染清新脱俗</span></span><br><span class="line">kex -<span class="literal">-sl</span> <span class="literal">-s</span></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">kex stop</span><br></pre></td></tr></table></figure>

<p>第一次启动会让你输入一个新密码，这个密码是作为kex的连接密码保存起来。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><div class="note danger"><p>说在前面，如果你对系统进行了<code>update</code> + <code>upgrade</code>的全面升级，开始菜单许多软件的启动link会失效，另外，这十有八九导致了我<code>kex --win -s</code>出现<code>TigerVNC Viewer : 10061</code>错误，窗口化模式挂掉。虽然可以用其它可视化模式替代，但还是请谨慎操作。</p>
</div>

<h3 id="换国内kali源"><a href="#换国内kali源" class="headerlink" title="换国内kali源"></a>换国内kali源</h3><blockquote>
<p>查看帖子：<a href="https://blog.n0ts.cn/574.html">https://blog.n0ts.cn/574.html</a></p>
</blockquote>
<div class="note info"><p>如果你有代理，可以无所畏惧，这步省略即可，用官网的源是最稳的，没有就代理老老实实换个源吧，不然下载kali工具包可能会出事。</p>
</div>

<p><strong>kali源：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#官方：deb http://http.kali.org/kali kali-rolling main contrib non-free</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#中科大</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali<span class="literal">-rolling</span> main non<span class="literal">-free</span> contrib</span><br><span class="line">deb<span class="literal">-src</span> http://mirrors.ustc.edu.cn/kali kali<span class="literal">-rolling</span> main non<span class="literal">-free</span> contrib</span><br><span class="line"></span><br><span class="line"><span class="comment">#阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/kali kali<span class="literal">-rolling</span> main non<span class="literal">-free</span> contrib</span><br><span class="line">deb<span class="literal">-src</span> http://mirrors.aliyun.com/kali kali<span class="literal">-rolling</span> main non<span class="literal">-free</span> contrib</span><br><span class="line"></span><br><span class="line"><span class="comment">#清华大学</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali<span class="literal">-rolling</span> main contrib non<span class="literal">-free</span></span><br><span class="line">deb<span class="literal">-src</span> https://mirrors.tuna.tsinghua.edu.cn/kali kali<span class="literal">-rolling</span> main contrib non<span class="literal">-free</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#浙大</span></span><br><span class="line">deb http://mirrors.zju.edu.cn/kali kali<span class="literal">-rolling</span> main contrib non<span class="literal">-free</span></span><br><span class="line">deb<span class="literal">-src</span> http://mirrors.zju.edu.cn/kali kali<span class="literal">-rolling</span> main contrib non<span class="literal">-free</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#东软大学</span></span><br><span class="line">deb http://mirrors.neusoft.edu.cn/kali kali<span class="literal">-rolling</span>/main non<span class="literal">-free</span> contrib</span><br><span class="line">deb<span class="literal">-src</span> http://mirrors.neusoft.edu.cn/kali kali<span class="literal">-rolling</span>/main non<span class="literal">-free</span> contrib</span><br></pre></td></tr></table></figure>

<p><strong>更新镜像源方法：</strong></p>
<p>编辑 <code>vi /etc/apt/sources.list</code><br>添加镜像源到文件中，随意一个即可，保存退出<br>执行<code>apt-get update</code> 更新包 </p>
<div class="note danger no-icon"><p>执行<code>apt-get upgrade </code>更新依赖关系包 (请谨慎选择，更新强迫症非要执行这条命令也没关系)</p>
</div>

<p>执行<code>apt-get dist-upgrade</code> 分析依赖关系包进行升级<br>执行<code>apt-get clean</code> 清理多余的安装包 </p>
<h3 id="汉化命令行"><a href="#汉化命令行" class="headerlink" title="汉化命令行"></a>汉化命令行</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install locales</span><br><span class="line">sudo dpkg<span class="literal">-reconfigure</span> locales</span><br></pre></td></tr></table></figure>

<p>空格选中<code>en_US UTF8</code>与<code>zh_CN UTF8</code>并回车，然后选中<code>zh_CN UTF8</code>回车，选择系统语言。</p>
<p><strong>安装中文字体：</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install xfonts<span class="literal">-intl</span><span class="literal">-chinese</span> ttf<span class="literal">-wqy</span><span class="literal">-microhei</span></span><br></pre></td></tr></table></figure>

<p>随后会提示是否将home用户文件夹下的文件名（<strong>desktop</strong>改为<strong>桌面</strong>），建议还是desktop吧，切目录时省了切换中文输入法。</p>
<h3 id="安装Kali-Linux工具包"><a href="#安装Kali-Linux工具包" class="headerlink" title="安装Kali Linux工具包"></a>安装Kali Linux工具包</h3><ol>
<li><p>安装标准工具包</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt install kali<span class="literal">-linux</span><span class="literal">-default</span></span><br></pre></td></tr></table></figure>

<p> <strong>或者</strong></p>
<p> 安装大工具包（大概7、8G，建议标准工具包就行了）</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt install kali<span class="literal">-linux</span><span class="literal">-large</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="配置Windows-Terminal快捷方式"><a href="#配置Windows-Terminal快捷方式" class="headerlink" title="配置Windows Terminal快捷方式"></a>配置Windows Terminal快捷方式</h3><p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053408.png?raw=true"></p>
<p>命令行输入kali可以打开虚拟机，也可以在Windows Terminal中配置快捷方式，下次就可以通过这个下拉菜单打开Kex的图形界面了。</p>
<p>另外，每次打开kali时，有一个python2作为python向后兼容的提示：</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053410.png?raw=true">提示下面建议在~/目录下新建一个.hushlogin的空文件，照做就行了。</p>
<h3 id="简单配置下root密码"><a href="#简单配置下root密码" class="headerlink" title="简单配置下root密码"></a>简单配置下root密码</h3><p>使用linux的第一步给删除加一个确认，防止手残党自取灭亡。后续可给rm加装回收站功能：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">alias <span class="built_in">rm</span>=<span class="string">&quot;rm -iv&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后给你的管理员设个密码，因为有一些命令只能由root执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br><span class="line">新的 密码：</span><br><span class="line">重新输入新的 密码：</span><br><span class="line">passwd：已成功更新密码</span><br><span class="line">su / su m4 切换用户</span><br></pre></td></tr></table></figure>

<p><strong>配置Windows Terminal快捷方式方法：</strong></p>
<blockquote>
<p>更详细的配置方法查看kali官方文档：<a href="https://www.kali.org/docs/wsl/win-kex/">https://www.kali.org/docs/wsl/win-kex/</a> ，我后面也会详细介绍。</p>
</blockquote>
<p>打开Windows Terminal的配置文件，加入以下配置项：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Win-KeX&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;wsl kex wtstart&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后点击“Win-Kex”菜单项就可以直接启动图形界面了。</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053411.png?raw=true"></p>
<p>按照刚才的配置会默认进入全屏界面：</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053424.png?raw=true"></p>
<p>看到上面的提示没有？<strong>press F8 to open the context menu</strong>。按F8进入菜单，退出图形界面。</p>
<h3 id="图形界面可能出现的问题"><a href="#图形界面可能出现的问题" class="headerlink" title="图形界面可能出现的问题"></a>图形界面可能出现的问题</h3><h4 id="dbus-launch"><a href="#dbus-launch" class="headerlink" title="dbus-launch"></a>dbus-launch</h4><p>WSL报错<code>Failed to execute child process “dbus-launch” (No such file or directory)</code>，这是因为缺少相关程序，安装即可：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install x11<span class="literal">-xserver</span><span class="literal">-utils</span> dconf<span class="literal">-editor</span> dbus<span class="literal">-x11</span> <span class="literal">-y</span></span><br></pre></td></tr></table></figure>

<h4 id="Error-0x80370102"><a href="#Error-0x80370102" class="headerlink" title="Error 0x80370102"></a>Error 0x80370102</h4><p>图形界面基于VNC程序，我配置时出现了<code>Error 0x80370102</code> ，这是因为第一次配置失败我卸载了一次，将win10部分功能移除了，完全卸载方法我会在后文提到，这里说一下<code>Error 0x80370102</code>的处理办法：</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/147233604?from_voters_page=true">wsl2的Error 0x80370102 解决方案</a></p>
</blockquote>
<p>解决问题主要是3步</p>
<ul>
<li>安装条件检查<br>  按照指南安装<br>  恢复到初始状态</li>
</ul>
<p><strong>安装条件检查：</strong></p>
<ol>
<li>任务管理器-&gt;性能：若未启用系统虚拟化，前去BIOS打开。</li>
</ol>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053412.png?raw=true"></p>
<ol start="2">
<li>开启虚拟机平台功能和windows子系统：</li>
</ol>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053413.png?raw=true"></p>
<ol start="3">
<li><p>管理员启动powershell，启用win10功能：</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> Microsoft<span class="literal">-Hyper</span><span class="literal">-V</span> <span class="literal">-All</span></span><br><span class="line"><span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> VirtualMachinePlatform</span><br><span class="line"><span class="built_in">Enable-WindowsOptionalFeature</span> <span class="literal">-Online</span> <span class="literal">-FeatureName</span> Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>按照教程再安装一遍</p>
</li>
</ol>
<div class="note info"><p>如果还不成功，记得在bash中运行<code>kex stop</code>，然后重新启动kex。</p>
</div>

<h4 id="虚拟机系统占用过高"><a href="#虚拟机系统占用过高" class="headerlink" title="虚拟机系统占用过高"></a>虚拟机系统占用过高</h4><p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053415.png?raw=true"></p>
<p>调整虚拟机的内存设置，在用户目录创建个.wslconfig文件, 在powershell中切换到~目录，输入<code>notepad .wslconifg</code>，提示新建文件，填入设置参数如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">memory=2GB</span><br><span class="line">swap=0</span><br></pre></td></tr></table></figure>

<p>另外，用完子系统后，务必记得powershell命令shutdown:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-shutdown</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053423.png?raw=true"></p>
<p>我们看到，WSL是没有关闭和重启选项的，子系统里也不能通过shutdown关闭，把windows termian的shell标签叉掉，虚拟机系统仍然在运行。所以不用了记得在powershell使用shutdown命令关闭。<br>此外，关闭窗口模式的命令是<code>kex stop</code>，可以一起记一下。</p>
<p>关于内存占用，如果这个办法不奏效，可以看这位博主的帖子，他提到是Hyper-V的后台占用。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/277825426">Win10中Vmmem程序资源占用过高解决办法</a></p>
</blockquote>
<h4 id="kex默认模式出现vnc错误：10061"><a href="#kex默认模式出现vnc错误：10061" class="headerlink" title="kex默认模式出现vnc错误：10061"></a>kex默认模式出现vnc错误：10061</h4><p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053414.png?raw=true"></p>
<p>这个是vnc错误，我第一次启动成功没问题，后续出现了这个错误。查了好久没有解决方法，想了一下，可能是之后做了update和upgrade导致了错误。你可以在Stack Exchange社区的<code>[windows-subsystem-for-linux]</code>话题下查找<code>TigerVNC</code>关键字找到此issues：<a href="https://unix.stackexchange.com/search?q=%5Bwindows-subsystem-for-linux%5D+tigervnc">Posts containing ‘tigervnc’ - Unix &amp; Linux Stack Exchange</a></p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209192601.png"></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209192619.png"></div></div></div>

<p><strong>解决方案：</strong></p>
<p><code>kex stop</code>+<code>kex</code>重启<br>实在不行可以采用其他方式开启虚拟机：</p>
<ul>
<li>增强会话模式<code>kex --esm --ip -s</code><br>  无缝模式<code>kex --sl -s</code></li>
</ul>
<p>因为其他模式没有使用TigerVnc程序。详情查看下一节<strong>更多图形界面的模式</strong>。<br>如果一定要使用kex启动，重装kali吧，具体办法可以看结尾的<strong>卸载WSL</strong>。</p>
<h3 id="更多图形界面的模式"><a href="#更多图形界面的模式" class="headerlink" title="更多图形界面的模式"></a>更多图形界面的模式</h3><p>在kali官网提供了Win-KeX Version 2.0的说明文档：</p>
<blockquote>
<p><a href="https://www.kali.org/docs/wsl/win-kex/">Win-KeX三种模式手册</a><br><a href="https://www.kali.org/news/win-kex-version-2-0/">Win-KeX Version 2.0更新说明—-2020.11.18</a> </p>
</blockquote>
<p><strong>翻译+整合，如下：</strong></p>
<p>我们很高兴向您介绍<strong>Win-KeX v2.0</strong>，它具有以下功能：</p>
<ul>
<li><strong>Win - kex Sl （无缝版）</strong> – 再见边界</li>
<li><strong>声音支持</strong></li>
<li><strong>多会话支持</strong></li>
<li><strong>KeX 会话可以作为根会话运行</strong></li>
<li><strong>能够从任何地方启动”kex”</strong> - 无需再将 CDing 引入 Kali 文件系统</li>
<li><strong>共享剪贴板</strong>– 在 Kali 和 Windows 应用之间剪切和粘贴内容</li>
</ul>
<p>Win-KeX 的安装一如既往的轻松：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt upgrade &amp;&amp; sudo apt install <span class="literal">-y</span> kali<span class="literal">-win</span><span class="literal">-kex</span></span><br></pre></td></tr></table></figure>

<p>更多安装流程查看：<a href="https://www.kali.org/docs/wsl/win-kex/">Win-Kex安装</a></p>
<p><strong>Win-KeX 现在支持模式有：</strong></p>
<h4 id="窗口模式-win"><a href="#窗口模式-win" class="headerlink" title="窗口模式(win)"></a>窗口模式(win)</h4><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209055133.png"></p>
<p>若要在具有声音支持的窗口模式下启动 Win-KeX，请运行<br><code>kex --win -s</code><br>terminal配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Basic Win-KeX in window mode with sound:</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Win-KeX&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;wsl -d kali-linux kex --wtstart -s&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//Advanced Win-KeX in window mode with sound - Kali icon and start in kali home directory:</span></span><br><span class="line"><span class="comment">//将 kali 菜单.png图标复制到图片目录，并将该图标和启动目录添加到配置：</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;file:///c:/users/&lt;windows user&gt;/pictures/icons/kali-menu.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Win-KeX&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;wsl -d kali-linux kex --wtstart -s&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;startingDirectory&quot;</span> : <span class="string">&quot;//wsl$/kali-linux/home/&lt;kali user&gt;&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>有关详细信息，<a href="https://www.kali.org/docs/wsl/win-kex-win/">请参阅 Win-KeX Win</a>使用文档。</p>
<h4 id="增强的会话模式-esm"><a href="#增强的会话模式-esm" class="headerlink" title="增强的会话模式(esm)"></a>增强的会话模式(esm)</h4><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209055137.png"></p>
<p>若要在增强会话模式下启动 Win-KeX，并配有声音支持和手臂解决方法，请运行<br><code>kex --esm --ip -s</code><br>terminal配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Basic Win-KeX in ESM mode with sound:</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;55ca431a-3a87-5fb3-83cd-11ecedc031d2&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Win-KeX&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;wsl -d kali-linux kex --esm --wtstart -s&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//Advanced Win-KeX in ESM mode with sound - Kali icon and start in kali home directory:</span></span><br><span class="line"><span class="comment">//将 kali 菜单.png图标复制到图片目录，并将该图标和启动目录添加到配置：</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;55ca431a-3a87-5fb3-83cd-11ecedd031d2&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;file:///c:/users/&lt;windows user&gt;/pictures/icons/kali-menu.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Win-KeX&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;wsl -d kali-linux kex --esm --wtstart -s&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;startingDirectory&quot;</span> : <span class="string">&quot;//wsl$/kali-linux/home/&lt;kali user&gt;&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>有关详细信息，<a href="https://www.kali.org/docs/wsl/win-kex-esm/">请参阅 Win-KeX ESM</a>使用文档。</p>
<h4 id="无缝模式-sl"><a href="#无缝模式-sl" class="headerlink" title="无缝模式(sl)"></a>无缝模式(sl)</h4><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209055109.png"></p>
<p>要启动 Win-KeX 在无缝模式与声音支持，运行<br><code>kex --sl -s</code><br>terminal配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Basic Win-KeX in seamless mode with sound:</span></span><br><span class="line">&#123;</span><br><span class="line">      <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Win-KeX&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;wsl -d kali-linux kex --sl --wtstart -s&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//Advanced Win-KeX in seamless mode with sound - Kali icon and start in kali home directory:</span></span><br><span class="line"><span class="comment">//将 kali 菜单.png图标复制到图片目录，并将该图标和启动目录添加到配置：</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;55ca431a-3a87-5fb3-83cd-11ececc031d2&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;icon&quot;</span>: <span class="string">&quot;file:///c:/users/&lt;windows user&gt;/pictures/icons/kali-menu.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Win-KeX&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;wsl -d kali-linux kex --sl --wtstart -s&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;startingDirectory&quot;</span> : <span class="string">&quot;//wsl$/kali-linux/home/&lt;kali user&gt;&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>有关更多信息，请参考<a href="https://www.kali.org/docs/wsl/win-kex-sl">Win-KeX SL 使用文档</a></p>
<h4 id="启用声音"><a href="#启用声音" class="headerlink" title="启用声音"></a>启用声音</h4><p><code>kex --sound -s</code></p>
<p>Win-KeX 现在支持并发会话。</p>
<h4 id="窗口防火墙"><a href="#窗口防火墙" class="headerlink" title="窗口防火墙"></a>窗口防火墙</h4><p>SL 无缝模式和声音支持都需要通过 Windows defender防火墙进行访问。当提示时，勾选”公共网络”。稍后可以转到防火墙设置，将范围限制为 WSL 网络（通常<code>172.3x.xxx.0/20</code>)。</p>
<h4 id="组件依赖"><a href="#组件依赖" class="headerlink" title="组件依赖"></a>组件依赖</h4><ul>
<li>Win-KeX Win窗口模式依赖 <a href="https://tigervnc.org/">TigerVnc</a> 实现。</li>
<li>Win-KeX 增强会话模式使用Win10的远程桌面功能实现。</li>
<li>Win-KeX SL无缝模式依赖 <a href="https://sourceforge.net/projects/vcxsrv/">VcXsr Windows X Server</a>，使用VCXsrv客户端实现。</li>
<li>声音支持集成自 <a href="https://www.freedesktop.org/wiki/Software/PulseAudio/">PulseAudio</a></li>
</ul>
<h3 id="安装ohmyzsh"><a href="#安装ohmyzsh" class="headerlink" title="安装ohmyzsh"></a>安装ohmyzsh</h3><p><strong>下面是linux软件配置部分。</strong></p>
<blockquote>
<p> <a href="https://zhuanlan.zhihu.com/p/114296129">Manjaro-KDE安装配置全攻略</a></p>
</blockquote>
<p>首先修改默认shell为zsh：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">chsh <span class="literal">-s</span> /usr/bin/zsh</span><br></pre></td></tr></table></figure>

<p>安装ohmyzsh：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wget</span> https://github.com/robbyrussell/<span class="built_in">oh</span><span class="literal">-my</span><span class="literal">-zsh</span>/raw/master/tools/install.sh <span class="literal">-O</span> - | sh</span><br></pre></td></tr></table></figure>

<p>如果每次执行都失败提示被拒绝，是因为国内dns无法解析raw.githubusercontent.com。连接失败就先改一下hosts文件：（我博客的图片都是托管在这里哦）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/hosts</span><br></pre></td></tr></table></figure>

<p>把这段话复制到下面：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GitHub Start</span></span><br><span class="line"><span class="number">151.101</span>.<span class="number">64.133</span> raw.githubusercontent.com</span><br><span class="line"><span class="comment"># GitHub End</span></span><br></pre></td></tr></table></figure>

<p>安装zsh-syntax-highlighting插件：提供命令高亮</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh<span class="literal">-users</span>/zsh<span class="literal">-syntax</span><span class="literal">-highlighting</span>.git <span class="variable">$</span>&#123;ZSH_CUSTOM:-~/.oh<span class="literal">-my</span><span class="literal">-zsh</span>/custom&#125;/plugins/zsh<span class="literal">-syntax</span><span class="literal">-highlighting</span></span><br></pre></td></tr></table></figure>

<p>安装autosuggestions插件：记住你之前使用过的命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/zsh<span class="literal">-users</span>/zsh<span class="literal">-autosuggestions</span> ~/.oh<span class="literal">-my</span><span class="literal">-zsh</span>/custom/plugins/zsh<span class="literal">-au</span></span><br></pre></td></tr></table></figure>

<p>启用所有插件，顺便修改主题：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">nano ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>主题改为我喜欢的ys，另外这个主题没有特殊符号，对字体比较友好，其他主题可以点击theme上的说明跳转到主题说明页。然后启用插件。<br>将plugins=(git)改为:</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">plugins=(git zsh<span class="literal">-syntax</span><span class="literal">-highlighting</span> zsh<span class="literal">-autosuggestions</span> sudo extract)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>sudo是ohmyzsh自带的插件，功能是在你输入的命令的开头添加sudo，方法是双击Esc。</p>
</li>
<li><p>extract也是自带插件，不用再去记不同文件的解压命令，方法是<strong>extract</strong> + <strong>待解压的文件名</strong></p>
</li>
</ul>
<p>导入配置</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<h3 id="安装谷歌中文输入法"><a href="#安装谷歌中文输入法" class="headerlink" title="安装谷歌中文输入法"></a>安装谷歌中文输入法</h3><p>用过一段时间的rime，<del>中洲韵?</del>输入方案，老有繁体冒出来，还是回归google拼音。</p>
<p>安装输入法框架</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install fcitx</span><br></pre></td></tr></table></figure>

<p>安装谷歌输入法</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install fcitx<span class="literal">-googlepinyin</span></span><br></pre></td></tr></table></figure>

<p>重启</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<p>当然，这里要重启win10才行。</p>
<h3 id="VScode的WIN-WSL插件"><a href="#VScode的WIN-WSL插件" class="headerlink" title="VScode的WIN-WSL插件"></a>VScode的WIN-WSL插件</h3><blockquote>
<p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-vscode">使用适用于 Linux 的 Windows 子系统的 Visual Studio Code 入门</a></p>
</blockquote>
<p>vscode对wsl2支持太棒了，直接在linux终端输入code就自动打开vscode并连接到wsl2。也可以自己在VScode插件扩展商店搜索<strong>Remote - WSL</strong>进行安装：</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053418.png?raw=true" alt="直接在linux的shell输入code，本地VScode安装"></p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053416.png?raw=true" alt="VScode搜索插件名安装，自动绑定到kali"></p>
<p>插件效果：</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053405.png?raw=true" alt="远程连接kali并使用range查看运行win10本地代码"></p>
<h2 id="卸载WSL"><a href="#卸载WSL" class="headerlink" title="卸载WSL"></a>卸载WSL</h2><blockquote>
<p>官方文档：<br><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-legacy">在 Windows 10 周年更新和创意者更新上安装或卸载适用于 Linux 的 Windows 子系统的指南</a><br><a href="https://docs.microsoft.com/en-us/windows/wsl/wsl-config">WSL commands and launch configurations</a></p>
</blockquote>
<p>关于卸载WSL，你可能会看到很多不同的博文，例如</p>
<ul>
<li><p>在powershell中输入下面的代码</p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-list</span> -<span class="literal">-all</span>  <span class="comment"># 查看所有已经安装的分发版本</span></span><br><span class="line">wsl -<span class="literal">-list</span> -<span class="literal">-running</span> <span class="comment"># 查看正在运行的分发版本</span></span><br><span class="line">wsl -<span class="literal">-unregister</span> &lt;DistributionName&gt; <span class="comment"># 删除指定的分发版本</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在powershell中输入下面的代码（推荐）</strong></p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wslconfig /l  <span class="comment">#显示出你安装的列表。</span></span><br><span class="line">wslconfig /u &lt;DistributionName&gt;  <span class="comment">#&lt;DistributionName&gt;为上述列表中的名字,注销子系统</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开开始菜单，右键卸载掉</p>
</li>
<li><p><code>Ctrl + R</code>键入<code>lxrun /uninstall /full</code></p>
</li>
<li><p>手动删除旧发行版<br>  如果需要，可以手动删除旧实例。 如果使用 <code>lxrun.exe</code>卸载旧的发行版或运行 Windows 10 春季2018更新（或更高版本），但未附带 <code>lxrun.exe</code>程序，则可能需要执行此操作。<br>  若要强制删除旧的 WSL 发行版，请使用 Windows 文件资源管理器或命令行删除 <code>%localappdata%\lxss\</code> 文件夹（及其所有子内容）：</p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用Powershell：</span></span><br><span class="line"><span class="built_in">rm</span> <span class="literal">-Recurse</span> <span class="variable">$env:localappdata</span>/lxss/</span><br><span class="line"><span class="comment"># 使用 Cmd：</span></span><br><span class="line"><span class="built_in">DEL</span> /S %localappdata%\lxss\</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这里，我只想说，这些办法都是对的，但是微软的尿性大家都懂，采用默认的卸载工具是绝对卸载不干净的。<br>直到我看到这篇帖子：</p>
<blockquote>
<p><a href="https://blog.csdn.net/gzroy/article/details/104069536">Windows Linux子系统(WSL)删除与重装的问题</a></p>
</blockquote>
<p>原文：</p>
<blockquote>
<p>最近在折腾WSL，安装了一个Ubuntu 16和一个18，但是因为有些系统问题一直无法很好的设置，打算卸载了重装，可是按照网上的教程wslconfig /l， wslconfig /u卸载之后，重新通过Windows Store安装总是有问题，Store里面显示这2个APP已经安装过了，只有启动这一个选项，但是点击启动又报错，说没找到相应的文件。重新点击获取也不行，系统显示已下载，但是点击启动却说找不到文件，搞了很久一直无法解决，最终还是查到了一个方案，在Powershell里面通过命令行的方式来解决。<br>首先要先查看已经安装了哪些软件包：<br><code>Get-AppxPackage -allusers | Select Name, PackageFullName</code><br>然后可以看到列表里面你想要删除的软件包，执行以下命令来删除，例如要删除Ubuntu16<br><code>get-appxpackage CanonicalGroupLimited.Ubuntu16.04onWindows | remove-Appxpackage</code><br>完成后重新在Windows Store里面下载应用即可。</p>
</blockquote>
<p>先<code>wslconfig /l</code>+ <code>wslconfig /u</code>，然后powershell输入上述的<code>Get-AppxPackage</code>+<code>remove-Appxpackage</code>，如果你有win10的卸载工具uninstall或者geek，进入windows应用卸载选项，卸载应用后顺便把对应的注册表删了。</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053417.png?raw=true"></p>
<p>最后使用everthing搜索kaliLinux关键词，将对应的文件全部删除，重启。然后用火绒或dism++之类的清理软件清理一下注册表的垃圾文件。</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209053419.png?raw=true"></p>
<h2 id="WSL与VMWare的冲突"><a href="#WSL与VMWare的冲突" class="headerlink" title="WSL与VMWare的冲突"></a>WSL与VMWare的冲突</h2><p>VMware新版本是可以和Hyper-V共存的，我用的版本已经是16.1了：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209192724.png" alt="WMWare版本信息"></p>
<p>能启用WMWare后，发现会提示为主机启用了侧通道缓解，具体为啥我也不知道哈哈，看解释：</p>
<blockquote>
<p><a href="https://www.intel.cn/content/www/cn/zh/architecture-and-technology/mds.html">侧信道漏洞 MDS -英特尔® 官网 (intel.cn)</a>)</p>
</blockquote>
<p>我当然是关掉咯：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/WSL2-linux%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E8%B6%85%E8%AF%A6%E7%BB%86%E6%8C%87%E5%8D%97/20210209193215.png"></p>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>WSL对Docker的支持一直很好：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-containers">WSL 2 上的 Docker 远程容器入门</a></p>
<p>WSL2比起WSL增加了对cuda的支持，可以用N卡炼丹了：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/tutorials/gpu-compute">适用于 Linux 的 Windows 子系统中的 GPU 加速机器学习培训</a></p>
<p>关于储存空间占用问题：<a href="https://zhuanlan.zhihu.com/p/263658960">搭建 WSL2 下的 Kali 环境（含GUI及空间优化）</a></p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>linux文件目录结构</title>
    <url>/2021/01/23/linux-wen-jian-mu-lu-jie-gou/</url>
    <content><![CDATA[<h1 id="linux文件目录结构"><a href="#linux文件目录结构" class="headerlink" title="linux文件目录结构"></a>linux文件目录结构</h1><blockquote>
<p>  引用自《鸟哥的linux私房菜 基础篇》</p>
<ul>
<li>  <a href="https://wizardforcel.gitbooks.io/vbird-linux-basic-4e/content/44.html">5.3.1 Linux目录配置的依据–FHS</a></li>
</ul>
</blockquote>
<p>通过<code>ls /</code>就会发现，在<code>/</code>下包涵很多的目录，比如<code>etc</code>、<code>usr</code>、<code>var</code>、<code>bin</code> …等等。平时虚拟机做实验自然是随便放，但真要日常使用的话，还是需要知道对应目录的意思，虽然大多数教材都有介绍，不过实际使用起来光是课本教程那点简单介绍还是不够的。</p>
<p>规定这一标准的是FHS（Filesystem Hierarchy Standard ）机构。<a href="http://www.pathname.com/fhs/">FHS的官方文件</a>指出了每个特定的目录下应该放置的特定数据。 </p>
<p>根据标准，可以将目录定义成为四种交互作用的形态：</p>
<table>
<thead>
<tr>
<th></th>
<th>可分享的(shareable)</th>
<th>不可分享的(unshareable)</th>
</tr>
</thead>
<tbody><tr>
<td>不变的(static)</td>
<td><code>/usr</code> (软件放置处)</td>
<td><code>/etc </code>(配置文件)</td>
</tr>
<tr>
<td>—</td>
<td><code>/opt</code> (第三方协力软件)</td>
<td><code>/boot </code>(开机与核心档)</td>
</tr>
<tr>
<td>可变动的(variable)</td>
<td><code>/var/mail </code>(使用者邮件信箱)</td>
<td><code>/var/run</code> (程序相关)</td>
</tr>
<tr>
<td>—</td>
<td><code>/var/spool/news </code>(新闻组)</td>
<td><code>/var/lock </code>(程序相关)</td>
</tr>
</tbody></table>
<p><strong>可分享的：</strong>可以分享给其他系统挂载使用的目录，包括执行文件与用户的邮件等数据， 能够分享给网络上其他主机挂载用的目录；<br><strong>不可分享的：</strong>自己机器上面运作的装置文件或者是与程序有关的socket文件等， 由于仅与自身机器有关，所以当然就不适合分享给其他主机了。<br><strong>不变的：</strong>有些数据是不会经常变动的，跟随着distribution而不变动。 例如函式库、文件说明文件、系统管理员所管理的主机服务配置文件等等；<br><strong>可变动的：</strong>经常改变的数据，例如登录文件、一般用户可自行收受的新闻组等。</p>
<p>FHS仅涉及到三层目录下：</p>
<table>
<thead>
<tr>
<th>路径</th>
<th>意思</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td><code>/</code></td>
<td>root根目录</td>
<td>与开机系统有关</td>
</tr>
<tr>
<td><code>/usr</code></td>
<td>unix software resource</td>
<td>与软件安装/执行有关</td>
</tr>
<tr>
<td><code>/var</code></td>
<td>variable</td>
<td>与系统运作过程有关</td>
</tr>
</tbody></table>
<h2 id="根目录"><a href="#根目录" class="headerlink" title="根目录 (/)"></a>根目录 (/)</h2><p>根目录和Windows的C盘一样。</p>
<p>根目录与开机、还原、系统修复等动作有关。 由于系统开机时需要特定的开机软件、核心文件、开机所需程序、 函式库等等文件数据，系统出现错误时，根目录也必须要包含有能够修复文件系统的程序才行。</p>
<p>FHS希望根目录不要放在非常大的分区，因为越大的分区内你会放入越多的数据，如此一来根目录所在分区就可能会有较多发生错误的机会。应用程序所安装的软件最好不要与根目录放在同一个分区内，保持根目录越小越好。 如此不但效能较佳，根目录所在的文件系统也较不容易发生问题。</p>
<p>根据以上原因，FHS认为根目录(/)下应该包含如下子目录：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>应放置档案内容</th>
</tr>
</thead>
<tbody><tr>
<td><code>/bin</code></td>
<td>系统有很多放置执行档的目录，但<code>/bin</code>比较特殊。因为<code>/bin</code>放置的是在单人维护模式下还能够被操作的指令。在<code>/bin</code>底下的指令可以被root与一般帐号所使用，主要有：<code>cat,chmod, chown, date, mv, mkdir, cp, bash</code>等等常用的指令。</td>
</tr>
<tr>
<td><code>/boot</code></td>
<td>主要放置开机会使用到的档案，包括Linux核心档案以及开机选单与开机所需设定档等等。Linux kernel常用的档名为：vmlinuz ，如果使用的是grub这个开机管理程式，则还会存在<code>/boot/grub/</code>这个目录。</td>
</tr>
<tr>
<td><code>/dev</code></td>
<td>在Linux系统上，任何装置与周边设备都是以档案的型态存在于这个目录当中。 只要通过存取这个目录下的某个档案，就等于存取某个装置。比要重要的档案有<code>/dev/null, /dev/zero, /dev/tty , /dev/lp*, / dev/hd*, /dev/sd*</code>等等</td>
</tr>
<tr>
<td><code>/etc</code></td>
<td>系统主要的设定档几乎都放置在这个目录内，例如人员的帐号密码档、各种服务的启始档等等。 一般来说，这个目录下的各档案属性是可以让一般使用者查阅的，但是只有root有权力修改。 FHS建议不要放置可执行档(binary)在这个目录中。 比较重要的档案有：<code>/etc/inittab, /etc/init.d/, /etc/modprobe.conf, /etc/X11/, /etc/fstab, /etc/sysconfig/</code>等等。 另外，其下重要的目录有：<code>/etc/init.d/</code> ：所有服务的预设启动script都是放在这里的，例如要启动或者关闭iptables的话：<code> /etc/init.d/iptables start</code>、<code>/etc/init.d/iptables stop </code> 、<code>/etc/xinetd.d/ </code>：这就是所谓的super daemon管理的各项服务的设定档目录。 <code>/etc/X11/</code> ：与X Window有关的各种设定档都在这里，尤其是xorg.conf或XF86Config这两个X Server的设定档。</td>
</tr>
<tr>
<td><code>/home</code></td>
<td>这是系统预设的使用者家目录。 在你新增一个一般使用者帐号时，预设的使用者家目录都会规范到这里来。比较重要的是，家目录有两种代号： ~ ：代表当前使用者的家目录；而 ~guest：则代表用户名为guest的家目录。</td>
</tr>
<tr>
<td><code>/lib</code></td>
<td>系统的函式库非常的多，而<code>/lib</code>放置的则是在开机时会用到的函式库，与<code>/bin</code>或<code>/sbin</code>底下的指令会呼叫的函式库。尤其重要的是<code>/lib/modules/</code>这个目录，因为该目录会放置核心相关的模组(驱动程式)。</td>
</tr>
<tr>
<td><code>/media</code></td>
<td>media是媒体的英文，顾名思义，这个<code>/media</code>底下放置的就是可移除的装置。 包括软碟、光碟、DVD等等装置都暂时挂载于此。 常见的档名有：<code>/media/floppy, /media/cdrom</code>等等。</td>
</tr>
<tr>
<td><code>/mnt</code></td>
<td>如果妳想要暂时挂载某些额外的装置，一般建议你可以放置到这个目录中。在古早时候，这个目录的用途与<code>/media</code>相同。 只是有了<code>/media</code>之后，这个目录就用来暂时挂载用了。</td>
</tr>
<tr>
<td><code>/opt </code>  <code>(/usr/local)</code></td>
<td>这个是给第三方软件放置的目录 。 什么是第三方软件？举例来说，KDE这个桌面管理系统是一个独立的软件，不过他可以安装到Linux系统中，因此KDE就建议放置到此目录下了。 另外，如果你想要自行安装额外的软件(非原本的distribution提供的)，那么也能够将你的软件安装到这里来。 不过，以前的Linux系统中，我们还是习惯放置在<code>/usr/local</code>目录下。</td>
</tr>
<tr>
<td><code>/root</code></td>
<td>系统管理员(root)的家目录。 之所以放在这里，是因为如果进入单人维护模式而仅挂载根目录时，该目录就能够拥有root的家目录，所以我们会希望root的家目录与根目录放置在同一个分区中。</td>
</tr>
<tr>
<td><code>/sbin</code></td>
<td>Linux有非常多指令是用来设定系统环境的，这些指令只有root才能够利用来设定系统，其他使用者最多只能用来查询而已。放在<code>/sbin</code>底下的为开机过程中所需要的，里面包括了开机、修复、还原系统所需要的指令。至于某些伺服器软件程式，一般则放置到<code>/usr/sbin/</code>当中。至于本机自行安装的软件所产生的系统执行档(system binary)，则放置到<code>/usr/local/sbin/</code>当中了。常见的指令包括：<code>fdisk, fsck, ifconfig, init, mkfs</code>等等。</td>
</tr>
<tr>
<td><code>/srv</code></td>
<td>srv可以视为service的缩写，是一些网路服务启动之后，这些服务所需要取用的资料目录。 常见的服务例如WWW, FTP等等。 举例来说，WWW伺服器需要的网页资料就可以放置在<code>/srv/www/</code>里面。平时我们部署的web项目应该放到这里了。</td>
</tr>
<tr>
<td><code>/tmp</code></td>
<td>这是让一般使用者或者是正在执行的程序暂时放置档案的地方。这个目录是任何人都能够存取的，所以你需要定期的清理一下。当然，重要资料不可放置在此目录啊。 因为FHS甚至建议在开机时，应该要将<code>/tmp</code>下的资料都删除。</td>
</tr>
</tbody></table>
<p>FHS针对根目录所定义的标准就仅限于上表，不过仍有些目录也需要我们了解一下，具体如下： </p>
<table>
<thead>
<tr>
<th>目录</th>
<th>应放置文件内容</th>
</tr>
</thead>
<tbody><tr>
<td><code>/lost+found</code></td>
<td>这个目录是使用标准的<code>ext2/ext3</code>档案系统格式才会产生的一个目录，目的在于当档案系统发生错误时，将一些遗失的片段放置到这个目录下。 这个目录通常会在分割槽的最顶层存在，例如你加装一个硬盘于<code>/disk</code>中，那在这个系统下就会自动产生一个这样的目录<code>/disk/lost+found</code></td>
</tr>
<tr>
<td><code>/proc</code></td>
<td>这个目录本身是一个虚拟文件系统(virtual filesystem)。 他放置的资料都是在内存当中，例如系统核心、行程资讯(process)、周边装置的状态及网络状态等等。因为这个目录下的资料都是在内存当中，所以本身不占任何硬盘空间。比较重要的目录：<code> /proc/cpuinfo, /proc/dma, /proc/interrupts, /proc/ioports, /proc/net/*</code>等。</td>
</tr>
<tr>
<td><code>/sys</code></td>
<td>这个目录跟<code>/proc</code>非常类似，也是一个虚拟的档案系统，主要也是记录与核心相关的资讯。 包括目前已载入的核心模组与核心侦测到的硬体装置资讯等等。 这个目录同样不占硬盘容量。</td>
</tr>
</tbody></table>
<p>除了这些目录的内容之外，另外要注意的是，因为根目录与开机有关，开机过程中仅有根目录会被挂载， 其他分区则是在开机完成之后才会持续的进行挂载的行为。就是因为如此，因此根目录下与开机过程有关的目录， 就不能够与根目录放到不同的分区去，有底下这些：</p>
<p><code>/etc</code>：配置文件<br><code>/bin</code>：重要执行档<br><code>/dev</code>：所需要的设备文件<br><code>/lib</code>：执行档所需的函式库与核心所需的模块<br><code>/sbin</code>：重要的系统执行文件</p>
<p>这五个目录必须在根目录所在分区。</p>
<h2 id="usr"><a href="#usr" class="headerlink" title="/usr"></a>/usr</h2><p>依据FHS的基本定义，<code>/usr</code>里面放置的数据属于可分享的与不可变动的(shareable, static)， 如果你知道如何通过网络进行分区挂载(例如在服务器篇会谈到的NFS服务器)，那么<code>/usr</code>确实可以分享给局域网络内的其他主机来使用。</p>
<p><code>/usr</code>不是user的缩写，其实usr是Unix Software Resource的缩写， 也就是Unix操作系统软件资源所放置的目录，而不是用户的数据，这点要注意。 FHS建议所有软件开发者，应该将他们的数据合理的分别放置到这个目录下的次目录，而不要自行建立该软件自己独立的目录。</p>
<p>因为是所有系统默认的软件(distribution发布者提供的软件)都会放置到<code>/usr</code>底下，因此这个目录有点类似Windows 系统的<code>C:\Windows\ </code> <code> C:\Program files\</code>这两个目录的综合体，系统刚安装完毕时，这个目录会占用最多的硬盘容量。 一般来说，<code>/usr</code>的次目录建议有底下这些：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>应放置文件内容</th>
</tr>
</thead>
<tbody><tr>
<td><code>/usr/X11R6/</code></td>
<td>为X Window System重要数据所放置的目录，之所以取名为X11R6是因为最后的X版本为第11版，且该版的第6次释出之意。</td>
</tr>
<tr>
<td><code>/usr/bin/</code></td>
<td>绝大部分的用户可使用指令都放在这里。请注意到他与<code>/bin</code>的不同之处。(是否与开机过程有关)</td>
</tr>
<tr>
<td><code>/usr/include/</code></td>
<td>c/c++等程序语言的header与include放置处，当我们以tarball方式 (*.tar.gz 的方式安装软件)安装某些数据时，会使用到里头的许多包含档。</td>
</tr>
<tr>
<td><code>/usr/lib/</code></td>
<td>包含各应用软件的函式库、目标文件(object file)，以及不被一般使用者惯用的执行档或脚本(script)。 某些软件会提供一些特殊的指令来进行服务器的设定，这些指令也不会经常被系统管理员操作， 那就会被摆放到这个目录下啦。要注意的是，如果你使用的是X86_64的Linux系统， 那可能会有<code>/usr/lib64/</code>目录产生</td>
</tr>
<tr>
<td><code>/usr/local/</code></td>
<td>管理员在本机自行安装自己下载的软件(非distribution默认提供者)，建议安装到此目录， 这样会比较便于管理。举例来说，你的distribution提供的软件较旧，你想安装较新的软件但又不想移除旧版， 此时你可以将新版软件安装于<code>/usr/local/</code>目录下，与原先的旧版软件有所分别。 可以自行到<code>/usr/local</code>去看看，该目录下也是具有<code>bin, etc, include, lib...</code>的次目录的。</td>
</tr>
<tr>
<td><code>/usr/sbin/</code></td>
<td>非系统正常运作所需要的系统指令。最常见的就是某些网络服务器软件的服务指令(daemon)</td>
</tr>
<tr>
<td><code>/usr/share/</code></td>
<td>放置共享文件的地方，在这个目录下放置的数据几乎是不分硬件架构均可读取的数据， 因为几乎都是文本文件。在此目录下常见的还有这些次目录：<code>/usr/share/man</code>：联机帮助文件<code>/usr/share/doc</code>：软件杂项的文件说明<code>/usr/share/zoneinfo</code>：与时区有关的时区文件</td>
</tr>
<tr>
<td><code>/usr/src/</code></td>
<td>一般原始码建议放置到这里，src有source的意思。至于核心原始码则建议放置到<code>/usr/src/linux/</code>目录下。</td>
</tr>
</tbody></table>
<h2 id="var"><a href="#var" class="headerlink" title="/var"></a>/var</h2><p>如果说<code>/usr</code>是安装时就会占用较大硬盘容量的目录，那么<code>/var</code>就是在系统运作后才会渐渐占用硬盘容量的目录。 因为<code>/var</code>目录主要针对常态性变动的文件，包括缓存(cache)、登录档(log file)以及某些软件运作所产生的文件， 包括程序文件(lock file, run file)，或者例如MySQL数据库的文件等等。常见的次目录有：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th>应放置文件内容</th>
</tr>
</thead>
<tbody><tr>
<td><code>/var/cache/</code></td>
<td>应用程序本身运作过程中会产生的一些缓存。</td>
</tr>
<tr>
<td><code>/var/lib/</code></td>
<td>程序本身执行的过程中，需要使用到的数据文件的放置目录。在此目录下各自的软件应该要有各自的目录。 举例来说，MySQL的数据库放置到<code>/var/lib/mysql/</code>而rpm的数据库则放到<code>/var/lib/rpm</code>去。</td>
</tr>
<tr>
<td><code>/var/lock/</code></td>
<td>某些装置或者是文件资源一次只能被一个应用程序所使用，如果同时有两个程序使用该装置时， 就可能产生一些错误的状况，因此就得要将该装置上锁(lock)，以确保该装置只会给单一软件所使用。 举例来说，刻录机正在刻录一块光盘，你想一下，会不会有两个人同时在使用一个刻录机烧片？ 如果两个人同时刻录，那片子写入的是谁的数据？所以当第一个人在刻录时该刻录机就会被上锁， 第二个人就得要该装置被解除锁定(就是前一个人用完了)才能够继续使用。</td>
</tr>
<tr>
<td><code>/var/log/</code></td>
<td>非常重要。这是登录文件放置的目录。里面比较重要的文件如<code>/var/log/messages</code>, <code>/var/log/wtmp</code>(记录登入者的信息)等。</td>
</tr>
<tr>
<td><code>/var/mail/</code></td>
<td>放置个人电子邮件信箱的目录，不过这个目录也被放置到<code>/var/spool/mail/</code>目录中，通常这两个目录是互为链接文件。</td>
</tr>
<tr>
<td><code>/var/run/</code></td>
<td>某些程序或者是服务启动后，会将他们的PID放置在这个目录下。</td>
</tr>
<tr>
<td><code>/var/spool/</code></td>
<td>这个目录通常放置一些队列数据，所谓的“队列”就是排队等待其他程序使用的数据。 这些数据被使用后通常都会被删除。举例来说，系统收到新信会放置到<code>/var/spool/mail/</code>中， 但使用者收下该信件后该封信原则上就会被删除。信件如果暂时寄不出去会被放到<code>/var/spool/mqueue/</code>中， 等到被送出后就被删除。如果是工作排程数据(crontab)，就会被放置到<code>/var/spool/cron/</code>目录中。</td>
</tr>
</tbody></table>
<p>由于FHS仅是定义出最上层(/)及次层(/usr, /var)的目录内容应该要放置的文件或目录数据， 因此，在其他次目录层级内，就可以随开发者自行来配置了。</p>
<h2 id="run-sh"><a href="#run-sh" class="headerlink" title="./run.sh"></a>./run.sh</h2><p><strong>网络文件常常提到类似<code>./run.sh</code>之类的数据，这个指令的意义为何？</strong></p>
<p>由于指令的执行需要变量的支持，若你的执行文件放置在本目录，并且本目录并非正规的执行文件目录(<code>/bin</code>, <code>/usr/bin</code>等为正规)，此时要执行指令就得要严格指定该执行档。<code>./</code>代表本目录的意思，所以<code>./run.sh</code>代表执行本目录下， 名为run.sh的文件。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy常用方法</title>
    <url>/2020/11/16/python-numpy-chang-yong-fang-fa/</url>
    <content><![CDATA[<h1 id="Numpy常用方法"><a href="#Numpy常用方法" class="headerlink" title="Numpy常用方法"></a>Numpy常用方法</h1><blockquote>
<p>课程地址：<a href="https://www.icourse163.org/course/BIT-1001870002?tid=1450349444">Python数据分析与展示</a></p>
<p><a href="https://www.numpy.org.cn/user/">NumPy 用户指南 | NumPy 中文</a></p>
<p><a href="https://www.numpy.org.cn/reference/">NumPy 参考手册 | NumPy 中文</a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="一维数据"><a href="#一维数据" class="headerlink" title="一维数据"></a>一维数据</h3><p><strong>列表</strong>：数据类型可以不同    [3.14, ‘pi’, 3.1415, [3.14,3], ‘3.14’]<br><strong>数组</strong>：数据类型必须相同    [3.1412, 3.1413, 3.1414, 3.1415]</p>
<p>列表（有序）和集合（无序）类型</p>
<p>[3.1311, 3.1314, 3.1315]   {3.1311, 3.1314, 3.1315}</p>
<h3 id="多维数据"><a href="#多维数据" class="headerlink" title="多维数据"></a>多维数据</h3><table>
<thead>
<tr>
<th>3.1413</th>
<th>3.1413</th>
</tr>
</thead>
<tbody><tr>
<td>3.1414</td>
<td>3.1415</td>
</tr>
</tbody></table>
<p>列表嵌套</p>
<p>[[3.1413, 3.1413], [3.1414, 3.1415]]</p>
<h3 id="高维数据"><a href="#高维数据" class="headerlink" title="高维数据"></a>高维数据</h3><p>高维数据仅利用最基本的二元关系展示数据间的复杂结构。（键值对）</p>
<p>字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>=&#123;</span><br><span class="line">    <span class="string">&quot;firstname&quot;</span>:<span class="string">&quot;tian&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lastname&quot;</span>:<span class="string">&quot;song&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;firstname&quot;</span>:<span class="string">&quot;tian&quot;</span></span><br><span class="line">    <span class="string">&quot;lastname&quot;</span>:<span class="string">&quot;song&quot;</span></span><br><span class="line">    <span class="string">&quot;address&quot;</span>:&#123;</span><br><span class="line">		<span class="attr">&quot;streetAddr&quot;</span>:<span class="string">&quot;中关村&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;city&quot;</span>:<span class="string">&quot;北京市&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;zipcode&quot;</span>:<span class="string">&quot;100081&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">&quot;prof&quot;</span>:[<span class="string">&quot;Computer System&quot;</span>,<span class="string">&quot;Security&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有XML，Yaml等。</p>
<h2 id="Numpy的ndarray对象"><a href="#Numpy的ndarray对象" class="headerlink" title="Numpy的ndarray对象"></a>Numpy的ndarray对象</h2><p><code>import numpy as np</code>引入模板</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/ndarray%E4%B9%98.png"></p>
<p>数组对象可以去掉元素间运算需要的循环，使移位向量更像单个数据，同时提升运算速度(底层C实现)。</p>
<h3 id="ndarray对象"><a href="#ndarray对象" class="headerlink" title="ndarray对象"></a>ndarray对象</h3><p>上述<code>np.array()</code>生成一个<code>ndarray</code>数组，在程序中的别名为<code>array</code>。<br><code>ndarray</code>在控制台输出为[]形式，元素由空格分割。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.array([[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br></pre></td></tr></table></figure>

<p>轴(axis)：保存数据的维度  </p>
<p>秩(rank)：轴的数量</p>
<h3 id="ndarray对象的属性"><a href="#ndarray对象的属性" class="headerlink" title="ndarray对象的属性"></a>ndarray对象的属性</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/ndarray%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7.png"></p>
<p>以上个例子为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.array([[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.ndim</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape</span><br><span class="line">(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.size</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.dtype</span><br><span class="line">dtype(<span class="string">&#x27;int32&#x27;</span>) <span class="comment">#可以无需指明int的具体类型(32，64由python自行判定)。此为手动</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.itemsize</span><br><span class="line"><span class="number">4</span>             </span><br></pre></td></tr></table></figure>

<h3 id="ndarray支持的数据类型"><a href="#ndarray支持的数据类型" class="headerlink" title="ndarray支持的数据类型"></a>ndarray支持的数据类型</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/ndarray%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B1.png"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/ndarray%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B2.png"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/ndarray%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B3.png"></p>
<p>因为对元素类型精确定义有助于合理使用储存空间，所以尽量避免使用非同质元素类型。当元素不同时，会出现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> x=np.array([[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line">__main__:<span class="number">1</span>: VisibleDeprecationWarning: Creating an ndarray <span class="keyword">from</span> ragged nested sequences (which <span class="keyword">is</span> a <span class="built_in">list</span>-<span class="keyword">or</span>-<span class="built_in">tuple</span> of lists-<span class="keyword">or</span>-tuples-<span class="keyword">or</span> ndarrays <span class="keyword">with</span> different lengths <span class="keyword">or</span> shapes) <span class="keyword">is</span> deprecated. If you meant to do this, you must specify <span class="string">&#x27;dtype=object&#x27;</span> when creating the ndarray</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">array([<span class="built_in">list</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]), <span class="built_in">list</span>([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])], dtype=<span class="built_in">object</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line">[<span class="built_in">list</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="built_in">list</span>([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.shape</span><br><span class="line">(<span class="number">2</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.dtype</span><br><span class="line">dtype(<span class="string">&#x27;O&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.itemsize</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.size</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/ndarray%E9%9D%9E%E5%90%8C%E8%B4%A8%E7%B1%BB%E5%9E%8B.png"></p>
<h3 id="ndarray数组的创建"><a href="#ndarray数组的创建" class="headerlink" title="ndarray数组的创建"></a>ndarray数组的创建</h3><ul>
<li>从python的列表、元祖等类型创建ndarray数组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=np.array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])	<span class="comment">#从列表类型创建</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=np.array((<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>))	<span class="comment">#从元祖类型创建</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line">[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=np.array([[<span class="number">1</span>,<span class="number">2</span>],(<span class="number">9</span>,<span class="number">8</span>),[<span class="number">0.1</span>,<span class="number">0.2</span>]])	<span class="comment">#从列表和元祖混合创建</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line">[[<span class="number">1.</span>  <span class="number">2.</span> ]</span><br><span class="line"> [<span class="number">9.</span>  <span class="number">8.</span> ]</span><br><span class="line"> [<span class="number">0.1</span> <span class="number">0.2</span>]]</span><br></pre></td></tr></table></figure>

<ul>
<li>从Numpy函数创建ndarray数组</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BAndarray%E5%AF%B9%E8%B1%A1.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.arange(<span class="number">10</span>)</span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.ones((<span class="number">3</span>,<span class="number">6</span>))</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.zeros((<span class="number">3</span>,<span class="number">6</span>))</span><br><span class="line">array([[<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.zeros((<span class="number">3</span>,<span class="number">6</span>),dtype=np.int32)</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.eye(<span class="number">5</span>)</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=np.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),dtype=np.int32) <span class="comment">#从按照外到内生成</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line">[[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">  [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">  [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"> [[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">  [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">  [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.shape</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E4%BD%BF%E7%94%A8like%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BAndarray%E5%AF%B9%E8%B1%A1.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.shape</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.zeros_like(x)</span><br><span class="line">array([[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]]])</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E4%BD%BF%E7%94%A8%E5%85%B6%E5%AE%83%E5%87%BD%E6%95%B0%E5%88%9B%E5%BB%BAndarray%E5%AF%B9%E8%B1%A1.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">4</span>)</span><br><span class="line">array([ <span class="number">1.</span>,  <span class="number">4.</span>,  <span class="number">7.</span>, <span class="number">10.</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">4</span>,endpoint=<span class="literal">False</span>)<span class="comment">#endpoint表示10是否算入范围</span></span><br><span class="line">array([<span class="number">1.</span>  , <span class="number">3.25</span>, <span class="number">5.5</span> , <span class="number">7.75</span>])</span><br></pre></td></tr></table></figure>

<p>为了方便运算，默认创建的数组元素是浮点数。</p>
<h3 id="ndarray数组的维度变换"><a href="#ndarray数组的维度变换" class="headerlink" title="ndarray数组的维度变换"></a>ndarray数组的维度变换</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/ndarray%E7%BB%B4%E5%BA%A6%E5%8F%98%E6%8D%A2.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),dtype=np.int32)        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a.reshape((<span class="number">4</span>,<span class="number">6</span>)))                  </span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]                               </span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]                               </span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]                               </span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a.flatten())</span><br><span class="line">[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)                                 </span><br><span class="line">[[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]                                  </span><br><span class="line">  [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]                                  </span><br><span class="line">  [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]]                                 </span><br><span class="line">                                             </span><br><span class="line"> [[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]                                  </span><br><span class="line">  [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]                                  </span><br><span class="line">  [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]]]                                </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.resize(<span class="number">4</span>,<span class="number">6</span>)                            </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)                                 </span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]                               </span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]                               </span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]                               </span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]]     </span><br></pre></td></tr></table></figure>

<h3 id="ndarray数组元素类型变化"><a href="#ndarray数组元素类型变化" class="headerlink" title="ndarray数组元素类型变化"></a>ndarray数组元素类型变化</h3><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.astype(new_type)</code></td>
<td>不改变数组维度，返回数组元素类型改变后的数组</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.ones((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),dtype=np.int32) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=a.astype(np.<span class="built_in">float</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([[[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]]])</span><br></pre></td></tr></table></figure>

<h3 id="ndarray数组向列表的转换"><a href="#ndarray数组向列表的转换" class="headerlink" title="ndarray数组向列表的转换"></a>ndarray数组向列表的转换</h3><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>.tolist()</code></td>
<td>不改变数组维度和元素类型，返回列表（运算效率可能下降）</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.full((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),<span class="number">25</span>,dtype=np.int32)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>],</span><br><span class="line">        [<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>],</span><br><span class="line">        [<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>],</span><br><span class="line">        [<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>],</span><br><span class="line">        [<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.tolist()</span><br><span class="line">[[[<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>], [<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>], [<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>]], </span><br><span class="line"> [[<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>], [<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>], [<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>]]]</span><br></pre></td></tr></table></figure>

<h2 id="ndarray数组的操作"><a href="#ndarray数组的操作" class="headerlink" title="ndarray数组的操作"></a>ndarray数组的操作</h2><h3 id="ndarray索引"><a href="#ndarray索引" class="headerlink" title="ndarray索引"></a>ndarray索引</h3><ul>
<li><p>一维数组的索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一维数组的索引和列表相似</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.array([<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>]</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>]</span><br><span class="line">array([<span class="number">8</span>, <span class="number">6</span>])</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>多维数组的索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">3</span>]</span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="ndarray切片"><a href="#ndarray切片" class="headerlink" title="ndarray切片"></a>ndarray切片</h3><ul>
<li><p>一维数组的切片</p>
<p>和列表的切片类似</p>
</li>
<li><p>多维数组的切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:,<span class="number">1</span>,-<span class="number">3</span>]</span><br><span class="line">array([ <span class="number">5</span>, <span class="number">17</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:,<span class="number">1</span>:<span class="number">3</span>,:]</span><br><span class="line">array([[[ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:,:,::<span class="number">2</span>] 	<span class="comment">#a[0:10:2]表示0-9步长为2的切片</span></span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">6</span>],</span><br><span class="line">        [ <span class="number">8</span>, <span class="number">10</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">14</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">18</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">22</span>]]])</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="ndarray数组的运算"><a href="#ndarray数组的运算" class="headerlink" title="ndarray数组的运算"></a>ndarray数组的运算</h2><h3 id="数组与标量的运算"><a href="#数组与标量的运算" class="headerlink" title="数组与标量的运算"></a>数组与标量的运算</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))                         </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a                                                        </span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],                                    </span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],                                    </span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],                                   </span><br><span class="line">                                                             </span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],                                    </span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],                                    </span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])                                  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.mean()                                                 </span><br><span class="line"><span class="number">11.5</span>                                                         </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a/a.mean()                                               </span><br><span class="line">array([[[<span class="number">0.</span>        , <span class="number">0.08695652</span>, <span class="number">0.17391304</span>, <span class="number">0.26086957</span>],    </span><br><span class="line">        [<span class="number">0.34782609</span>, <span class="number">0.43478261</span>, <span class="number">0.52173913</span>, <span class="number">0.60869565</span>],    </span><br><span class="line">        [<span class="number">0.69565217</span>, <span class="number">0.7826087</span> , <span class="number">0.86956522</span>, <span class="number">0.95652174</span>]],   </span><br><span class="line">                                                             </span><br><span class="line">       [[<span class="number">1.04347826</span>, <span class="number">1.13043478</span>, <span class="number">1.2173913</span> , <span class="number">1.30434783</span>],    </span><br><span class="line">        [<span class="number">1.39130435</span>, <span class="number">1.47826087</span>, <span class="number">1.56521739</span>, <span class="number">1.65217391</span>],    </span><br><span class="line">        [<span class="number">1.73913043</span>, <span class="number">1.82608696</span>, <span class="number">1.91304348</span>, <span class="number">2.</span>        ]]])               </span><br></pre></td></tr></table></figure>

<p>数组与标量之间的运算作用于数组的每一个元素</p>
<h3 id="数组元素运算的函数（一元函数）"><a href="#数组元素运算的函数（一元函数）" class="headerlink" title="数组元素运算的函数（一元函数）"></a>数组元素运算的函数（一元函数）</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%BA%A7%E8%BF%90%E7%AE%97%E5%87%BD%E6%95%B0.png"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%BA%A7%E8%BF%90%E7%AE%97%E5%87%BD%E6%95%B02.png"></p>
<p>元素级运算，即对数组每个元素进行运算。注意数组本身是否改变，大多数都输返回新数组，原数组不改变。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.square(a)</span><br><span class="line">array([[[  <span class="number">0</span>,   <span class="number">1</span>,   <span class="number">4</span>,   <span class="number">9</span>],</span><br><span class="line">        [ <span class="number">16</span>,  <span class="number">25</span>,  <span class="number">36</span>,  <span class="number">49</span>],</span><br><span class="line">        [ <span class="number">64</span>,  <span class="number">81</span>, <span class="number">100</span>, <span class="number">121</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">144</span>, <span class="number">169</span>, <span class="number">196</span>, <span class="number">225</span>],</span><br><span class="line">        [<span class="number">256</span>, <span class="number">289</span>, <span class="number">324</span>, <span class="number">361</span>],</span><br><span class="line">        [<span class="number">400</span>, <span class="number">441</span>, <span class="number">484</span>, <span class="number">529</span>]]], dtype=int32)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.sqrt(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[<span class="number">0.</span>        , <span class="number">1.</span>        , <span class="number">1.41421356</span>, <span class="number">1.73205081</span>],</span><br><span class="line">        [<span class="number">2.</span>        , <span class="number">2.23606798</span>, <span class="number">2.44948974</span>, <span class="number">2.64575131</span>],</span><br><span class="line">        [<span class="number">2.82842712</span>, <span class="number">3.</span>        , <span class="number">3.16227766</span>, <span class="number">3.31662479</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">3.46410162</span>, <span class="number">3.60555128</span>, <span class="number">3.74165739</span>, <span class="number">3.87298335</span>],</span><br><span class="line">        [<span class="number">4.</span>        , <span class="number">4.12310563</span>, <span class="number">4.24264069</span>, <span class="number">4.35889894</span>],</span><br><span class="line">        [<span class="number">4.47213595</span>, <span class="number">4.58257569</span>, <span class="number">4.69041576</span>, <span class="number">4.79583152</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.modf(a)</span><br><span class="line">(array([[[<span class="number">0.</span>        , <span class="number">0.</span>        , <span class="number">0.41421356</span>, <span class="number">0.73205081</span>],</span><br><span class="line">        [<span class="number">0.</span>        , <span class="number">0.23606798</span>, <span class="number">0.44948974</span>, <span class="number">0.64575131</span>],</span><br><span class="line">        [<span class="number">0.82842712</span>, <span class="number">0.</span>        , <span class="number">0.16227766</span>, <span class="number">0.31662479</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">0.46410162</span>, <span class="number">0.60555128</span>, <span class="number">0.74165739</span>, <span class="number">0.87298335</span>],</span><br><span class="line">        [<span class="number">0.</span>        , <span class="number">0.12310563</span>, <span class="number">0.24264069</span>, <span class="number">0.35889894</span>],</span><br><span class="line">        [<span class="number">0.47213595</span>, <span class="number">0.58257569</span>, <span class="number">0.69041576</span>, <span class="number">0.79583152</span>]]]), </span><br><span class="line"> array([[[<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">        [<span class="number">2.</span>, <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">        [<span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>],</span><br><span class="line">        [<span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>]]]))</span><br></pre></td></tr></table></figure>

<h3 id="数组之间运算的函数（二元函数）"><a href="#数组之间运算的函数（二元函数）" class="headerlink" title="数组之间运算的函数（二元函数）"></a>数组之间运算的函数（二元函数）</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%8C%E5%85%83%E5%87%BD%E6%95%B0.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.arange(<span class="number">24</span>).reshape((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=np.sqrt(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">        [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">        [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">array([[[<span class="number">0.</span>        , <span class="number">1.</span>        , <span class="number">1.41421356</span>, <span class="number">1.73205081</span>],</span><br><span class="line">        [<span class="number">2.</span>        , <span class="number">2.23606798</span>, <span class="number">2.44948974</span>, <span class="number">2.64575131</span>],</span><br><span class="line">        [<span class="number">2.82842712</span>, <span class="number">3.</span>        , <span class="number">3.16227766</span>, <span class="number">3.31662479</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">3.46410162</span>, <span class="number">3.60555128</span>, <span class="number">3.74165739</span>, <span class="number">3.87298335</span>],</span><br><span class="line">        [<span class="number">4.</span>        , <span class="number">4.12310563</span>, <span class="number">4.24264069</span>, <span class="number">4.35889894</span>],</span><br><span class="line">        [<span class="number">4.47213595</span>, <span class="number">4.58257569</span>, <span class="number">4.69041576</span>, <span class="number">4.79583152</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.maximum(a,b)  <span class="comment"># 整数和浮点数比较返回的结果为浮点数</span></span><br><span class="line">array([[[ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">        [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>,  <span class="number">7.</span>],</span><br><span class="line">        [ <span class="number">8.</span>,  <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>, <span class="number">15.</span>],</span><br><span class="line">        [<span class="number">16.</span>, <span class="number">17.</span>, <span class="number">18.</span>, <span class="number">19.</span>],</span><br><span class="line">        [<span class="number">20.</span>, <span class="number">21.</span>, <span class="number">22.</span>, <span class="number">23.</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &gt; b</span><br><span class="line">array([[[<span class="literal">False</span>, <span class="literal">False</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>],</span><br><span class="line">        [ <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>,  <span class="literal">True</span>]]])</span><br></pre></td></tr></table></figure>

<h2 id="Numpy的文件存储"><a href="#Numpy的文件存储" class="headerlink" title="Numpy的文件存储"></a>Numpy的文件存储</h2><h3 id="CSV文件介绍"><a href="#CSV文件介绍" class="headerlink" title="CSV文件介绍"></a>CSV文件介绍</h3><p>CSV（Comma-Separated Value，逗号分隔值）。CSV是一种常见的文件格式，用来存储批量数据。</p>
<ul>
<li>一个表格</li>
</ul>
<table>
<thead>
<tr>
<th>城市</th>
<th>环比</th>
<th>同比</th>
<th>定基</th>
</tr>
</thead>
<tbody><tr>
<td>北京</td>
<td>101.5</td>
<td>120.7</td>
<td>121.4</td>
</tr>
<tr>
<td>上海</td>
<td>101.2</td>
<td>127.3</td>
<td>127.8</td>
</tr>
<tr>
<td>广州</td>
<td>101.3</td>
<td>119.4</td>
<td>120.8</td>
</tr>
<tr>
<td>深圳</td>
<td>102.0</td>
<td>140.9</td>
<td>145.5</td>
</tr>
<tr>
<td>沈阳</td>
<td>100.1</td>
<td>101.4</td>
<td>101.6</td>
</tr>
</tbody></table>
<ul>
<li>与之对应的CSV文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">城市,环比,同比,定基</span><br><span class="line">北京,101.5,120.7,121.4</span><br><span class="line">上海,101.2,127.3,127.8</span><br><span class="line">广州,101.3,119.4,120.0</span><br><span class="line">深圳,102.0,140.9,145.5</span><br><span class="line">沈阳,100.1,101.4,101.6</span><br></pre></td></tr></table></figure>

<h3 id="CSV文件读写函数"><a href="#CSV文件读写函数" class="headerlink" title="CSV文件读写函数"></a>CSV文件读写函数</h3><p><code>np.savetxt()</code> <code>np.loadtxt()</code>只能有效存取一维和二维数组。</p>
<ul>
<li><p>文件写入函数<code>np.savetxt()</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.savetxt(frame,array,fmt=<span class="string">&#x27;%.18e&#x27;</span>,delimiter=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<p>  <code>frame</code>:文件,字符串或产生器，可以是.gz或.bz2的压缩文件。</p>
<p>  <code>array</code>:存入文件的数组</p>
<p>  <code>fmt</code>:写入文件的格式，例如%d,%.2f,%.18e</p>
<p>  <code>delimiter</code>:分隔字符串，默认是任何空格</p>
<p>  因为CSV文件格式以<code>,</code>分隔，所以<code>delimiter=&#39;,&#39;</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.arange(<span class="number">100</span>).reshape(<span class="number">5</span>,<span class="number">20</span>)</span><br><span class="line">np.savetxt(<span class="string">&quot;a.csv&quot;</span>,a,fmt=<span class="string">&#x27;%d&#x27;</span>,delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>  <img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/a_csv.png"></p>
</li>
</ul>
<ul>
<li><p>文件读取函数<code>np.loadtxt()</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.loadtxt(frame,dtype=np.<span class="built_in">float</span>,delimiter=<span class="literal">None</span>,unpack=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>  <code>frame</code>:文件,字符串或产生器，可以是.gz或.bz2的压缩文件。</p>
<p>  <code>dtype</code>:数据类型，可选</p>
<p>  <code>delimiter</code>:分隔字符串，默认是任何空格</p>
<p>  <code>unpack</code>:如果为Ture，解包，读入属性将分别写入不同的变量</p>
<p>  (python的read()函数读取文件的数据都是字符格式，需要进一步int()转换)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.arange(<span class="number">100</span>).reshape(<span class="number">5</span>,<span class="number">20</span>)</span><br><span class="line">np.savetxt(<span class="string">&quot;a.csv&quot;</span>,a,fmt=<span class="string">&#x27;%.1f&#x27;</span>,delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">b=np.loadtxt(<span class="string">&quot;a.csv&quot;</span>,delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;读取到的a的值为：\n&quot;</span>,b)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/CSV%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%80%BC.png"></p>
<h3 id="多维文件读取函数"><a href="#多维文件读取函数" class="headerlink" title="多维文件读取函数"></a>多维文件读取函数</h3><ul>
<li><p>文件写入函数<code>ndarray.tofile()</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ndarray.tofile(frame,sep=<span class="string">&#x27;&#x27;</span>,<span class="built_in">format</span>=<span class="string">&#x27;%s&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>  <code>frame</code>;文件，字符串</p>
<p>  <code>sep</code>:数据风格字符串，如果是空串，写入文件为二进制</p>
<p>  <code>format</code>:写入数据的格式</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.arange(<span class="number">100</span>).reshape(<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">a.tofile(<span class="string">&quot;b.dat&quot;</span>,sep=<span class="string">&#x27;,&#x27;</span>,<span class="built_in">format</span>=<span class="string">&#x27;%d&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>  <img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/b_dat.png"></p>
<p>  <code>b.dat</code>不包含任何维度信息。如果<code>sep=&#39;,&#39;</code>未设置，<code>b.dat</code>将是一个二进制文件。</p>
</li>
<li><p>文件读取函数<code>np.fromfile()</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.fromfile(frame,dtype=<span class="built_in">float</span>,count=-<span class="number">1</span>,sep=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>  <code>frame</code>:文件，字符串</p>
<p>  <code>dtype</code>:读取的数据类型</p>
<p>  <code>count</code>:读入元素个数，-1表示读入整个文件</p>
<p>  <code>sep</code>:数据分割字符串，如果是空串，写入文件为二进制</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.arange(<span class="number">100</span>).reshape(<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">a.tofile(<span class="string">&quot;b.dat&quot;</span>,sep=<span class="string">&#x27;,&#x27;</span>,<span class="built_in">format</span>=<span class="string">&#x27;%d&#x27;</span>)</span><br><span class="line">c = np.fromfile(<span class="string">&quot;b.dat&quot;</span>,dtype=np.<span class="built_in">int</span>,sep=<span class="string">&#x27;,&#x27;</span>).reshape(<span class="number">5</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<p>  <img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/DAT%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%80%BC.png"></p>
</li>
</ul>
<h3 id="多维文件的元数据处理"><a href="#多维文件的元数据处理" class="headerlink" title="多维文件的元数据处理"></a>多维文件的元数据处理</h3><p>利用上述<code>ndarray.tofile()</code>和<code>np.fromfile()</code>函数时，我们看到文件存储的数据只有纯内容，缺乏维度信息。对于这类元数据，一般的处理方法是另建一个配置文件写明元数据信息。同时，Numpy提供了一个便捷的文件存储办法。</p>
<ul>
<li><p><code>np.save</code>（或者<code>np.savez</code>）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.save(fname,array)</span><br><span class="line">np.savez(frame,array)</span><br></pre></td></tr></table></figure>

<p><code>frame</code>:文件名，以<code>.npy</code>为扩展名，压缩扩展名为<code>.npz</code></p>
<p><code>array</code>:数组变量</p>
</li>
<li><p><code>np.load</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.load(fname)</span><br></pre></td></tr></table></figure>

<p><code>frame</code>:文件名，以<code>.npy</code>为扩展名，压缩扩展名为<code>.npz</code></p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a=np.arange(<span class="number">100</span>).reshape(<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span>)</span><br><span class="line">np.save(<span class="string">&quot;a.npy&quot;</span>,a)</span><br><span class="line">b=np.load(<span class="string">&quot;a.npy&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;从a.npy中读取信息：\n&quot;</span>,b)</span><br></pre></td></tr></table></figure>

<p>文件写入</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/save_npy.png"></p>
<p>文件读取</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/npy%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%80%BC.png"></p>
<h2 id="Numpy的随机函数子库"><a href="#Numpy的随机函数子库" class="headerlink" title="Numpy的随机函数子库"></a>Numpy的随机函数子库</h2><h3 id="从零随机生成数据的函数"><a href="#从零随机生成数据的函数" class="headerlink" title="从零随机生成数据的函数"></a>从零随机生成数据的函数</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/rand%E5%87%BD%E6%95%B0.png"></p>
<ul>
<li><p><code>np.rand(d0,d1,...,dn)</code>从[0-1]随机生成符合维度参数的数组，满足(0-1)均匀分布</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.rand(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">array([[[<span class="number">0.20259939</span>, <span class="number">0.00962878</span>, <span class="number">0.56450046</span>, <span class="number">0.71235863</span>],</span><br><span class="line">        [<span class="number">0.01549391</span>, <span class="number">0.49664883</span>, <span class="number">0.16570365</span>, <span class="number">0.11222922</span>],</span><br><span class="line">        [<span class="number">0.93839936</span>, <span class="number">0.65121818</span>, <span class="number">0.35750042</span>, <span class="number">0.84551314</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">0.56703213</span>, <span class="number">0.45897042</span>, <span class="number">0.21583654</span>, <span class="number">0.6436646</span> ],</span><br><span class="line">        [<span class="number">0.73612895</span>, <span class="number">0.80503486</span>, <span class="number">0.93915543</span>, <span class="number">0.33008223</span>],</span><br><span class="line">        [<span class="number">0.86046784</span>, <span class="number">0.36052457</span>, <span class="number">0.33578919</span>, <span class="number">0.16510733</span>]]])</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>np.randn(d0,d1,...,dn)</code>随机生成符合维度参数的数组，满足标准正态分布</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.randn(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">array([[[ <span class="number">1.55199709</span>,  <span class="number">1.41594185</span>, -<span class="number">0.1622146</span> ,  <span class="number">0.48272732</span>],</span><br><span class="line">        [-<span class="number">0.70775139</span>,  <span class="number">2.38247535</span>,  <span class="number">1.52048942</span>, -<span class="number">0.95379195</span>],</span><br><span class="line">        [ <span class="number">0.72480865</span>,  <span class="number">0.19713822</span>,  <span class="number">0.5858833</span> , -<span class="number">0.3099266</span> ]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">1.06940348</span>,  <span class="number">0.47979532</span>,  <span class="number">0.98184603</span>,  <span class="number">0.64469512</span>],</span><br><span class="line">        [-<span class="number">3.09162702</span>, -<span class="number">0.78907275</span>,  <span class="number">0.32596385</span>,  <span class="number">1.5061127</span> ],</span><br><span class="line">        [ <span class="number">0.28365334</span>,  <span class="number">0.08427444</span>,  <span class="number">0.67566961</span>,  <span class="number">2.54296885</span>]]])</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>np.randint(low,high,shape)</code>从[100,200)随机生成整数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.randint(<span class="number">100</span>,<span class="number">200</span>,(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">array([[<span class="number">156</span>, <span class="number">100</span>, <span class="number">152</span>, <span class="number">180</span>],</span><br><span class="line">       [<span class="number">104</span>, <span class="number">168</span>, <span class="number">165</span>, <span class="number">167</span>],</span><br><span class="line">       [<span class="number">192</span>, <span class="number">137</span>, <span class="number">194</span>, <span class="number">163</span>]])</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>np.seed(num)</code>按照种子生成随机数，通过设定seed，可以产生同一个数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.seed(<span class="number">10</span>)                    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.randint(<span class="number">100</span>,<span class="number">200</span>,(<span class="number">3</span>,<span class="number">4</span>))      </span><br><span class="line">array([[<span class="number">109</span>, <span class="number">115</span>, <span class="number">164</span>, <span class="number">128</span>],              </span><br><span class="line">       [<span class="number">189</span>, <span class="number">193</span>, <span class="number">129</span>, <span class="number">108</span>],              </span><br><span class="line">       [<span class="number">173</span>, <span class="number">100</span>, <span class="number">140</span>, <span class="number">136</span>]])             </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.seed(<span class="number">10</span>)  <span class="comment">#再次设置seed为10，产生一样的数组                  </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.randint(<span class="number">100</span>,<span class="number">200</span>,(<span class="number">3</span>,<span class="number">4</span>))      </span><br><span class="line">array([[<span class="number">109</span>, <span class="number">115</span>, <span class="number">164</span>, <span class="number">128</span>],              </span><br><span class="line">       [<span class="number">189</span>, <span class="number">193</span>, <span class="number">129</span>, <span class="number">108</span>],              </span><br><span class="line">       [<span class="number">173</span>, <span class="number">100</span>, <span class="number">140</span>, <span class="number">136</span>]])                                          </span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="从已有数组抽取或重排的函数"><a href="#从已有数组抽取或重排的函数" class="headerlink" title="从已有数组抽取或重排的函数"></a>从已有数组抽取或重排的函数</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/rand%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6.png"></p>
<ul>
<li><p><code>np.random.shuffle(array)</code>将数组a的第一层随机排列，内层跟随第一层进行改变</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.random.randint(<span class="number">100</span>,<span class="number">200</span>,(<span class="number">2</span>,<span class="number">3</span>))     </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a                                      </span><br><span class="line">array([[<span class="number">116</span>, <span class="number">111</span>, <span class="number">154</span>],                    </span><br><span class="line">       [<span class="number">188</span>, <span class="number">162</span>, <span class="number">133</span>]])                   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.shuffle(a)                   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a                                      </span><br><span class="line">array([[<span class="number">188</span>, <span class="number">162</span>, <span class="number">133</span>],                    </span><br><span class="line">       [<span class="number">116</span>, <span class="number">111</span>, <span class="number">154</span>]])                                              </span><br></pre></td></tr></table></figure>
</li>
<li><p><code>np.random.permutation(array)</code>相当于shuffle()带返回值的版本，不改变原数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.random.randint(<span class="number">100</span>,<span class="number">200</span>,(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">178</span>, <span class="number">149</span>, <span class="number">151</span>],</span><br><span class="line">       [<span class="number">154</span>, <span class="number">177</span>, <span class="number">169</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.randim.permutation(a)</span><br><span class="line">array([[<span class="number">154</span>, <span class="number">177</span>, <span class="number">169</span>],</span><br><span class="line">       [<span class="number">178</span>, <span class="number">149</span>, <span class="number">151</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[<span class="number">178</span>, <span class="number">149</span>, <span class="number">151</span>],</span><br><span class="line">       [<span class="number">154</span>, <span class="number">177</span>, <span class="number">169</span>]])</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>np.random.choice(array,shape,replace,p)</code>以概率p抽取元素，返回新数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.random.randint(<span class="number">100</span>,<span class="number">200</span>,<span class="number">8</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">112</span>, <span class="number">165</span>, <span class="number">131</span>, <span class="number">157</span>, <span class="number">136</span>, <span class="number">127</span>, <span class="number">118</span>, <span class="number">193</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(a,(<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line">array([[<span class="number">112</span>, <span class="number">193</span>],</span><br><span class="line">       [<span class="number">127</span>, <span class="number">112</span>],</span><br><span class="line">       [<span class="number">193</span>, <span class="number">127</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(a,(<span class="number">3</span>,<span class="number">2</span>),replace=<span class="literal">False</span>)</span><br><span class="line">array([[<span class="number">193</span>, <span class="number">127</span>],</span><br><span class="line">       [<span class="number">118</span>, <span class="number">157</span>],</span><br><span class="line">       [<span class="number">165</span>, <span class="number">112</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.choice(a,(<span class="number">3</span>,<span class="number">2</span>),p=a/np.<span class="built_in">sum</span>(a)) <span class="comment"># 元素越大，抽取率越高</span></span><br><span class="line">array([[<span class="number">193</span>, <span class="number">157</span>],</span><br><span class="line">       [<span class="number">112</span>, <span class="number">193</span>],</span><br><span class="line">       [<span class="number">131</span>, <span class="number">136</span>]])</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="按照数学分布生成数据的函数"><a href="#按照数学分布生成数据的函数" class="headerlink" title="按照数学分布生成数据的函数"></a>按照数学分布生成数据的函数</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/rand%E5%87%BD%E6%95%B0%E5%88%86%E5%B8%83.png"></p>
<ul>
<li><p><code>np.random.uniform.uniform(low,high,size)</code>产生具有均匀分布的数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.uniform(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#从(0,10)等概率抽取</span></span><br><span class="line">array([[<span class="number">4.90554679</span>, <span class="number">0.29179556</span>, <span class="number">5.9486095</span> , <span class="number">2.05845476</span>],</span><br><span class="line">       [<span class="number">2.02802974</span>, <span class="number">8.44125875</span>, <span class="number">0.61566377</span>, <span class="number">4.99230689</span>],</span><br><span class="line">       [<span class="number">2.48466979</span>, <span class="number">3.27144028</span>, <span class="number">0.02916088</span>, <span class="number">2.95442135</span>]])</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>np.random.normal(loc,scale,size)</code>产生具有正态分布的数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.random.normal(<span class="number">10</span>,<span class="number">5</span>,(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#均值是10，方差是5</span></span><br><span class="line">array([[<span class="number">12.87109037</span>, <span class="number">14.66311162</span>, <span class="number">10.45457509</span>,  <span class="number">2.63002415</span>],</span><br><span class="line">       [<span class="number">10.55279029</span>, <span class="number">11.26839975</span>, <span class="number">11.32440894</span>, <span class="number">13.62386089</span>],</span><br><span class="line">       [ <span class="number">7.32322561</span>,  <span class="number">9.04697536</span>,  <span class="number">7.64661696</span>,  <span class="number">8.1869246</span> ]])</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>np.random.poisson(lam,size)</code>产生具有泊松分布的数组</p>
</li>
</ul>
<h2 id="Numpy的统计函数"><a href="#Numpy的统计函数" class="headerlink" title="Numpy的统计函数"></a>Numpy的统计函数</h2><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/random%E7%BB%9F%E8%AE%A1%E5%87%BD%E6%95%B0.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.arange(<span class="number">18</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],</span><br><span class="line">        [ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>],</span><br><span class="line">		[<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>]]])</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>np.sum(array,axis=None)</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.<span class="built_in">sum</span>(a)</span><br><span class="line"><span class="number">153</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>np.mean(array,axis=None)</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.mean(a,axis=<span class="number">0</span>) <span class="comment"># 最外层</span></span><br><span class="line">array([[ <span class="number">4.5</span>,  <span class="number">5.5</span>,  <span class="number">6.5</span>], <span class="comment"># 4.5=(0+9)/2</span></span><br><span class="line">       [ <span class="number">7.5</span>,  <span class="number">8.5</span>,  <span class="number">9.5</span>], <span class="comment"># 8.5=(4+13)/2</span></span><br><span class="line">       [<span class="number">10.5</span>, <span class="number">11.5</span>, <span class="number">12.5</span>]])	<span class="comment"># 12.5=(8+17)/2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.mean(a,axis=<span class="number">1</span>)	<span class="comment"># 第二层</span></span><br><span class="line">array([[ <span class="number">3.</span>,  <span class="number">4.</span>,  <span class="number">5.</span>],	<span class="comment"># 3.=(0+6)/2 </span></span><br><span class="line">       [<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>]]) <span class="comment"># 13.=(10+16)/2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.mean(a,axis=<span class="number">2</span>)	<span class="comment"># 第三层</span></span><br><span class="line">array([[ <span class="number">1.</span>,  <span class="number">4.</span>,  <span class="number">7.</span>],	<span class="comment"># 1.=(0+2)/2 </span></span><br><span class="line">       [<span class="number">10.</span>, <span class="number">13.</span>, <span class="number">16.</span>]]) <span class="comment"># 13.=(12+14)/2</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p><code>np.average(array,axis=None,weights=None)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.average(a,axis=<span class="number">0</span>,weights=[<span class="number">1</span>,<span class="number">2</span>]) <span class="comment"># 最外层</span></span><br><span class="line">array([[ <span class="number">6.</span>,  <span class="number">7.</span>,  <span class="number">8.</span>], <span class="comment"># 6.=(0*1+9*2)/(1+2)</span></span><br><span class="line">       [ <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>],	<span class="comment"># 10.=(4*1+13*2)/(1+2)</span></span><br><span class="line">       [<span class="number">12.</span>, <span class="number">13.</span>, <span class="number">14.</span>]]) <span class="comment"># 14.=(8*1+17*2)/(1+2)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.average(a,axis=<span class="number">1</span>,weights=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment"># 第二层</span></span><br><span class="line">array([[ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>], <span class="comment"># 4.=(0*1+3*2+6*3)/(1+2+3)</span></span><br><span class="line">       [<span class="number">13.</span>, <span class="number">14.</span>, <span class="number">15.</span>]]) <span class="comment"># 14.=(10*1+13*2+16*3)/(1+2+3)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.average(a,axis=<span class="number">2</span>,weights=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment"># 第三层</span></span><br><span class="line">array([[ <span class="number">1.33333333</span>,  <span class="number">4.33333333</span>,  <span class="number">7.33333333</span>], <span class="comment"># 1.33333=(0*1+2*2+2*3)/(1+2+3)</span></span><br><span class="line">       [<span class="number">10.33333333</span>, <span class="number">13.33333333</span>, <span class="number">16.33333333</span>]]) <span class="comment"># 13.33333=(12*1+13*2+14*3)/(1+2+3)</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p><code>np.std(array,axis=None)</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.std(a) <span class="comment"># a的标准差</span></span><br><span class="line"><span class="number">5.188127472091127</span></span><br></pre></td></tr></table></figure>

<p>  <code>np.var(a,axis=None)</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.var(a) <span class="comment"># a的方差</span></span><br><span class="line"><span class="number">26.916666666666668</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/random%E7%BB%9F%E8%AE%A1%E5%87%BD%E6%95%B02.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.arange(<span class="number">18</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],</span><br><span class="line">		[ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],</span><br><span class="line">		[ <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>]],</span><br><span class="line">       </span><br><span class="line">		[[ <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">       	[<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>],</span><br><span class="line">        [<span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>]]])</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>np.max(array)</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.<span class="built_in">max</span>(a) <span class="comment"># 取得数组的最大值</span></span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>np.argmax(array)</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.argmax(a) <span class="comment"># 将数组压缩为一维数组，找到最大值，返回其在一维数组中对应的下标</span></span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>np.unravel_index(index,shape)</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.unravel_index(np.argmax(a),a.shape) </span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>) <span class="comment"># 将一维下标index转换为，对应a.shape形状下的多维下标</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>np.ptp(array)</code> </p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.ptp(a) <span class="comment"># 取得数组a中最大值和最小值的差</span></span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>np.median(array)</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.median(a) <span class="comment"># 将数组a压缩为一维数组，重排列，返回一维数组的中位数</span></span><br><span class="line"><span class="number">8.5</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Numpy的梯度函数"><a href="#Numpy的梯度函数" class="headerlink" title="Numpy的梯度函数"></a>Numpy的梯度函数</h2><table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>np.gradient(array)</code></td>
<td>计算数组array中元素的梯度，当f为多维时，返回每个维度梯度</td>
</tr>
</tbody></table>
<p>梯度：连续值之间的变化率，即斜率</p>
<p>例如：XY坐标轴连续三个X坐标对应的Y轴值：a,b,c，其中，b的梯度为：(c-a)/2</p>
<p>多用于图像和音频的处理</p>
<h3 id="一维梯度"><a href="#一维梯度" class="headerlink" title="一维梯度"></a>一维梯度</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.random.randint(<span class="number">0</span>,<span class="number">20</span>,(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([<span class="number">14</span>, <span class="number">16</span>,  <span class="number">9</span>,  <span class="number">0</span>, <span class="number">16</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.gradient(a)</span><br><span class="line">array([ <span class="number">2.</span> , -<span class="number">2.5</span>, -<span class="number">8.</span> ,  <span class="number">3.5</span>, <span class="number">16.</span> ])</span><br><span class="line"><span class="comment"># 2.=(16-14)/1 , -2.5=(9-14)/2 , 16.=(16-0)/1</span></span><br></pre></td></tr></table></figure>

<h3 id="多维梯度"><a href="#多维梯度" class="headerlink" title="多维梯度"></a>多维梯度</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=np.random.randint(<span class="number">0</span>,<span class="number">50</span>,(<span class="number">3</span>,<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">6</span>, <span class="number">46</span>,  <span class="number">1</span>, <span class="number">18</span>, <span class="number">23</span>],</span><br><span class="line">       [<span class="number">13</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">17</span>,  <span class="number">0</span>],</span><br><span class="line">       [<span class="number">24</span>, <span class="number">28</span>, <span class="number">11</span>, <span class="number">46</span>, <span class="number">49</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.gradient(a)</span><br><span class="line">[array([[  <span class="number">7.</span>, -<span class="number">20.</span>,  <span class="number">26.</span>,  -<span class="number">1.</span>, -<span class="number">23.</span>], <span class="comment"># 最外层维度的梯度</span></span><br><span class="line">       [  <span class="number">9.</span>,  -<span class="number">9.</span>,   <span class="number">5.</span>,  <span class="number">14.</span>,  <span class="number">13.</span>], <span class="comment"># -9=(28-46)/2</span></span><br><span class="line">       [ <span class="number">11.</span>,   <span class="number">2.</span>, -<span class="number">16.</span>,  <span class="number">29.</span>,  <span class="number">49.</span>]]), <span class="comment"># 49.=(49-0)/1</span></span><br><span class="line"> array([[ <span class="number">40.</span> ,  -<span class="number">2.5</span>, -<span class="number">14.</span> ,  <span class="number">11.</span> ,   <span class="number">5.</span> ], <span class="comment"># 第二层维度的梯度</span></span><br><span class="line">       [ <span class="number">13.</span> ,   <span class="number">7.</span> ,  -<span class="number">4.5</span>, -<span class="number">13.5</span>, -<span class="number">17.</span> ], <span class="comment"># 7.=(27-13)/2</span></span><br><span class="line">       [  <span class="number">4.</span> ,  -<span class="number">6.5</span>,   <span class="number">9.</span> ,  <span class="number">19.</span> ,   <span class="number">3.</span> ]])] <span class="comment"># 3.=(49-46)/1</span></span><br></pre></td></tr></table></figure>

<h2 id="图像变换"><a href="#图像变换" class="headerlink" title="图像变换"></a>图像变换</h2><p>图像是一个由像素组成的二维矩阵，每个元素是一个RGB值。</p>
<p>用numpy打开后，图像是一个三维数组，维度分别是高度、宽度和像素RGB值。</p>
<p>RGB(255,255,255)可以用来改改改。</p>
<h3 id="PIL库"><a href="#PIL库" class="headerlink" title="PIL库"></a>PIL库</h3><p>安装<code>pip install pillow</code> </p>
<p>引入<code>from PIL import Image</code> Image代表图像的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<p>原图</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/1.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im=np.array(Image.<span class="built_in">open</span>(<span class="string">&quot;1.jpg&quot;</span>))</span><br><span class="line">print(<span class="string">&quot;图像的矩阵大小是&quot;</span>,im.shape,<span class="string">&quot;\n图像的元素类型是&quot;</span>,im.dtype)</span><br><span class="line"><span class="comment"># 图像的矩阵大小是 (469, 565, 3) 图像的元素类型是 uint8</span></span><br><span class="line">inv_im=[<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>]-im   <span class="comment"># 色彩反转</span></span><br><span class="line">out_im=Image.fromarray(inv_im.astype(<span class="string">&#x27;uint8&#x27;</span>))</span><br><span class="line">out_im.save(<span class="string">&quot;1_inv.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>色彩反转</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/1_inv.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im=np.array(Image.<span class="built_in">open</span>(<span class="string">&quot;1.jpg&quot;</span>).convert(<span class="string">&#x27;L&#x27;</span>)) <span class="comment"># 取灰度值</span></span><br><span class="line">out_im = Image.fromarray(im.astype(<span class="string">&#x27;uint8&#x27;</span>))</span><br><span class="line">out_im.save(<span class="string">&quot;1_gray.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>灰度值</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/1_gray.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im = np.array(Image.<span class="built_in">open</span>(<span class="string">&quot;1.jpg&quot;</span>).convert(<span class="string">&#x27;L&#x27;</span>)) </span><br><span class="line">change1_im=(<span class="number">100</span>/<span class="number">255</span>)*im+<span class="number">150</span>  <span class="comment"># 进行一个乱七八糟的区间变化</span></span><br><span class="line">out_im = Image.fromarray(change1_im.astype(<span class="string">&#x27;uint8&#x27;</span>))</span><br><span class="line">out_im.save(<span class="string">&quot;1_change1.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>区间变化1</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/1_change1.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">change2_im = <span class="number">255</span>*(im*<span class="number">255</span>)**<span class="number">2</span>  <span class="comment"># 进行第二个乱七八糟的区间变化</span></span><br><span class="line">out_im = Image.fromarray(change2_im.astype(<span class="string">&#x27;uint8&#x27;</span>))</span><br><span class="line">out_im.save(<span class="string">&quot;1_change2.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>区间变化2</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/1_change2.jpg"></p>
<h3 id="手绘图像"><a href="#手绘图像" class="headerlink" title="手绘图像"></a>手绘图像</h3><p>手绘风格图片特点：</p>
<ul>
<li>黑白灰</li>
<li>边界线条较重</li>
<li>相同或相近色彩趋于白色</li>
<li>略有光源效果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.asarray(Image.<span class="built_in">open</span>(<span class="string">&#x27;1.jpg&#x27;</span>).convert(<span class="string">&#x27;L&#x27;</span>)).astype(<span class="string">&#x27;float&#x27;</span>)</span><br><span class="line"></span><br><span class="line">depth = <span class="number">10.</span> 						<span class="comment"># (0-100)</span></span><br><span class="line">grad = np.gradient(a)  <span class="comment"># 取图像灰度的梯度值</span></span><br><span class="line">grad_x, grad_y = grad  <span class="comment"># 分别取横纵图像梯度值</span></span><br><span class="line">grad_x = grad_x*depth/<span class="number">100.</span></span><br><span class="line">grad_y = grad_y*depth/<span class="number">100.</span></span><br><span class="line">A = np.sqrt(grad_x**<span class="number">2</span> + grad_y**<span class="number">2</span> + <span class="number">1.</span>)</span><br><span class="line">uni_x = grad_x/A</span><br><span class="line">uni_y = grad_y/A</span><br><span class="line">uni_z = <span class="number">1.</span>/A</span><br><span class="line"></span><br><span class="line">vec_el = np.pi/<span class="number">2.2</span> 					<span class="comment"># 光源的俯视角度，弧度值</span></span><br><span class="line">vec_az = np.pi/<span class="number">4.</span> 					<span class="comment"># 光源的方位角度，弧度值</span></span><br><span class="line">dx = np.cos(vec_el)*np.cos(vec_az)  <span class="comment"># 光源对x 轴的影响</span></span><br><span class="line">dy = np.cos(vec_el)*np.sin(vec_az)  <span class="comment"># 光源对y 轴的影响</span></span><br><span class="line">dz = np.sin(vec_el)  <span class="comment"># 光源对z 轴的影响</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">255</span>*(dx*uni_x + dy*uni_y + dz*uni_z)  <span class="comment"># 光源归一化</span></span><br><span class="line">b = b.clip(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">im = Image.fromarray(b.astype(<span class="string">&#x27;uint8&#x27;</span>))  <span class="comment"># 重构图像</span></span><br><span class="line">im.save(<span class="string">&#x27;1_draw.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>手绘</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/Numpy%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/1_draw.jpg"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>配置JSP开发环境</title>
    <url>/2020/03/24/guan-yu-pei-zhi-jsp-kai-fa-huan-jing-yi-er-shi/</url>
    <content><![CDATA[<h1 id="配置JSP开发环境"><a href="#配置JSP开发环境" class="headerlink" title="配置JSP开发环境"></a>配置JSP开发环境</h1><blockquote>
<p>学校组织学习JSP，配置过程起了不少幺蛾子，记录一下，万一哪天电脑炸了可以回来看看。</p>
</blockquote>
<h2 id="1-安装JAVA-JDK"><a href="#1-安装JAVA-JDK" class="headerlink" title="1.安装JAVA JDK"></a>1.安装JAVA JDK</h2><h3 id="1-下载安装JDK"><a href="#1-下载安装JDK" class="headerlink" title="1.下载安装JDK"></a>1.下载安装JDK</h3><p>这个默认配置完了，顺便写一下。</p>
<blockquote>
<p>JDK下载地址：<a href="https://www.oracle.com/java/technologies/javase-jdk8-downloads.html">Java SE Development Kit  8u241</a></p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/java.jpg"></p>
<p>双击下载的JDK安装包可执行文件开始安装，第一次为jdk的安装，第二次为jre的安装。建议两个文件夹放一块。JDK文件夹里包含jre。</p>
<hr>
<p>JRE和JDK是啥：<br>JRE：Java Runtime Environment<br>JDK：Java Development Kit<br>JRE是java运行时环境，包含了java虚拟机，java基础类库。java语言编写的程序运行所需要的软件环境，提供给运行java程序的用户使用。<br>JDK顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。</p>
<hr>
<p>顺便提一下：<br>以前下载页面长这样，所以很多博客教程给的下载地址是下面的页面：<br>那时下载JDK是不需要任何其他操作的，点击即可下载。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/before.jpg"><br>现在被Oracle公司收购了，需要注册Oracle账号。</p>
<hr>
<h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2.配置环境变量"></a>2.配置环境变量</h3><p>安装完成之后配置环境变量。</p>
<ol>
<li><p>JAVA_HOME环境变量。<br>作用：它指向jdk的安装目录，Tomcat就是通过搜索JAVA_HOME变量来找到并使用安装好的jdk。<br>配置方法：在系统变量里点击新建，变量名填写JAVA_HOME，变量值填写JDK的安装路径。<br><code>放的是jdk整个根目录</code></p>
</li>
<li><p>CLASSPATH环境变量。<br>作用：是指定类搜索路径，JVM通过CLASSPATH来寻找类的。我们需要把jdk安装目录下的lib子目录中的dt.jar和tools.jar设置到CLASSPATH中；或者直接把lib路径填在这里。当然，当前目录“.”也必须加入到该变量中，为了更快搜索到结果。</p>
<p>另外：jdk1.5版本之后可不需要设置CLASS_PATH，建议继续设置以保证向下兼用问题。<br><code>放的是jdk的lib目录和.路径</code></p>
</li>
<li><p>PATH环境变量<br>作用：指定命令搜索路径，在命令行下面执行命令如javac编译java程序时，它会到PATH变量所指定的路径中查找看是否能找到相应的命令程序。<br>在系统变量里找到Path变量，这是系统自带的，不用新建。<code>放的是jdk的bin目录</code></p>
</li>
</ol>
<p>linux下是在配置文件里加上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/lib/java/jdk-15.0.1</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib</span><br></pre></td></tr></table></figure>

<p>路径改为自己的。</p>
<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h3><p>打开命令行分别输入<code>java</code>，<code>javac</code>， <code>java -version</code>，没问题就ok了。</p>
<hr>
<h2 id="2-安装Tomcat"><a href="#2-安装Tomcat" class="headerlink" title="2.安装Tomcat"></a>2.安装Tomcat</h2><blockquote>
<p>Tomcat：<a href="http://tomcat.apache.org/">下载地址</a></p>
</blockquote>
<h3 id="1-这里演示解压版"><a href="#1-这里演示解压版" class="headerlink" title="1.这里演示解压版"></a>1.这里演示解压版</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/tomcat.jpg"></p>
<p>解压，注意文件目录名不能有中文和空格。</p>
<h3 id="2-环境变量配置"><a href="#2-环境变量配置" class="headerlink" title="2.环境变量配置"></a>2.环境变量配置</h3><blockquote>
<p>目录介绍如下：</p>
<ul>
<li>bin：二进制执行文件。里面最常用的文件是<strong>startup.bat</strong>，如果是 Linux 或 Mac 系统启动文件为 <strong>startup.sh</strong>。</li>
<li>conf:配置目录。里面最核心的文件是<strong>server.xml</strong>。可以在里面改端口号等。默认端口号是8080，也就是说，此端口号不能被其他应用程序占用。</li>
<li>lib：库文件。tomcat运行时需要的jar包所在的目录</li>
<li>logs：日志</li>
<li>temp：临时产生的文件，即缓存</li>
<li>webapps：web的应用程序。<strong>web应用放置到此目录下浏览器可以直接访问</strong></li>
<li>work：编译以后的class文件。</li>
</ul>
</blockquote>
<ol>
<li><p>添加TOMCAT_HOME的环境变量，值为<code>盘符:\你解压的目录\tomcat根目录</code></p>
</li>
<li><p>添加CATALINA_HOME环境变量，值为<code>%TOMCAT_HOME%</code></p>
</li>
<li><p>添加CATALINA_BASE环境变量，值为<code>%TOMCAT_HOME%。</code></p>
</li>
<li><p>系统变量Path的最后面添加</p>
<p><code>%CATALINA_HOME%\lib;%CATALINA_HOME%\lib\servlet-api.jar;%CATALINA_HOME%\lib\jsp-api.jar</code></p>
<p>免安装版本需要配置这些环境变量，写成带“%”号是用变量替换路径，如需更改，只要更改TOMACAT_HOME一处路径即可。</p>
</li>
</ol>
<h3 id="3-Tomcat配置"><a href="#3-Tomcat配置" class="headerlink" title="3.Tomcat配置"></a>3.Tomcat配置</h3><ol>
<li>管理员的配置：进入根目录下的conf文件，编辑<code>tomcat-users.xml</code>以修改用户名和密码</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  &lt;role rolename=&quot;tomcat&quot;/&gt;</span></span><br><span class="line"><span class="comment">  &lt;role rolename=&quot;role1&quot;/&gt;</span></span><br><span class="line"><span class="comment">  &lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;tomcat&quot;/&gt;</span></span><br><span class="line"><span class="comment">  &lt;user username=&quot;both&quot; password=&quot;tomcat&quot; roles=&quot;tomcat,role1&quot;/&gt;</span></span><br><span class="line"><span class="comment">  &lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;tomcat&quot;/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>解决乱码问题</p>
<p>可能会出现由于出现字符编码不同导致的乱码：<br>找到根目录的<code>conf</code>文件下的<code>logging.properties</code>文件，编辑找到<code> java.util.logging.ConsoleHandler.encoding = utf-8</code></p>
<p>改为<code>java.util.logging.ConsoleHandler.encoding = GBK</code></p>
</li>
<li><p>启动服务</p>
<p>在根目录下<code>bin</code>文件夹里点击<code>startup.bat</code>批处理文件，最后出现</p>
<p> <code>...org.apache.catalina.startup.Catalina.start Server startup in [756] milliseconds..</code></p>
<p>服务启动成功后，浏览器打开本地默认端口<code>localhost:8080</code>，出现下面页面表示安装成功：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.jpg"></p>
</li>
</ol>
<hr>
<h2 id="3-将-Tomcat-和-Eclipse-相关联"><a href="#3-将-Tomcat-和-Eclipse-相关联" class="headerlink" title="3.将 Tomcat 和 Eclipse 相关联"></a>3.将 Tomcat 和 Eclipse 相关联</h2><p>学校老师教学都用的Eclipse，所以先用Eclipse试一下。由于以前拿eclipse学过一点java，本人用的版本是这个：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/Eclipse.jpg"></p>
<p>默认配置步骤按照<a href="https://www.runoob.com/jsp/eclipse-jsp.html">菜鸟教程</a>走，当然，也不乏视频教程：<a href="https://www.bilibili.com/video/BV18s411u7EH?p=4">JavaWeb视频教程</a>。但是其中出现了许多很有趣的问题。</p>
<h3 id="1-Eclipse的首选项里没有server设置"><a href="#1-Eclipse的首选项里没有server设置" class="headerlink" title="1.Eclipse的首选项里没有server设置"></a>1.Eclipse的首选项里没有server设置</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/server.jpg"></p>
<p>Eclipse首选项里原本是没有server选项的，这里我参考了博主<a href="https://www.cnblogs.com/xiaoxiaoweng/">七月晓晓翁</a>的帖子：<a href="https://www.cnblogs.com/xiaoxiaoweng/p/7298183.html">eclipse没有server选项解决方法</a>；<br>首先：</p>
<ol>
<li>安装新软件，找到对应的选项即可</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%AE%89%E8%A3%85%E6%96%B0%E8%BD%AF%E4%BB%B6.jpg"></p>
<ol start="2">
<li>添加插件<code>Kepler - http://download.eclipse.org/releases/kepler</code></li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/%E6%B7%BB%E5%8A%A0.jpg"></p>
<ol start="3">
<li><p>点击Ok，找到选项<code>Web,XML, Java EE and OSGi Enterprise Development</code> 全部勾选。一直next即可。注意：这里如果你没有勾选勾选<code>Group items by category</code>是没有<code>Web,XML, Java EE and OSGi Enterprise Development</code>这一项分组的。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/Web....jpg"></p>
</li>
</ol>
<h3 id="2-给Eclipse换镜像源"><a href="#2-给Eclipse换镜像源" class="headerlink" title="2.给Eclipse换镜像源"></a>2.给Eclipse换镜像源</h3><p>在刚才我们的一通操作，认识到Eclipse从默认源下载资源的速度令人骂娘，所以给它换个源。参考博客<a href="https://blog.csdn.net/mashuai720/article/details/80001793">eclipse 更换国内镜像</a>。把所有<code>download.eclipse.org</code>换成国内镜像地址即可。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/%E6%8D%A2%E6%BA%90.jpg"></p>
<blockquote>
<p>1.企业贡献：</p>
<p>搜狐开源镜像站：<a href="http://mirrors.sohu.com/">http://mirrors.sohu.com/</a></p>
<p>网易开源镜像站：<a href="http://mirrors.163.com/">http://mirrors.163.com/</a></p>
<p>首都在线科技股份有限公司：<a href="http://mirrors.yun-idc.com/">http://mirrors.yun-idc.com/</a></p>
<p>2.大学教学：</p>
<p>镜像较多内容:<br>西安电子科技大学： <a href="ftp://linux.xidian.edu.cn/">ftp://linux.xidian.edu.cn</a></p>
<p>哈尔滨工业大学： <a href="http://run.hit.edu.cn/">http://run.hit.edu.cn/</a></p>
<p>大连理工大学： <a href="http://mirror.dlut.edu.cn/">http://mirror.dlut.edu.cn/</a></p>
<p>北京理工大学：<br><a href="http://mirror.bit.edu.cn/">http://mirror.bit.edu.cn</a> (IPv4 only)</p>
<p> <a href="http://mirror.bit6.edu.cn/">http://mirror.bit6.edu.cn</a> (IPv6only)</p>
<p>北京交通大学： <a href="http://mirror.bjtu.edu.cn/">http://mirror.bjtu.edu.cn</a> (IPv4 only) </p>
<p><a href="http://mirror6.bjtu.edu.cn/">http://mirror6.bjtu.edu.cn</a> (IPv6 only)</p>
<p><a href="http://debian.bjtu.edu.cn(ipv4+ipv6)/">http://debian.bjtu.edu.cn(IPv4+IPv6)</a></p>
<p>兰州大学：<a href="http://mirror.lzu.edu.cn/">http://mirror.lzu.edu.cn/</a></p>
<p>厦门大学：<a href="http://mirrors.xmu.edu.cn/">http://mirrors.xmu.edu.cn/</a></p>
<p>上海交通大学：<br><a href="http://ftp.sjtu.edu.cn/">http://ftp.sjtu.edu.cn/</a> (IPv4 only)  </p>
<p> <a href="http://ftp6.sjtu.edu.cn/">http://ftp6.sjtu.edu.cn</a> (IPv6 only)</p>
<p>清华大学：<br><a href="http://mirrors.tuna.tsinghua.edu.cn/">http://mirrors.tuna.tsinghua.edu.cn/</a> (IPv4+IPv6)</p>
<p><a href="http://mirrors.6.tuna.tsinghua.edu.cn/">http://mirrors.6.tuna.tsinghua.edu.cn/</a> (IPv6 only)</p>
<p><a href="http://mirrors.4.tuna.tsinghua.edu.cn/">http://mirrors.4.tuna.tsinghua.edu.cn/</a> (IPv4 only)</p>
<p>天津大学：<a href="http://mirror.tju.edu.cn/">http://mirror.tju.edu.cn/</a></p>
<p>浙江大学：<a href="http://mirrors.zju.edu.cn/">http://mirrors.zju.edu.cn/</a></p>
<p>中国科学技术大学：<br><a href="http://mirrors.ustc.edu.cn/">http://mirrors.ustc.edu.cn/</a> (IPv4+IPv6)</p>
<p><a href="http://mirrors4.ustc.edu.cn/">http://mirrors4.ustc.edu.cn/</a></p>
<p><a href="http://mirrors6.ustc.edu.cn/">http://mirrors6.ustc.edu.cn/</a></p>
<p>西南大学：<a href="http://linux.swu.edu.cn/swudownload/Distributions/">http://linux.swu.edu.cn/swudownload/Distributions/</a></p>
<p>华中科技大学：<a href="http://mirrors.hust.edu.cn/">http://mirrors.hust.edu.cn/</a></p>
<p>东北大学：<br><a href="http://mirror.neu.edu.cn/">http://mirror.neu.edu.cn/</a>(IPv4 only)</p>
<p><a href="http://mirror.neu6.edu.cn/">http://mirror.neu6.edu.cn/</a> (IPv6 only)</p>
<p>电子科技大学：<a href="http://ubuntu.uestc.edu.cn/">http://ubuntu.uestc.edu.cn/</a></p>
<p>青岛大学：<a href="http://mirror.qdu.edu.cn/">http://mirror.qdu.edu.cn/</a></p>
<p>东软信息学院： <a href="http://mirrors.neusoft.edu.cn/">http://mirrors.neusoft.edu.cn/</a></p>
<p>南京师范大学：<a href="http://mirrors.njnu.edu.cn/">http://mirrors.njnu.edu.cn/</a></p>
</blockquote>
<h3 id="3-Eclipse不支持tomcat9-0版本"><a href="#3-Eclipse不支持tomcat9-0版本" class="headerlink" title="3.Eclipse不支持tomcat9.0版本"></a>3.Eclipse不支持tomcat9.0版本</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/serverapache.jpg"></p>
<p>我们在操作过程中发现没有我们下载的<code>Apacha Tomat v9.0</code>选项，尽管我的eclipse的版本是相对较新的。所以这里参考<a href="https://blog.csdn.net/wwd0501/article/details/78737736">eclipse不支持tomcat8.0版本解决</a>，在插件市场<code>marketplace</code>下载插件<code>Eclipse JST Server Adapters</code>,注意下载第一个：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/jst.jpg"></p>
<ul>
<li>然而并没有什么卵用…我沉默了…<br>当然，感兴趣的朋友可以继续：<a href="https://blog.csdn.net/largestone_187/article/details/5748790">Eclipse下Lomboz插件安装</a><br><a href="https://blog.csdn.net/veteran_/article/details/7973653">JSP开发所需要的Eclipse插件及安装配置方法</a></li>
<li>作为菜鸡，暂时不想在IDE上大费功夫，先不奉陪了…（笑）<br>算是学到了Eclipse  MyEclipse 和 Eclipse for Java EE的区别和联系，以后有精力再补充eclipse的插件安装和环境配置。</li>
</ul>
<hr>
<h2 id="4-InterliJ-IDEA配置Tomcat"><a href="#4-InterliJ-IDEA配置Tomcat" class="headerlink" title="4.InterliJ IDEA配置Tomcat"></a>4.InterliJ IDEA配置Tomcat</h2><blockquote>
<p>IDEA <strong>Ultimate</strong>版：<a href="https://www.jetbrains.com/idea/download/#section=windows">官网下载</a></p>
</blockquote>
<p>我以前用的IDEA的社区版，无法New一个Web Appplication，当然，有不少大佬利用maven来创建工程：<a href="https://blog.csdn.net/u012364631/article/details/47682011">IDEA Community(社区版) 使用Maven创建Web工程 并部署tomcat</a>。但是我这样的萌新还是先用集成好的Ultimate版靠谱。</p>
<p>JB公司产品激活方法自询。</p>
<hr>
<p>然后就是新建项目了：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/new_project.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/java_ee.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/JSP.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/project.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/project_structure.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/WEB-INF.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/output_path.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/jars_or_directories.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/choose_lib.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/directory.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%BA%93.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/configuragurations.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/templates.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/add_tomcat.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/add_artifact.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/output.jpg"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1.jpg"></p>
<p>搞定了，不得不说简直是新手的福音。<br>不过默认设置为每次修改jsp文件，重新生成页面都要重启tomcat，很麻烦。我们改为每次保存时刷新。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E5%85%B3%E4%BA%8E%E9%85%8D%E7%BD%AEJSP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%80%E4%BA%8C%E4%BA%8B/%E6%94%B9%E4%B8%BA%E6%AF%8F%E6%AC%A1%E5%88%B7%E6%96%B0.jpg"></p>
<p>OK，现在可以快乐地学习了。</p>
<h2 id="5-使用JDBC连接mysql数据库"><a href="#5-使用JDBC连接mysql数据库" class="headerlink" title="5.使用JDBC连接mysql数据库"></a>5.使用JDBC连接mysql数据库</h2><h4 id="在视图中连接并查看数据库"><a href="#在视图中连接并查看数据库" class="headerlink" title="在视图中连接并查看数据库"></a>在视图中连接并查看数据库</h4><p>记得在idea的数据库连接设置里填上时区。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看数据库时区 mysql&gt; show variables like <span class="string">&#x27;%time_zone%&#x27;</span>;</span></span><br><span class="line"> +------------------+--------+</span><br><span class="line"> | Variable_name | Value | </span><br><span class="line"> +------------------+--------+ </span><br><span class="line"> | system_time_zone | EST |</span><br><span class="line"> | time_zone | SYSTEM |</span><br><span class="line"> +------------------+--------+ </span><br><span class="line"> 2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>mysql默认使用的SYSTEM时区，即EST时区，查询相关资料可知，EST时区要比北京时间（东八区）慢13个小时，在数据库中的表现即为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select now();</span></span><br><span class="line"> +---------------------+</span><br><span class="line"> | now() |</span><br><span class="line"> +---------------------+ </span><br><span class="line"> | 2017-03-09 21:24:39 |</span><br><span class="line"> +---------------------+</span><br><span class="line"> 1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>修改方式一:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置全局时区 mysql&gt; <span class="built_in">set</span> global time_zone = <span class="string">&#x27;+8:00&#x27;</span>;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec) </span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置时区为东八区 mysql&gt; <span class="built_in">set</span> time_zone = <span class="string">&#x27;+8:00&#x27;</span>;</span> </span><br><span class="line">Query OK, 0 rows affected (0.00 sec) </span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新权限使设置立即生效 mysql&gt; flush privileges;</span> </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show variables like <span class="string">&#x27;%time_zone%&#x27;</span>;</span></span><br><span class="line"> +------------------+--------+</span><br><span class="line"> | Variable_name    | Value  |</span><br><span class="line"> +------------------+--------+</span><br><span class="line"> | system_time_zone | EST    |</span><br><span class="line"> | time_zone        | +08:00 | </span><br><span class="line"> +------------------+--------+</span><br><span class="line"> 2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p><strong>修改方式二：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure>

<p>在mysqld下边的配置中添加一行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">default-time_zone = &#x27;+8:00&#x27;</span><br></pre></td></tr></table></figure>

<p>重启mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>


<h4 id="使用JDBC连接mysql数据库"><a href="#使用JDBC连接mysql数据库" class="headerlink" title="使用JDBC连接mysql数据库"></a>使用JDBC连接mysql数据库</h4><p>将数据库连接的依赖包放在项目的lib文件夹里。</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>教育邮箱白嫖记</title>
    <url>/2021/02/16/jiao-yu-you-xiang-bai-piao-ji/</url>
    <content><![CDATA[<h1 id="当你拥有一个教育邮箱"><a href="#当你拥有一个教育邮箱" class="headerlink" title="当你拥有一个教育邮箱"></a>当你拥有一个教育邮箱</h1><p>最近在学校网站逛一圈找找资源，突然发现我还有一个教育邮箱账户没激活，教育邮箱的白嫖福利相必大家都懂，当然是要充分利用起来呀。</p>
<p>如果你没有教育邮箱，就自行找一个稳定点的临时邮箱网站吧，网上这样的教程不少，比如：<a href="https://yangyang.im/post/ONKcbU4-k/">羊羊自留地 (yangyang.im)</a>。我以前曾用过<a href="https://t.odmail.cn/">t.odmail.cn</a>这个临时邮箱，不过目前它挂了。可以试一下这个：</p>
<blockquote>
<p>企业临时邮箱：<a href="https://xkx.me/#">xkx - Jaz Mail | Temp Mail | 临时邮箱~</a></p>
</blockquote>
<p>下面是能领取到的教育福利：</p>
<h2 id="Jetbrains全家桶"><a href="#Jetbrains全家桶" class="headerlink" title="Jetbrains全家桶"></a>Jetbrains全家桶</h2><blockquote>
<p><a href="https://www.jetbrains.com/shop/eform/students">JetBrains Products for Learning</a></p>
</blockquote>
<p>JB公司的产品无须多言。网上的注册码也是很泛滥了，但多数不稳定。<a href="https://zhile.io/">zhile</a>大佬也对外宣布放弃维护了。目前能用的我先贴一个：<a href="http://lookdiv.com/index/index/indexcodeindex.html">lookdiv</a>，提供的激活码还行，需要每月重新填一次。现在时间是2021.02.17，看这个站能活多久。<br>所以，咱有正当理由享受正版，有用不用是傻子。仅需要一个教育邮箱+验证：</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235210.png?raw=true"></p>
<p>以后用账号激活即可。可稳定升级，每隔一年需要在邮箱验证一遍账户。</p>
<h2 id="Office365教育版"><a href="#Office365教育版" class="headerlink" title="Office365教育版"></a>Office365教育版</h2><blockquote>
<p><a href="https://signup.microsoft.com/signup?sku=student">Office 365 教育版 (microsoft.com)</a></p>
</blockquote>
<p>享受免费的Word、Excel、PowerPoint、Teams、OneDrive。<br>其中主要内容是1T空间不限速的OneDrive商业版，1T还是5T取决于邮箱管理员的账户设置，管理员设置5T的教程：</p>
<blockquote>
<p><a href="https://docs.microsoft.com/zh-cn/archive/blogs/educloud/increase-onedrive-for-business-storage-to-5tb">Increase OneDrive for Business Storage to 5TB | Microsoft Docs</a></p>
</blockquote>
<p>5T存储空间用到90%可以扩容到25T，还是需要管理员操作，扩容教程:</p>
<blockquote>
<p><a href="https://www.moerats.com/archives/975/">微软OneDrive网盘免费升级到25T容量教程 - Rat’s Blog (moerats.com)</a></p>
</blockquote>
<p>说明一下，国内大多数学校无心认证微软教育账户管理员，这有利有弊。管理员可以查看，控制组员的账户产品，例如查看、删除你的OneDrive文件，修改你的账户密码等等，组员当然不希望看到这种情况；没有管理员则不能对成员账户进行高级设置，成员账户均采用默认账户设置。</p>
<blockquote>
<p>管理员登陆后台：<a href="https://admin.microsoft.com/Adminportal/Home">https://admin.microsoft.com/Adminportal/Home</a></p>
</blockquote>
<p>此外，如果你是用的国内三幻神114.114.114.114的DNS，OneDrive个人版的在线查看<a href="https://onedrive.live.com/">onedrive.live.com</a>域名已被DNS污染。除了修改服务器，还可以在本地HOST文件添加本地解析。issues可看官方帖：<a href="https://answers.microsoft.com/zh-hans/msoffice/forum/msoffice_account-mso_windows8-mso_365hp/office-365%E4%B8%AA%E4%BA%BA%E7%89%88-office/ccace36a-15bb-4125-a1c4-01c971c17981">office 365个人版 office online服务无法使用 - Microsoft Community</a>。</p>
<h3 id="本地HOST文件添加本地解析"><a href="#本地HOST文件添加本地解析" class="headerlink" title="本地HOST文件添加本地解析"></a>本地HOST文件添加本地解析</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 151.101.64.133    raw.githubusercontent.com</span><br><span class="line">134.170.108.26    onedrive.live.com</span><br></pre></td></tr></table></figure>

<h3 id="怎么验证是否遭遇DNS污染"><a href="#怎么验证是否遭遇DNS污染" class="headerlink" title="怎么验证是否遭遇DNS污染"></a>怎么验证是否遭遇DNS污染</h3><ol>
<li><p>进PowerShell，ipconfig查看DNS的IP。</p>
</li>
<li><p>输入<code>nslookup [待解析域名] [你的DNS服务器IP(114.114.114.114)]</code>，查看是否成功。</p>
</li>
<li><p>输入<code>nslookup [待解析域名] [谷歌DNS服务器IP(8.8.8.8)]</code>作为对照，查看是否成功。</p>
</li>
</ol>
<h3 id="OneDrive网盘"><a href="#OneDrive网盘" class="headerlink" title="OneDrive网盘"></a>OneDrive网盘</h3><p>如果你是购买的一线品牌的pc，正版的win系统都会自带一个OneDrive个人版，也就是5G阉割版，不过由于使用起来多有不便，比如网站打不开，下载抽风等等，很多人弃用了。其实整蛊整蛊之后OneDrive比百度云更适合作为个人云盘。</p>
<p>开始首先之前，说明一下百度云盘和OneDrive最大的区别。</p>
<p>百度。举个不是很恰当的例子：如果把用户上传下载文件这种使用云盘的行为比作为盛水，那百度网盘就好比是一个大水缸，每个用户掌管着这个水缸的水龙头，如果你充了会员，百度就把你的水龙头拧松一点，你接水速度就快；此外，百度云用户都知道文件的转储是非常快的，把别人的资源保存到自己的网盘是一瞬间的事情，之后你的网盘空间便会减少对应资源的大小，为什么转储速度会这么快呢？还是我所提到的大水缸原理，你的网盘并非是一个独立的盛水的碗，网盘里的文件并不是文件本身，而是文件在百度服务器地址的引用，或者说指针。所以百度对于网盘的空间发放一直是很大方的，因为这个所谓空间并非真正意义上的内存空间，其实是指针指向值的加法数值，实际给你的空间能容纳指针本身就行。基于此，有大佬自己写了第三方应用，做到了百度网盘存储空间无限大：既然网盘里存的是文件指针，那我就找到这个指针本身的地址，保存。对应项目也托管在Github，以前有b站up给这个项目引过流，不过视频被不可抗力封了，可惜我忘记给项目star了。</p>
<p>OneDrive。与百度云盘这种蓄水池式的网盘不同，OneDrive网盘更像是一个移动硬盘online。最大的好处是没有资源被封的危险，缺点是下载稳定性和分享转储麻烦。于是为了提升易用性，很多大佬利用OneDrive的API搭建起了个人网盘，形式类似于资源发布下载站。</p>
<h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><div class="note danger"><p>特此说明：非个人版本，管理员拥有你的账户所储存的文件的控制权。（当然，大多数国内学校网络部门无心认证OneDrive的管理员，即不存在更高权限者，你的账户仍是secret。）</p>
</div>

<p>OneDrive有不同的版本。例如我使用学校邮箱注册的版本就是A1版（教育版）。管理员是可以查看、删除其中文件的，所以请不要搞事情。</p>
<p><strong>如何查看版本呢？</strong><br>onedrive, 教育版A1，企业版E3 ，个人版都是走全球CDN, 经测试E3和A1账户域名后缀是sharepoint.com，走的CDN线路一样的。也可登录后在<strong>设置-订阅</strong>中查看。以下是我使用的版本：</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235211.png?raw=true"></p>
<p>若想了解更多OneDrive版本的问题，看这篇帖子：<a href="https://www.hostloc.com/thread-545474-1-1.html">【总结】对比下A1 E3 GD等最近讨论热度大的网盘。。-美国VPS综合讨论-全球主机交流论坛 - Powered by Discuz! (hostloc.com)</a></p>
<p>总结一下就是：</p>
<div class="tabs" id="onedrive-classes"><ul class="nav-tabs"><li class="tab active"><a href="#onedrive-classes-1">个人版</a></li><li class="tab"><a href="#onedrive-classes-2">世纪互联版</a></li><li class="tab"><a href="#onedrive-classes-3">开发者e3</a></li><li class="tab"><a href="#onedrive-classes-4">教育版a1p</a></li><li class="tab"><a href="#onedrive-classes-5">教育版a1</a></li></ul><div class="tab-content"><div class="tab-pane active" id="onedrive-classes-1"><p>价格：60-100/年（拼车）<br>空间：1T<br>隐私：保障。<br>国内线路稳定性：好。<br>国内：可用。<br>翻车指标：准付费，无所畏惧</p></div><div class="tab-pane" id="onedrive-classes-2"><p>价格：最低32.00/月<br>空间：1T<br>隐私：保障。<br>国内线路稳定性：非常好。<br>国内：可用。<br>翻车指标：准付费，无所畏惧</p></div><div class="tab-pane" id="onedrive-classes-3"><p>价格：300-500<br>空间：5T*25个账号<br>隐私：保障。<br>国内线路稳定性：不好。<br>国内：可用。（附带桌面应用）<br>翻车指标：微软风控。后续微软政策变更等。</p></div><div class="tab-pane" id="onedrive-classes-4"><p>价格：0-30<br>空间：5T<br>隐私：无保障。<br>国内线路稳定性：不好。<br>国内：可用。（附带桌面应用）<br>翻车指标：微软风控。后续微软政策变更等。</p></div><div class="tab-pane" id="onedrive-classes-5"><p>价格：0-10<br>空间：5T<br>隐私：无保障。<br>国内线路稳定性：不好。<br>国内：可用。<br>翻车指标：微软风控。后续微软政策变更等。</p></div></div></div>

<h4 id="个人版本-升级"><a href="#个人版本-升级" class="headerlink" title="个人版本 - 升级"></a>个人版本 - 升级</h4><p>个人用户（任意邮箱注册的用户拥有5G的空间），通过邀请链接注册的方式，每邀请一个人双方可以提升0.5G空间，最多邀请20个人升级到15G。</p>
<blockquote>
<p>这是我的邀请链接：<a href="https://onedrive.live.com/?invref=17395a74cd5dc896&amp;invscr=90">https://onedrive.live.com/?invref=17395a74cd5dc896&amp;invscr=90</a></p>
</blockquote>
<p>可以通过临时邮箱来注册账号，这里使用个人临时邮箱：</p>
<blockquote>
<p>个人临时邮箱：<a href="https://temp-mail.org/zh/">Temp Mail - 临时性 - 匿名电子邮件 (temp-mail.org)</a></p>
</blockquote>
<h4 id="商业版本-安全"><a href="#商业版本-安全" class="headerlink" title="商业版本 - 安全"></a>商业版本 - 安全</h4><p>若想了解更多账户安全相关的问题，看这篇帖子：<a href="https://answers.microsoft.com/zh-hans/msoffice/forum/all/%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%AD%A6%E7%9A%84/7491b2ac-3965-4360-af01-48b451ce71bb?page=1">使用大学的邮箱，我上传到onedrive的文件会被管理员查看到吗？ - Microsoft Community</a>。下面补上帖子中未发的图片：</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235213.png?raw=true" alt="1"></div><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235212.png?raw=true" alt="2"></div><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235217.png?raw=true" alt="3"></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235216.png?raw=true" alt="4"></div><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235214.png?raw=true" alt="5"></div><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235218.png?raw=true" alt="6"></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235215.png?raw=true" alt="7"></div><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235219.png?raw=true" alt="8"></div><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235221.png?raw=true" alt="9"></div></div><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235223.png?raw=true" alt="10"></div></div></div>

<h3 id="搭建下载站"><a href="#搭建下载站" class="headerlink" title="搭建下载站"></a>搭建下载站</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote>
<p>项目地址：<a href="https://github.com/qkqpttgf/OneManager-php">https://github.com/qkqpttgf/OneManager-php</a><br>最终效果：<a href="https://netdisk.mednight4.com/Share/">首页 - Share - mednight4’netdisk</a></p>
</blockquote>
<p>qkqpttgf/OneManager-php: An index &amp; manager of Onedrive based on serverless. Can be deployed to Heroku/Glitch/SCF/FG/FC/CFC/PHP web hosting/VPS.<br>OneManager是一个利用微软onedrive api将onedrive目录映射成一个云盘的程序，基于无服务器触发函数，支持直链下载、文件预览和文件上传。类似的程序有很多，比如OneIndex、OnePoint等等。这个程序的特点是支持多种OneDrive类型。<br>此外，基于此原理也有很多博主自己写了类似的项目，例如博主LOGI这个版本也可以考虑：</p>
<blockquote>
<p><a href="https://logi.im/back-end/fodi-on-cloudflare.html">在 Cloudflare 部署 FODI 后端 - LOGI</a></p>
</blockquote>
<p>这里我依然使用的OneManager，OneManager的优势在于功能相对完善，可以在线预览word，pdf，excel，ppt，图片，视频，音乐等文件；相关用户提交了自定义主题，界面美观；最重要的，作者更新勤奋，支持在线更新，无须再部署。</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235220.png?raw=true"></p>
<p>具体使用方法请<a href="https://github.com/qkqpttgf/OneManager-php">查看项目readme</a>。<br>但是作者的readme写得比较省略，所以诞生了不少博文教程，我列出一些可以借鉴的：</p>
<blockquote>
<p>Heroku： <a href="https://github.com/wallleap/auroraBlog/issues/55">利用OneManager和Heroku搭建自己的网盘 · Issue #55 · wallleap/auroraBlog (github.com)</a></p>
<p>CloudFlare： <a href="https://www.blueskyxn.com/202102/3903.html">OneManager+CloudFlare Workers：CFW版OM·图文部署教程【支持世纪互联OD和世纪互联SP】</a></p>
</blockquote>
<p>我使用的SCF 腾讯无服务器云函数。方法也很简单，作者readme已给出，无脑下一步就行。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol>
<li><p>进入<strong>函数服务</strong>，上方选择<strong>地区（中国香港）</strong>，然后点击<strong>新建</strong>。</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235225.png?raw=true"></p>
</li>
<li><p>输入<strong>函数名称</strong>，选择模<strong>板函数</strong>，在<strong>模糊搜索</strong>中输入<strong>onedrive</strong>，大小写随意，选择那个【获取onedrive信息…..】，点下一步，在代码界面不用动，直接点<strong>下一步</strong>。</p>
</li>
</ol>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235222.png?raw=true"></p>
<ol start="3">
<li>直接<strong>完成</strong>就行。<br> <del>点击触发管理，创建触发器，触发方式改成API网关触发，底下勾选启用集成响应，提交。</del></li>
</ol>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235226.png?raw=true"></p>
<ol start="4">
<li><p><strong>云函数-函数服务-触发管理</strong>中可以看到一个访问路径，访问它，进入安装页。</p>
</li>
<li><p>如果你有域名，可绑定自定义域名。这里我参考了FODI的博客<a href="https://logi.im/back-end/scf-onedrive-filelistor.html">自定义域名(可选)部分</a>。选择 <strong>API网关-服务-自定义域名-新建</strong>：</p>
</li>
</ol>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235224.png?raw=true"></p>
<p>选择<strong>自定义路径映射</strong>，<strong>新建</strong>一条记录，路径为 <strong>/</strong>  ，指向<strong>发布</strong>环境。</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235227.png?raw=true"></p>
<p>这里有个证书选项，默认是空的，可以采用以下两种方式申请免费证书，</p>
<ul>
<li>方式1（较麻烦）：<br>  <strong>SSL证书-我的证书-申请免费证书-亚洲诚信-设置相关项</strong>：</li>
</ul>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235228.png?raw=true" alt="申请证书"></p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235230.png?raw=true" alt="选择证书"></p>
<ul>
<li>方式2（推荐）：<br>  可以通过<strong>DNS解析DNSPod-域名解析列表-<a href="https://console.dnspod.cn/dns/list?source=cloud&from=cns_list_post">点此前往 DNSPod 控制台</a>-域名设置-添加记录-记录类型CNAME</strong>，记录值在触发方式的访问路径里，把.com后的的部分去掉就行了。最后点击操作里的<strong>SSL</strong>，选择添加，DNSPod控制台会自动为此记录指定的子域名绑定证书，你可以在<strong>证书管理</strong>里查看，部署成功后查看网站，会重定向到子域名，也可查看到网址证书：</li>
</ul>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235234.png?raw=true" alt="添加SSL证书"></p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235229.png?raw=true" alt="查看我的证书"></p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235232.png?raw=true" alt="浏览器网址查看证书"></p>
<ol start="6">
<li><p>设置OneDrive。设置选项详解可以看帖子：</p>
<blockquote>
<p><a href="https://www.2bboy.com/archives/176.html">Onedrive云盘程序——OneManager小白设置指南 - 醉后的星星 (2bboy.com)</a></p>
</blockquote>
<p> 给出我自己的设置图：</p>
<p> <img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235231.png?raw=true" alt="1"></p>
<p> <img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235235.png?raw=true" alt="2"></p>
</li>
</ol>
<h4 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h4><ul>
<li><p>主题选择：最美观的主题是renexmoe，缺点是缺少部分文件类型预览(pdf)，多文件时缺乏分页功能，只能显示第一页的内容，无法上传。<br>  功能比较全的主题有classic、purecool、onemoe、nchyn_grey，这些主题都具备满血的OneManage功能。但是目前OneManage本身仍然有Bug，例如在大量文件展示时，文件分页的最后一页为空，无法显示。<br>  主题样式表文件均托管在CDN，所以会先加载CDN的官方样式表，再加载自定义样式，如果你想给你的网盘自定一张分辨率很高的背景图就必须考虑图片加载速度的问题。也可以从CDN下载样式并修改，然后托管到自己订阅的CDN服务。</p>
<p>  <img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235233.png?raw=true" alt="主题选择"></p>
<p>  <img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235237.png?raw=true" alt="分页bug"></p>
</li>
<li><p>绑定OneDrive网盘。学校邮箱注册的OneDrive版本是国际版。我曾使用微软的Azure控制台新建应用，添加id和key的方式去绑定，给一个<a href="https://www.puresourcecode.com/dotnet/azure/save-and-retrieve-secret-from-azure-keyvault/">教程</a>，这种方式实在是不方便。<strong>A1版本（教育版）建议在设置里直接添加OneDrive分享链接</strong>，分享的链接有两种方式，访问者可编辑和访问者不可编辑，区别在于部署完后你的网盘站点是否支持上传，不可编辑当然就会上传出错了。个人版本（5G版本）无法通过分享链接创建，只能通过<a href="https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredApps">Azure新建应用</a>添加client，我添加应用的时候出现网络错误，应该是国内网络的锅，所以个人账户搭建就流产了。</p>
</li>
<li><p>客户上传。假如你设置为可编辑链接，那管理员登陆后即可在任意路径上传文件，游客只能在Guest指定目录上传文件，且上传后的文件对游客不可见，只对管理员可见。<strong>建议给游客上传目录加一个访问密码，避免傻子恶意上传</strong>。</p>
</li>
</ul>
<p>OneDrive部分到此结束。</p>
<h2 id="Github学生包"><a href="#Github学生包" class="headerlink" title="Github学生包"></a>Github学生包</h2><p>大多数开发相关的都放到github学生包了，免费的CDN托管、免费一年的域名等等…详情可以看<a href="https://education.github.com/pack">优惠页</a>。</p>
<p><img data-src="https://github.com/mednight4/picbed/blob/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210217235236.png?raw=true" alt="优惠项节选"></p>
<blockquote>
<p>申请：<a href="https://education.github.com/discount_requests/student_application">Request a discount - GitHub Education</a></p>
</blockquote>
<p>这个申请需要教育邮箱账户和你的学生证照片，申请时间需要人工审核，需要等几周。</p>
<div class="note info"><p>todo：等我申请到了再补。</p>
</div>

<p>两周后补充：</p>
<p>已翻车。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E6%95%99%E8%82%B2%E9%82%AE%E7%AE%B1%E7%99%BD%E5%AB%96%E8%AE%B0/20210302130406.png"></p>
<p>Github的申请很严格，开课了，无心搞事，以后有缘再弄。</p>
<h2 id="其他项"><a href="#其他项" class="headerlink" title="其他项"></a>其他项</h2><p><a href="https://www.qcloud.com/act/campus"><strong>腾讯云+校园</strong></a><br> 10 元一个月的云服务器，免费赠送 50GB 对象存储空间和移动者开发工具包</p>
<p><a href="https://promotion.aliyun.com/ntms/campus2017.html"><strong>阿里云 云翼</strong></a><br> 118元/年，阿里云 ECS+OSS+域名，需要学生身份认证</p>
<p><a href="http://www.autodesk.com.cn/education/home"><strong>Autodesk 学生包</strong></a><br> 旗下 AutoCAD , 3DMAX , Maya 等软件，其（教育版）免费试用期可延长至三年</p>
<p><a href="https://pantheon.io/edu"><strong>Pantheon 学生计划</strong></a><br> 免费的网站托管服务</p>
<p><a href="https://aws.amazon.com/cn/education/awseducate/"><strong>AWS 学生包</strong></a><br> 亚马逊云计算的学生包，可以获得至少 $40 的优惠和教育培训</p>
<p><a href="https://www.apple.com/us-hed/shop"><strong>苹果教育优惠</strong></a><br>产品打折</p>
<p>等等，还有很多服务，暂时用不上我就不提了。随便去知乎逛逛都有专门的话题讨论。<br>学到了一点是：以后想订阅服务前先查看是否支持教育优惠，没准奇怪的优惠又增加了。当初我是就吃了没白嫖的亏，自己花钱买的域名。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/0eed0b58d2c2">EDU教育邮箱福利 (通用) - 简书 (jianshu.com)</a></p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>毛概复习重点</title>
    <url>/2021/01/06/mao-gai-fu-xi-chong-dian/</url>
    <content><![CDATA[<h1 id="毛泽东思想和中国特色社会主义理论体系概论"><a href="#毛泽东思想和中国特色社会主义理论体系概论" class="headerlink" title="毛泽东思想和中国特色社会主义理论体系概论"></a>毛泽东思想和中国特色社会主义理论体系概论</h1><p>期末考试题型如下：</p>
<p>一、 单项选择题10个，每题2分，共20分。</p>
<p>二、 多项选择题5个，每题2分，共10分。</p>
<p>三、 辨析题2个，每题10分，共20分。</p>
<p>四、 简答题2个，每题10分，共20分。</p>
<p>五、 论述题2个，每题15分，共30分。</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h4 id="马克思主义中国化及其两次历史性飞跃"><a href="#马克思主义中国化及其两次历史性飞跃" class="headerlink" title="马克思主义中国化及其两次历史性飞跃"></a>马克思主义中国化及其两次历史性飞跃</h4><p>中国化就是</p>
<ul>
<li>  把马克思主义基本原理同中国具体实际和时代特征结合起来，运用马克思主义的立场、观点、方法研究和解决中国革命、建设、改革中的实际问题；</li>
<li>  总结和提炼中国革命、建设、改革的实践经验，从而认识和掌握客观规律，为马克思主义理论宝库增添新的内容；</li>
<li>  运用中国人民喜闻乐见的民族语言来阐述马克思主义理论，使之成为具有中国特色、中国风格、中国气派的马克思主义。</li>
</ul>
<p>两次飞跃：</p>
<ul>
<li><p>  第一次历史性飞跃发生在<strong>新民主主义革命</strong>时期，形成了<strong>毛泽东思想</strong>。</p>
</li>
<li><p>  第二次历史性飞跃发生在社会主义进入<strong>改革开放</strong>的新时期，形成了包括<strong>邓小平理论、“三个代表”重要思想、科学发展观、习近平新时代中国特色社会主义思想</strong>在内的中国特色社会主义理论体系。</p>
</li>
</ul>
<h4 id="邓小平理论首要的基本的理论问题"><a href="#邓小平理论首要的基本的理论问题" class="headerlink" title="邓小平理论首要的基本的理论问题"></a>邓小平理论首要的基本的理论问题</h4><p><strong>什么是社会主义、怎样建设社会主义。</strong></p>
<h4 id="习近平新时代中国特色社会主义思想是马克思主义中国化最新成果"><a href="#习近平新时代中国特色社会主义思想是马克思主义中国化最新成果" class="headerlink" title="习近平新时代中国特色社会主义思想是马克思主义中国化最新成果"></a>习近平新时代中国特色社会主义思想是马克思主义中国化最新成果</h4><p>党的十八大以来，以习近平为主要代表的中国共产党人以巨大的政治勇气和强烈的责任担当，提出一系列新理念新思想新战略，从理论和实践结合上系统回答了新时代坚持和发展什么样的中国特色社会主义、怎样坚持和发展中国特色社会主义这个重大时代课题，创立了习近平新时代中国特色社会主义思想。</p>
<p>习近平新时代中国特色社会主义思想，是对马克思列宁主义、毛泽东思想、邓小平理论、“三个代表”重要思想、科学发展观的继承和发展，是马克思主义中国化最新成果，是党和人民实践经验和集体智慧的结晶，是中国特色社会主义理论体系的重要组成部分，是全党全国人民为实现中华民族伟大复兴而奋斗的行动指南。</p>
<h3 id="第一章-毛泽东思想及其历史地位"><a href="#第一章-毛泽东思想及其历史地位" class="headerlink" title="第一章 毛泽东思想及其历史地位"></a>第一章 毛泽东思想及其历史地位</h3><p>1917年俄国十月革命的胜利开辟了世界无产阶级社会主义革命的新时代。</p>
<h4 id="毛泽东思想科学含义"><a href="#毛泽东思想科学含义" class="headerlink" title="毛泽东思想科学含义"></a>毛泽东思想科学含义</h4><p>毛泽东思想是在革命和建设的长期实践中，以毛泽东为主要代表的中国共产党人，根据马克思列宁主义基本原理，形成的适合中国情况的科学指导思想，是被实践证明了的关于中国革命和建设的正确的理论原则和经验总结，是中国共产党集体智慧的结晶。</p>
<h4 id="毛泽东思想的形成和发展"><a href="#毛泽东思想的形成和发展" class="headerlink" title="毛泽东思想的形成和发展"></a>毛泽东思想的形成和发展</h4><ul>
<li><p>  第一次国内革命战争时期，毛泽东在《中国社会各阶级的分析》《湖南农民运动考察报告》等著作中，提出了新民主主义革命的<strong>基本思想</strong>。</p>
</li>
<li><p>  土地革命战争时期，毛泽东在《中国的红色政权为什么能够存在？》《井冈山的斗争》《星星之火，可以燎原》《反对本本主义》等著作中，提出并阐述了农村包围城市、武装夺取政权的思想，标志着毛泽东思想的<strong>初步形成</strong>。</p>
</li>
<li><p>遵义会议以后，毛泽东在《实践论》和《矛盾论》两篇著作中，阐述了党内“左”的和右的错误的思想根源。</p>
<p>  在《〈共产党人〉发刊词》《中国革命和中国共产党》《新民主主义论》《论联合政府》等理论著作中，科学阐述了新民主主义革命的对象、动力、领导力量、性质和前途等基本问题，提出了新民主主义革命的总路线，指明了新民主主义革命的<strong>具体目标</strong>。</p>
<p>  新民主主义革命理论的系统阐述，实现了马克思主义与中国革命实践相结合的历史性飞跃，标志着毛泽东思想得到多方面展开而<strong>趋于成熟</strong>。1945年党的七大将毛泽东思想写入党章。</p>
</li>
<li><p>  解放战争时期和新中国成立以后，这一时期形成的关于社会主义革命和社会主义建设的重要思想，集中体现于毛泽东《在中国共产党第七届中央委员会第二次全体会议上的报告》《论人民民主专政》《论十大关系》《关于正确处理人民内部矛盾的问题》等著作中，是毛泽东思想的<strong>丰富和发展</strong>。</p>
</li>
</ul>
<h4 id="毛泽东思想活的灵魂"><a href="#毛泽东思想活的灵魂" class="headerlink" title="毛泽东思想活的灵魂"></a>毛泽东思想活的灵魂</h4><p><strong>实事求是，群众路线，独立自主。</strong></p>
<ul>
<li><p>  实事求是，就是一切从实际出发，理论联系实际，坚持在实践中检验真理和发展真理。</p>
</li>
<li><p>  群众路线，就是一切为了群众，一切依靠群众，从群众中来，到群众中去，把党的正确主张变为群众的自觉行动。</p>
</li>
<li><p>  独立自主，就是坚持独立思考，走自己的路，就是坚定不移地维护民族独立、捍卫国家主权，把立足点放在依靠自己力量的基础上，同时积极争取外援，开展国际经济文化交流，学习外国一切对我们有益的先进事物。</p>
</li>
</ul>
<h4 id="毛泽东思想的历史地位"><a href="#毛泽东思想的历史地位" class="headerlink" title="毛泽东思想的历史地位"></a>毛泽东思想的历史地位</h4><p>马克思主义中国化的第一个重大理论成果。</p>
<ul>
<li>  在马克思主义中国化的历史进程中，毛泽东思想为中国特色社会主义理论体系的形成奠定了理论基础。尤其是毛泽东思想关于社会主义建设的理论，为开创和发展中国特色社会主义作了重要的理论准备。</li>
</ul>
<p>中国革命和建设的科学指南。</p>
<ul>
<li>  他领导我们建立起独立的比较完整的工业体系和国民经济体系，为社会主义现代化建设奠定了重要的物质技术基础，为在中国这样落后的东方大国进行社会主义建设积累了重要经验。</li>
</ul>
<p>中国共产党和中国人民宝贵的精神财富。</p>
<ul>
<li>  毛泽东思想基本原理、原则和科学方法具有普遍的指导意义。我们应该珍视这半个多世纪以来在中国革命和建设过程中，把马克思主义基本原理同中国具体实际相结合所形成的科学理论成果，并在新的实践中运用和发展。</li>
</ul>
<h3 id="第四章-社会主义建设道路初步探索的理论成果"><a href="#第四章-社会主义建设道路初步探索的理论成果" class="headerlink" title="第四章 社会主义建设道路初步探索的理论成果"></a>第四章 社会主义建设道路初步探索的理论成果</h3><p><strong>《论十大关系》</strong>标志着党探索中国社会主义建设道路的<strong>良好开端</strong>。</p>
<p>毛泽东提出，社会主义又可分为两个阶段，第一个阶段是<strong>不发达的社会主义</strong>，第二个阶段是<strong>比较发达的社会主义</strong>。</p>
<p>人名 - 理论：</p>
<ul>
<li><p>  周恩来提出了知识分子是工人阶级一部分的观点</p>
</li>
<li><p>  毛泽东、刘少奇、周恩来提出了把资本主义经济作为社会主义经济的补充的思想。</p>
</li>
<li><p>  朱德提出了要注意发展手工业和农业多种经营的思想。</p>
</li>
<li><p>  陈云提出了“三个主体，三个补充”的设想。</p>
</li>
<li><p>  刘少奇提出了使社会主义经济既有计划性又有多样性和灵活性的主张，以及按经济办法管理经济的思想。</p>
</li>
<li><p>  陈云提出了要建立“适合于我国情况和人民需要的社会主义的市场”的思想。</p>
</li>
</ul>
<h4 id="社会主义建设道路初步探索的意义和经验教训"><a href="#社会主义建设道路初步探索的意义和经验教训" class="headerlink" title="社会主义建设道路初步探索的意义和经验教训"></a>社会主义建设道路初步探索的意义和经验教训</h4><p>重要意义：</p>
<ul>
<li>  第一，巩固和发展了我国的社会主义制度。</li>
<li>  第二，为开创中国特色社会主义提供了宝贵经验、理论准备、物质基础。</li>
<li>  第三，丰富了科学社会主义的理论和实践。</li>
</ul>
<p>教训：</p>
<ul>
<li>  第一，必须把马克思主义与中国实际相结合，探索符合中国特点的社会主义建设道路。</li>
<li>  第二，必须正确认识社会主义社会的主要矛盾和根本任务，集中力量发展生产力。</li>
<li>  第三，必须从实际出发进行社会主义建设，建设规模和速度要和国力相适应，不能急于求成。</li>
<li>  第四，必须发展社会主义民主，健全社会主义法制。</li>
<li>  第五，必须坚持党的民主集中制和集体领导制度，加强执政党建设。</li>
<li>  第六，必须坚持对外开放，借鉴和吸收人类文明成果建设社会主义，不能关起门来搞建设。</li>
</ul>
<h4 id="正确认识改革开放前和改革开放后两个历史时期"><a href="#正确认识改革开放前和改革开放后两个历史时期" class="headerlink" title="正确认识改革开放前和改革开放后两个历史时期"></a>正确认识改革开放前和改革开放后两个历史时期</h4><p>改革开放前的社会主义实践探索为改革开放后的社会主义实践探索积累了经验并准备了条件。</p>
<p>改革开放后的社会主义实践探索是对前一个时期探索的坚持、改革、发展。</p>
<h3 id="第五章-邓小平理论"><a href="#第五章-邓小平理论" class="headerlink" title="第五章 邓小平理论"></a>第五章 邓小平理论</h3><h4 id="中国特色社会主义的提出"><a href="#中国特色社会主义的提出" class="headerlink" title="中国特色社会主义的提出"></a>中国特色社会主义的提出</h4><ul>
<li><p>  和平与发展成为时代主题是邓小平理论形成的时代背景</p>
</li>
<li><p>  社会主义建设的经验教训是邓小平理论形成的历史根据</p>
</li>
<li><p>  改革开放和现代化建设的实践是邓小平理论形成的现实依据</p>
</li>
</ul>
<p>时间线：</p>
<ul>
<li><p>  十一届三中全会。“中国特色社会主义”成为党的全部理论和实践的主题。</p>
</li>
<li><p>  党的十二大到十三大，伴随着我国改革开放开展，邓小平围绕着“什么是社会主义、怎样建设社会主义”这个基本理论进行思考，提出了关于社会主义的许多论断。</p>
</li>
<li><p>  党的十三大，第一次比较系统地论述了我国社会主义初级阶段理论，明确概括和全面阐发了党的“一个中心、两个基本点”的基本路线，从马克思主义哲学、政治经济学和科学社会主义等方面，第一次对中国特色社会主义理论的主要内容作了系统概括。</p>
</li>
<li><p>  十四大系统总结了改革开放以来十四年取得的巨大成就，同时指出：我们党所以能够取得这样的胜利，根本原因是中国特色社会主义。</p>
</li>
</ul>
<h4 id="社会主义的本质"><a href="#社会主义的本质" class="headerlink" title="社会主义的本质"></a>社会主义的本质</h4><p>社会主义本质是<strong>解放生产力，发展生产力，消灭剥削，消除两极分化，最终达到共同富裕。</strong></p>
<h4 id="邓小平理论的精髓"><a href="#邓小平理论的精髓" class="headerlink" title="邓小平理论的精髓"></a>邓小平理论的精髓</h4><p><strong>解放思想、实事求是</strong>的思想路线，是邓小平理论的活的灵魂，是邓小平理论的精髓。（南方谈话）</p>
<h4 id="党的基本路线"><a href="#党的基本路线" class="headerlink" title="党的基本路线"></a>党的基本路线</h4><p>党的十三大报告提出了党在社会主义<strong>初级阶段的基本路线</strong>：<strong>领导和团结全国各族人民，以经济建设为中心，坚持四项基本原则，坚持改革开放，自力更生，艰苦创业，为把我国建设成为富强、民主、文明的社会主义现代化国家而奋斗</strong>。</p>
<ul>
<li><p>  第一，建设“富强民主文明的社会主义现代化国家”。“富强”主要是经济领域的目标和要求，“民主”主要是政治领域的目标和要求，“文明”主要是思想文化领域的目标和要求。</p>
</li>
<li><p>第二，“<strong>一个中心、两个基本点</strong>”。这是基本路线最<strong>主要的内容</strong>，是实现社会主义现代化奋斗目标的<strong>基本途径</strong>。</p>
<ul>
<li><p>  “<strong>以经济建设为中心</strong>”回答了社会主义的根本任务问题，体现了发展生产力的本质要求；</p>
</li>
<li><p>  “<strong>坚持四项基本原则</strong>”，回答了解放和发展生产力的政治保证问题，体现了社会主义基本制度的要求；</p>
</li>
<li><p>  “<strong>坚持改革开放</strong>”，回答了社会主义的发展动力和外部条件问题，体现了解放生产力的本质要求。</p>
</li>
</ul>
</li>
<li><p>  第三，“<strong>领导和团结全国各族人民</strong>”。这是实现社会主义现代化奋斗目标的<strong>领导力量和依靠力量</strong>。</p>
</li>
<li><p>  第四，“<strong>自力更生，艰苦创业</strong>”。这是我们党的优良传统，也是实现社会主义初级阶段奋斗目标的<strong>根本立足点</strong>。</p>
</li>
</ul>
<h4 id="社会主义的根本任务"><a href="#社会主义的根本任务" class="headerlink" title="社会主义的根本任务"></a>社会主义的根本任务</h4><p><strong>生产力</strong>是社会发展的最根本的决定性因素，社会主义的<strong>根本任务</strong>是<strong>发展生产力</strong>。</p>
<h4 id="改革是中国的第二次革命"><a href="#改革是中国的第二次革命" class="headerlink" title="改革是中国的第二次革命"></a>改革是中国的第二次革命</h4><p>改革是中国的第二次革命。</p>
<ul>
<li>  中国共产党领导的第一次革命，把一个半殖民地半封建的旧中国变成了一个社会主义新中国；</li>
<li>  中国共产党领导的第二次革命，将把—个经济文化比较落后的社会主义中国变成一个现代化的社会主义国家。</li>
</ul>
<p>改革的评价标准</p>
<ul>
<li>  要以是否有利于发展社会主义社会的生产力，</li>
<li>  是否有利于增强社会主义国家的综合国力，</li>
<li>  是否有利于提高人民的生活水平为标准。</li>
</ul>
<h4 id="中国特色社会主义理论体系的开篇之作"><a href="#中国特色社会主义理论体系的开篇之作" class="headerlink" title="中国特色社会主义理论体系的开篇之作"></a>中国特色社会主义理论体系的开篇之作</h4><p>邓小平理论的历史地位：</p>
<ul>
<li><p>  马克思列宁主义、毛泽东思想的继承和发展</p>
</li>
<li><p>  中国特色社会主义理论体系的<strong>开篇之作</strong></p>
</li>
<li><p>  改革开放和社会主义现代化建设的科学指南</p>
</li>
</ul>
<h4 id="一国两制"><a href="#一国两制" class="headerlink" title="一国两制"></a>一国两制</h4><p>提出从台湾问题开始的。</p>
<p>首先运用于解决香港问题、澳门问题。</p>
<h3 id="第六章-“三个代表”重要思想"><a href="#第六章-“三个代表”重要思想" class="headerlink" title="第六章 “三个代表”重要思想"></a>第六章 “三个代表”重要思想</h3><h4 id="“三个代表”重要思想的核心观点"><a href="#“三个代表”重要思想的核心观点" class="headerlink" title="“三个代表”重要思想的核心观点"></a>“三个代表”重要思想的核心观点</h4><p>中国共产党必须始终<strong>代表中国先进生产力的发展要求</strong>，<strong>代表中国先进文化的前进方向</strong>，<strong>代表中国最广大人民的根本利益</strong>。</p>
<p>主要内容：</p>
<ul>
<li>  发展是党执政兴国的第一要务</li>
<li>  建立社会主义市场经济体制</li>
<li>  全面建设小康社会</li>
<li>  建设社会主义政治文明</li>
<li>  推进党的建设新的伟大工程</li>
</ul>
<h4 id="社会主义基本经济制度"><a href="#社会主义基本经济制度" class="headerlink" title="社会主义基本经济制度"></a>社会主义基本经济制度</h4><p><strong>公有制为主体、多种所有制经济共同发展</strong>是社会主义<strong>基本经济制度</strong>。</p>
<ul>
<li>  必须毫不动摇地巩固和发展公有制经济。必须毫不动摇地鼓励、支持和引导非公有制经济发展。个体、私营等各种形式的非公有制经济是社会主义市场经济的重要组成部分，对充分调动社会各方面的积极性、加快生产力发展具有重要作用。</li>
</ul>
<p><strong>发挥市场机制的作用和国家宏观调控</strong>，是社会主义市场经济体制的<strong>内在要求</strong>。</p>
<p>理顺分配关系，调整和规范国家、企业和个人的分配关系。完善按劳分配为主体、多种分配方式并存的分配制度。</p>
<h3 id="第七章-科学发展观"><a href="#第七章-科学发展观" class="headerlink" title="第七章 科学发展观"></a>第七章 科学发展观</h3><h4 id="科学发展观的科学内涵和实质"><a href="#科学发展观的科学内涵和实质" class="headerlink" title="科学发展观的科学内涵和实质"></a>科学发展观的科学内涵和实质</h4><ul>
<li><p>  <strong>推动经济社会发展 - 第一要义</strong></p>
</li>
<li><p>  <strong>以人为本 - 核心立场</strong></p>
</li>
<li><p>  <strong>全面协调可持续 - 基本要求</strong></p>
</li>
<li><p>  <strong>统筹兼顾 - 根本方法</strong></p>
</li>
</ul>
<p><strong>精神实质</strong>是<strong>解放思想、实事求是、与时俱进、求真务实</strong>。</p>
<h4 id="构建社会主义和谐社会的总要求"><a href="#构建社会主义和谐社会的总要求" class="headerlink" title="构建社会主义和谐社会的总要求"></a>构建社会主义和谐社会的总要求</h4><p><strong>民主法治、公平正义、诚信友爱、充满活力、安定有序、人与自然和谐相处</strong>，是构建社会主义和谐社会的<strong>总要求</strong>。</p>
<ul>
<li><p>  民主法治，就是社会主义民主得到充分发扬，依法治国基本方略得到切实落实，各方面积极因素得到广泛调动；</p>
</li>
<li><p>  公平正义，就是社会各方面的利益关系得到妥善协调，人民内部矛盾和其他社会矛盾得到正确处理，社会公平和正义得到切实维护和实现；</p>
</li>
<li><p>  诚信友爱，就是全社会互帮互助、诚实守信，全体人民平等友爱、融洽相处；充满活力，就是能够使一切有利于社会进步的创造愿望得到尊重，创造活动得到支持，创造才能得到发挥，创造成果得到肯定；</p>
</li>
<li><p>  安定有序，就是社会组织机制健全，社会管理完善，社会秩序良好，人民群众安居乐业，社会保持安定团结；</p>
</li>
<li><p>  人与自然和谐相处，就是生产发展，生活富裕，生态良好。</p>
</li>
</ul>
<h3 id="第八章-习近平新时代中国特色社会主义思想及其历史地位"><a href="#第八章-习近平新时代中国特色社会主义思想及其历史地位" class="headerlink" title="第八章 习近平新时代中国特色社会主义思想及其历史地位"></a>第八章 习近平新时代中国特色社会主义思想及其历史地位</h3><h4 id="中国特色社会主义进入新时代内涵和意义"><a href="#中国特色社会主义进入新时代内涵和意义" class="headerlink" title="中国特色社会主义进入新时代内涵和意义"></a>中国特色社会主义进入新时代内涵和意义</h4><p>内涵：</p>
<ul>
<li><p>  第一，这个新时代是承前启后、继往开来，在新的历史条件下继续夺取中国特色社会主义伟大胜利的时代。</p>
</li>
<li><p>  第二，这个新时代是决胜全面建成小康社会、进而全面建设社会主义现代化强国的时代。</p>
</li>
<li><p>  第三，这个新时代是全国各族人民团结奋斗、不断创造美好生活、逐步实现全体人民共同富裕的时代。</p>
</li>
<li><p>  第四，这个新时代是全体中华儿女勠力同心、奋力实现中华民族伟大复兴中国梦的时代。</p>
</li>
<li><p>  第五，这个新时代是我国日益走近世界舞台中央、不断为人类作出更大贡献的时代。</p>
</li>
</ul>
<p>意义：</p>
<ul>
<li><p>  第一，从中华民族复兴的历史进程看，中国特色社会主义进入新时代，意味着近代以来久经磨难的中华民族迎来了从站起来、富起来到强起来的伟大飞跃，迎来了实现中华民族伟大复兴的光明前景。</p>
</li>
<li><p>  第二，从科学社会主义发展进程看，中国特色社会主义进入新时代，意味着科学社会主义在21世纪的中国焕发出强大生机活力，在世界上高高举起了中国特色社会主义伟大旗帜。</p>
</li>
<li><p>  第三，从人类文明进程看，中国特色社会主义进入新时代，意味着中国特色社会主义道路、理论、制度、文化不断发展，拓展了发展中国家走向现代化的途径，给世界上那些既希望加快发展又希望保持自身独立性的国家和民族提供了全新选择，为解决人类问题贡献了中国智慧和中国方案。</p>
</li>
</ul>
<h4 id="社会主要矛盾的变化和两个没有变"><a href="#社会主要矛盾的变化和两个没有变" class="headerlink" title="社会主要矛盾的变化和两个没有变"></a>社会主要矛盾的变化和两个没有变</h4><p>党在八大前后，特别是毛泽东在1957年2月所作的《关于正确处理人民内部矛盾的问题》的报告，系统论述了社会主义基本矛盾。“在社会主义社会中，基本的矛盾仍然是生产关系和生产力之间的矛盾，上层建筑和经济基础之间的矛盾。</p>
<ul>
<li><p>  党的<strong>八大</strong>指出：“我们国内的主要矛盾，已经是<strong>人民对于建立先进的工业国的要求同落后的农业国的现实之间的矛盾</strong>，已经是<strong>人民对于经济文化迅速发展的需要同当前经济文化不能满足人民需要的状况之间的矛盾</strong>。”</p>
</li>
<li><p>  1981年<strong>十一届六中全会</strong>通过的《历史决议》对我国社会主要矛盾作了科学表述：“在社会主义改造基本完成以后，我国所要解决的主要矛盾，是<strong>人民日益增长的物质文化需要同落后的社会生产之间的矛盾</strong>。”</p>
</li>
<li><p>  党的<strong>十九大</strong>明确指出，我国社会主要矛盾已经转化为<strong>人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾</strong>。</p>
</li>
</ul>
<p><strong>我国仍处于并将长期处于社会主义初级阶段的基本国情</strong>没有变。</p>
<p><strong>我国是世界最大发展中国家的国际地位</strong>没有变。</p>
<h4 id="习近平新时代中国特色社会主义思想的核心要义"><a href="#习近平新时代中国特色社会主义思想的核心要义" class="headerlink" title="习近平新时代中国特色社会主义思想的核心要义"></a>习近平新时代中国特色社会主义思想的核心要义</h4><p><strong>坚持和发展中国特色社会主义</strong>，是习近平新时代中国特色社会主义思想的<strong>核心要义</strong>。党的十八大以来，我们党的全部理论和实践探索都是围绕这个主题（坚持和发展什么样的中国特色社会主义）来展开、深化和拓展的。</p>
<p>一国两制，四个全面，五位一体，八个明确，十四个坚持。</p>
<h4 id="改革开放以来我们党全部理论和实践的鲜明主题"><a href="#改革开放以来我们党全部理论和实践的鲜明主题" class="headerlink" title="改革开放以来我们党全部理论和实践的鲜明主题"></a>改革开放以来我们党全部理论和实践的鲜明主题</h4><h3 id="第九章-坚持和发展中国特色社会主义的总任务"><a href="#第九章-坚持和发展中国特色社会主义的总任务" class="headerlink" title="第九章 坚持和发展中国特色社会主义的总任务"></a>第九章 坚持和发展中国特色社会主义的总任务</h3><p>中华民族的昨天，“雄关漫道真如铁”。</p>
<p>中华民族的今天，“人间正道是沧桑”。</p>
<p>中华民族的明天，“长风破浪会有时”。</p>
<h4 id="中国梦的科学内涵和实现途径"><a href="#中国梦的科学内涵和实现途径" class="headerlink" title="中国梦的科学内涵和实现途径"></a>中国梦的科学内涵和实现途径</h4><p><strong>中国梦的本质</strong>是<strong>国家富强、民族振兴、人民幸福。</strong></p>
<ul>
<li><p>  国家富强，是指我国综合国力进一步增强。经济更加发达，科技创新在经济发展中的驱动力更加强劲，政治更加民主，文化更加繁荣，社会更加和谐，生态更加美好。</p>
</li>
<li><p>  民族振兴，就是通过自身发展与，继承创造中华民族的优秀文化以及先进的文明成果，进而使中华民族再次处于世界领先的地位。</p>
</li>
<li><p>  人民幸福，就是人民权利保障更加充分、人人得享共同发展。</p>
</li>
</ul>
<p>实现中国梦，意味着中国经济实力和综合国力、国际地位和国际影响力大大提升，意味着中华民族以更加昂扬向上、文明开放的姿态屹立于世界民族之林，意味着中国人民过上更加幸福安康的生活。</p>
<ul>
<li><p>  实现中国梦必须走中国道路，这就是中国特色社会主义道路。</p>
</li>
<li><p>  实现中国梦必须弘扬中国精神，这就是以爱国主义为核心的民族精神和以改革创新为核心的时代精神。</p>
</li>
<li><p>  实现中国梦必须凝聚中国力量，这就是全国各族人民大团结的力量。</p>
</li>
<li><p>  实现中华民族伟大复兴是海内外中华儿女的共同梦想。</p>
</li>
<li><p>  实干才能梦想成真。需要每一个人付出艰苦努力，用实干托起中国梦。</p>
</li>
<li><p>  实现中国梦任重而道远，需要锲而不舍、驰而不息的艰苦努力。</p>
</li>
<li><p>  实现中国梦需要和平，只有和平才能实现梦想。</p>
</li>
</ul>
<h4 id="实现社会主义现代化强国“两步走”战略的具体安排"><a href="#实现社会主义现代化强国“两步走”战略的具体安排" class="headerlink" title="实现社会主义现代化强国“两步走”战略的具体安排"></a>实现社会主义现代化强国“两步走”战略的具体安排</h4><ul>
<li><p>  党的十六大正式宣布人民生活总体达到小康水平，提出了全面建设小康社会的奋斗目标。</p>
</li>
<li><p>  党的十七大、十八大对全面建成小康社会提出了新的要求，作出了新的部署。这就是“两个一百年”的奋斗目标，即到建党100年时建成惠及十几亿人口的更高水平的小康社会；到新中国成立100年时基本实现现代化，建成社会主义现代化国家。</p>
</li>
<li><p>  党的十九大报告中习近平提出，我们要全面建成小康社会。</p>
</li>
</ul>
<p>全面建设社会主义现代化国家的进程分两个阶段来安排。</p>
<ul>
<li><p>  <strong>第一个阶段，从2020年到2035年，在全面建成小康社会的基础上，再奋斗15年，基本实现社会主义现代化</strong>。</p>
</li>
<li><p><strong>第二个阶段，从2035年到本世纪中叶，在基本实现现代化的基础上，再奋斗15年，把我国建成富强民主文明和谐美丽的社会主义现代化强国</strong>。</p>
<p>  第二阶段的目标要求是：</p>
<ul>
<li>  一是我国将拥有高度的物质文明，社会生产力水平大幅提高，核心竞争力名列世界前茅，经济总量和市场规模超越其他国家，建成富强的社会主义现代化强国。</li>
<li>  二是我国将拥有高度的政治文明，建成民主的社会主义现代化强国。</li>
<li>  三是我国将拥有高度的精神文明，建成文明的社会主义现代化强国。</li>
<li>  四是我国将拥有高度的社会文明，全体人民共同富裕基本实现，建成和谐的社会主义现代化强国。</li>
<li>  五是我国将拥有高度的生态文明，建成美丽的社会主义现代化强国。</li>
</ul>
</li>
</ul>
<h3 id="第十章-“五位一体”总体布局"><a href="#第十章-“五位一体”总体布局" class="headerlink" title="第十章 “五位一体”总体布局"></a>第十章 “五位一体”总体布局</h3><h4 id="新发展理念"><a href="#新发展理念" class="headerlink" title="新发展理念"></a>新发展理念</h4><p><strong>创新、协调、绿色、开放、共享</strong>的新发展理念，是<strong>经济思想的主要内容</strong>。</p>
<ul>
<li><p>  <strong>创新</strong>是引领发展的<strong>第一动力</strong>。</p>
</li>
<li><p>  <strong>协调</strong>是持续健康发展的<strong>内在要求</strong>。</p>
</li>
<li><p>  <strong>绿色</strong>是永续发展的<strong>必要条件</strong>。</p>
</li>
<li><p>  <strong>开放</strong>是国家繁荣发展的<strong>必由之路</strong>。</p>
</li>
<li><p>  <strong>共享</strong>是中国特色社会主义的<strong>本质要求</strong>。</p>
</li>
</ul>
<h4 id="建设现代化经济体系的主要任务"><a href="#建设现代化经济体系的主要任务" class="headerlink" title="建设现代化经济体系的主要任务"></a>建设现代化经济体系的主要任务</h4><ul>
<li><p>  第一，大力发展实体经济。</p>
</li>
<li><p>  第二，加快实施创新驱动发展战略。</p>
</li>
<li><p>  第三，激发各类市场主体活力。</p>
</li>
<li><p>  第四，积极推动城乡区域协调发展。</p>
</li>
<li><p>  第五，着力发展开放型经济。</p>
</li>
<li><p>  第六，加快完善社会主义市场经济体制。</p>
</li>
</ul>
<h4 id="坚持党的领导、人民当家作主、依法治国有机统一"><a href="#坚持党的领导、人民当家作主、依法治国有机统一" class="headerlink" title="坚持党的领导、人民当家作主、依法治国有机统一"></a>坚持党的领导、人民当家作主、依法治国有机统一</h4><ul>
<li><p>  <strong>党的领导</strong>是人民当家作主和依法治国的<strong>根本保证</strong>，</p>
</li>
<li><p>  <strong>人民当家作主</strong>是社会主义民主政治的<strong>本质特征</strong>，</p>
</li>
<li><p>  <strong>依法治国</strong>是党领导人民治理国家的<strong>基本方式</strong>。</p>
</li>
</ul>
<h4 id="我国的根本政治制度和基本政治制度"><a href="#我国的根本政治制度和基本政治制度" class="headerlink" title="我国的根本政治制度和基本政治制度"></a>我国的根本政治制度和基本政治制度</h4><p><strong>人民代表大会制度是我国根本政治制度</strong>。</p>
<p>协商民主是中国社会主义民主政治的特有形式和独特优势。</p>
<p>中国共产党领导的<strong>多党合作和政治协商制度</strong>，<strong>民族区域自治制度</strong>，<strong>基层群众自治制度</strong>。</p>
<h4 id="两岸关系的政治基础"><a href="#两岸关系的政治基础" class="headerlink" title="两岸关系的政治基础"></a>两岸关系的政治基础</h4><p><strong>一个中国原则</strong>是两岸关系的<strong>政治基础</strong>。</p>
<p>坚持一个中国原则和“九二共识”。一个中国原则是两岸关系的政治基础。体现的一个中国原则的“九二共识”，明确界定了两岸关系的根本性质，是确保两岸关系和平发展的关键。</p>
<p><strong>坚持“和平统一，一国两制”方针</strong>，是解决台湾问题的<strong>基本方针</strong>。是实现国家统一的最佳方式。</p>
<h4 id="社会主义核心价值观的基本内容"><a href="#社会主义核心价值观的基本内容" class="headerlink" title="社会主义核心价值观的基本内容"></a>社会主义核心价值观的基本内容</h4><p><strong>国家、公民、社会</strong>三个层面的价值要求融为一体。</p>
<p><strong>富强、民主、文明、和谐，</strong></p>
<p><strong>自由、平等、公正、法治，</strong></p>
<p><strong>爱国、敬业、诚信、友善。</strong></p>
<h4 id="保障和改善民生的措施"><a href="#保障和改善民生的措施" class="headerlink" title="保障和改善民生的措施"></a>保障和改善民生的措施</h4><p>坚决打赢脱贫攻坚战，促进社会公平正义，在幼有所育，学有所致，劳有所得，病有所医，老有所养，住有所居，弱有所扶上不断取得新进展。</p>
<ul>
<li><p>  第一，优先发展教育事业。</p>
</li>
<li><p>  第二，提高就业质量和人民收入水平。</p>
</li>
<li><p>  第三，加强社会保障体系建设。</p>
</li>
<li><p>  第四，坚决打赢脱贫攻坚战。</p>
</li>
<li><p>  第五，实施健康中国战略。</p>
</li>
</ul>
<h4 id="创新社会治理"><a href="#创新社会治理" class="headerlink" title="创新社会治理"></a>创新社会治理</h4><p>第一，创新社会治理体制。</p>
<p>第二，改进社会治理方式。</p>
<p>第三，加强预防和化解社会矛盾机制建设。</p>
<p>第四，加强社会心理服务体系建设。</p>
<p>第五，加强社区治理体系建设。</p>
<h4 id="总体国家安全观"><a href="#总体国家安全观" class="headerlink" title="总体国家安全观"></a>总体国家安全观</h4><p>总体国家安全观是指坚持国家利益至上，以人民安全为宗旨，以政治安全为根本，以经济安全为基础，以军事、文化、社会安全为保障，以促进国际安全为依托，维护各领域国家安全，构建国家安全体系，走中国特色国家安全道路。</p>
<h4 id="生态文明的核心和理念"><a href="#生态文明的核心和理念" class="headerlink" title="生态文明的核心和理念"></a>生态文明的核心和理念</h4><p><strong>生态文明的核心是坚持人与自然和谐共生。</strong></p>
<ul>
<li><p>  尊重自然，是人与自然相处时应秉持的首要态度</p>
</li>
<li><p>  顺应自然，是人与自然相处时应遵循的基本原则</p>
</li>
<li><p>  保护自然，是人与自然相处时应承担的重要责任</p>
</li>
</ul>
<h3 id="第十一章-“四个全面”战略布局"><a href="#第十一章-“四个全面”战略布局" class="headerlink" title="第十一章 “四个全面”战略布局"></a>第十一章 “四个全面”战略布局</h3><h4 id="全面建成小康社会的奋斗目标"><a href="#全面建成小康社会的奋斗目标" class="headerlink" title="全面建成小康社会的奋斗目标"></a>全面建成小康社会的奋斗目标</h4><p>全面小康有更高的标准、更丰富的内涵、更全面的要求，即经济更加发展、民主更加健全、科教更加进步、文化更加繁荣、社会更加和谐、人民生活更加殷实。</p>
<p>“小康”讲的是发展水平，“全面”讲的是发展的平衡性、协调性、可持续性。</p>
<p>全面建成小康社会，要实事求是、因地制宜。</p>
<p>目标：经济保持中高速增长。创新驱动成效显著。发展协调性明显增强。人民生活水平和质量普遍提高。国民素质和社会文明程度显著提高。生态环境质量总体改善。各方面制度更加成熟更加定型。</p>
<h4 id="全面深化改革的总目标"><a href="#全面深化改革的总目标" class="headerlink" title="全面深化改革的总目标"></a>全面深化改革的总目标</h4><p>完善和发展中国特色社会主义制度，推进国家治理体系和治理能力现代化，这两句话是一个整体，前一句规定了根本方向，后一句规定了实现路径。</p>
<h4 id="把握和处理好改革、发展、稳定的关系"><a href="#把握和处理好改革、发展、稳定的关系" class="headerlink" title="把握和处理好改革、发展、稳定的关系"></a>把握和处理好改革、发展、稳定的关系</h4><p><strong>改革</strong>是经济社会发展的<strong>强大动力</strong>，<strong>发展</strong>是解决一切经济社会问题的<strong>关键</strong>，<strong>稳定</strong>是改革发展的<strong>前提</strong>。</p>
<p>坚持把改革的力度、发展的速度和社会可承受的程度统一起来，把改善人民生活作为正确处理改革发展稳定关系的结合点，在保持社会稳定中推进改革发展，通过改革发展促进社会稳定。</p>
<h4 id="全面依法治国总目标"><a href="#全面依法治国总目标" class="headerlink" title="全面依法治国总目标"></a>全面依法治国总目标</h4><p><strong>总目标是建设中国特色社会主义法治体系，建设社会主义法治国家。</strong></p>
<h4 id="党面临的考验和危险"><a href="#党面临的考验和危险" class="headerlink" title="党面临的考验和危险"></a>党面临的考验和危险</h4><p>党面临的<strong>执政考验、改革开放考验、市场经济考验、外部环境考验</strong>具有长期性和复杂性。</p>
<p>党面临的<strong>精神懈怠危险、能力不足危险、脱离群众危险、消极腐败危险</strong>具有尖锐性和严峻性。</p>
<h3 id="第十三章-中国特色大国外交"><a href="#第十三章-中国特色大国外交" class="headerlink" title="第十三章 中国特色大国外交"></a>第十三章 中国特色大国外交</h3><h4 id="中国的核心利益"><a href="#中国的核心利益" class="headerlink" title="中国的核心利益"></a>中国的核心利益</h4><p>中国始终把坚决维护国家主权、安全、发展利益作为外交工作的基本出发点和落脚点，稳妥应对涉我领土主权和海洋权益争端，坚决维护国家的领土主权。</p>
<h4 id="中国走和平发展道路的自信和自觉"><a href="#中国走和平发展道路的自信和自觉" class="headerlink" title="中国走和平发展道路的自信和自觉"></a>中国走和平发展道路的自信和自觉</h4><p>中国走和平发展道路的自信和自觉，来源于中华文明的深厚渊源，来源于对实现中国发展目标条件的认知，来源于对世界发展大势的把握。</p>
<p>走和平发展道路，对中国有利，对亚洲有利，对世界也有利。中国坚持走和平发展道路，既积极争取和平的国际环境发展自己，又以自身发展促进世界和平；既让中国更好利用世界的机遇，又让世界更好分享中国的机遇，促进中国和世界各国良性互动、互利共赢。</p>
<h4 id="中国外交政策的宗旨"><a href="#中国外交政策的宗旨" class="headerlink" title="中国外交政策的宗旨"></a>中国外交政策的宗旨</h4><p>宗旨：<strong>维护世界和平、促进共同发展</strong>，是中国外交政策的宗旨。</p>
<p>内涵：中国独立自主的和平外交政策，就是把国家主权和安全放在第一位，坚定地维护我国的国家利益，反对任何国家损害我国的独立、主权、安全和尊严；就是从我国人民和世界人民的根本利益出发，对于一切国际事务，都要根据事情本身的是非曲直决定自己的立场和政策，秉持公道，伸张正义，不屈从于任何外来压力；就是坚持各国的事务应由本国政府和人民决定，世界上的事情应由各国政府和人民平等协商，反对一切形式的霸权主义和强权政治；就是主张和平解决国际争端和热点问题，反对动辄诉诸武力或以武力相威胁，反对颠覆别国合法政权，反对一切形式的恐怖主义。</p>
<p>和平共处五项原则。<strong>大国是关键、周边是首要、发展中国家是基础、多边是舞台的外交工作布局</strong>，建立新型国际关系。</p>
<h4 id="构建人类命运共同体思想的内涵和核心"><a href="#构建人类命运共同体思想的内涵和核心" class="headerlink" title="构建人类命运共同体思想的内涵和核心"></a>构建人类命运共同体思想的内涵和核心</h4><p>核心：建设<strong>持久和平、普遍安全、共同繁荣、开放包容、清洁美丽</strong>的世界。</p>
<ul>
<li><p>  第一，政治上，要相互尊重、平等协商，坚决摒弃冷战思维和强权政治，走对话而不对抗、结伴而不结盟的国与国交往新路。</p>
</li>
<li><p>  第二，安全上，要坚持以对话解决争端、以协商化解分歧，统筹应对传统和非传统安全威胁，反对一切形式的恐怖主义。</p>
</li>
<li><p>  第三，经济上，要同舟共济，促进贸易和投资自由化便利化，推动经济全球化朝着更加开放、包容、普惠、平衡、共赢的方向发展。</p>
</li>
<li><p>  第四，文化上，要尊重世界文明多样性，以文明交流超越文明隔阂、文明互鉴超越文明冲突、文明共存超越文明优越。</p>
</li>
<li><p>  第五，生态上，要坚持环境友好，合作应对气候变化，保护好人类赖以生存的地球家园。</p>
</li>
</ul>
<p>构建人类命运共同体思想顺应了历史潮流，回应了时代要求，凝聚了各国共识，为人类社会实现共同发展、持续繁荣、长治久安绘制了蓝图。</p>
<h3 id="第十四章-坚持和加强党的领导"><a href="#第十四章-坚持和加强党的领导" class="headerlink" title="第十四章 坚持和加强党的领导"></a>第十四章 坚持和加强党的领导</h3><h4 id="中国特色社会主义最本质的特征"><a href="#中国特色社会主义最本质的特征" class="headerlink" title="中国特色社会主义最本质的特征"></a>中国特色社会主义最本质的特征</h4><p><strong>党的领导是中国特色社会主义最本质的特征</strong>。</p>
<ul>
<li><p>  第一，这是由科学社会主义的理论逻辑所决定的。</p>
</li>
<li><p>  第二，这是由中国特色社会主义产生与发展的历史逻辑所决定的。</p>
</li>
<li><p>  第三，这是由中国特色社会主义迈向新征程的实践逻辑所决定的。</p>
</li>
</ul>
<p>十三届全国人大一次会议将其载入宪法总纲。</p>
<h4 id="中国特色社会主义制度的最大优势"><a href="#中国特色社会主义制度的最大优势" class="headerlink" title="中国特色社会主义制度的最大优势"></a>中国特色社会主义制度的最大优势</h4><p><strong>党的领导是中国特色社会主义制度的最大优势</strong>。</p>
<ul>
<li><p>  第一，党是中国特色社会主义制度的创建者。</p>
</li>
<li><p>  第二，党的领导是充分发挥中国特色社会主义制度优势的根本保障。</p>
</li>
<li><p>  第三，党的自身优势是中国特色社会主义制度优势的主要来源。</p>
</li>
</ul>
<h4 id="新时代中国共产党的历史使命"><a href="#新时代中国共产党的历史使命" class="headerlink" title="新时代中国共产党的历史使命"></a>新时代中国共产党的历史使命</h4><p>新时代中国共产党的历史使命，就是<strong>统揽伟大斗争、伟大工程、伟大事业、伟大梦想，在全面建成小康社会的基础上全面建成社会主义现代化强国，实现中华民族伟大复兴。</strong></p>
<p><strong>伟大梦想</strong>是<strong>目标</strong>，指引前进方向；<strong>伟大斗争</strong>是<strong>手段</strong>，激发前进动力；<strong>伟大工程</strong>是<strong>保障</strong>，提供前进保证；<strong>伟大事业</strong>是<strong>主题</strong>，开辟前进道路。</p>
<p>其中，起<strong>决定性作用</strong>的是<strong>伟大工程</strong>的建设。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>others</tag>
      </tags>
  </entry>
  <entry>
    <title>豆瓣爬取top250</title>
    <url>/2020/10/19/dou-ban-pa-qu-top250/</url>
    <content><![CDATA[<h1 id="从一个爬虫作业说起"><a href="#从一个爬虫作业说起" class="headerlink" title="从一个爬虫作业说起"></a>从一个爬虫作业说起</h1><blockquote>
<p>看视频混个眼熟：<a href="https://www.icourse163.org/learn/BIT-1001870001#/learn/announce">https://www.icourse163.org/learn/BIT-1001870001#/learn/announce</a>     （大概两三个小时看完）</p>
</blockquote>
<h2 id="一-requests对象"><a href="#一-requests对象" class="headerlink" title="一 requests对象"></a>一 requests对象</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96top250/requests%E5%8F%82%E6%95%B0.png"></p>
<ul>
<li><p>params：字典或字节序列，作为参数增加到url中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kv=&#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">r=requests.request(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,params=kv)</span><br><span class="line">print(r.ur1)</span><br><span class="line"><span class="comment"># http://python123.io/ws?key1=value1&amp;key2=value2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>data：字典、字节序列或文件对象，作为Request的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kv=&#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">r=requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,data=kv）</span><br><span class="line">body=<span class="string">&quot;主体内容&quot;</span></span><br><span class="line">r=requests.request（<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,data=body)</span><br></pre></td></tr></table></figure>
</li>
<li><p>json: JSON格式的数据，作为Request的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">kv=&#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>&#125;</span><br><span class="line">r=requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,json=kv)</span><br></pre></td></tr></table></figure>
</li>
<li><p>headers：字典，HTTP定制头</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hd=&#123;<span class="string">&#x27;user-agent&#x27;</span>:<span class="string">&#x27;Chrome/10&#x27;</span>&#125;</span><br><span class="line">r=requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,headers=hd)</span><br></pre></td></tr></table></figure>
</li>
<li><p>cookies：字典或CookieJar，Request中的cookie </p>
</li>
<li><p>auth：元组，支持HTTP认证功能</p>
</li>
<li><p>files：字典类型，传输文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fs=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;data.x1s&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line">r=requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,files=fs)</span><br></pre></td></tr></table></figure>
</li>
<li><p>timeout：设定超时时间，秒为单位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r=requests.request(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://vwww.baidu.com&#x27;</span>,timeout=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>proxies：字典类型，设定访问代理服务器，可以增加登录认证</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pxs=&#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://user:pass@1e.10.10.1:1234&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;https://10.10.10.1:4321&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r=requests.request(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://www.baidu.com&#x27;</span>,proxies=pxs)</span><br></pre></td></tr></table></figure>
</li>
<li><p>allow_redirects:  True/False，默认为True，重定向开关</p>
</li>
<li><p>stream:  True/False，默认为True，获取内容立即下载开关</p>
</li>
<li><p>verify:  True/False，默认为True，认证SSL证书开关</p>
</li>
<li><p>cert：本地SSL证书路径</p>
</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96top250/requests%E6%96%B9%E6%B3%95.png"></p>
<p><code>requests.request(method,url,**kwargs)</code></p>
<ul>
<li><code>requests.get(url,params=None,**kwargs)</code></li>
<li><code>requests.head(url,**kwargs)</code></li>
<li><code>requests.post(url,data=None,json=None,**kwargs)</code></li>
<li><code>requests.put(url,data=None,**kwargs)</code></li>
<li><code>requests.patch(url,data=None,**kwargs)</code></li>
<li><code>requests.delete(url,**kwargs)</code></li>
</ul>
<h3 id="HTTP资源"><a href="#HTTP资源" class="headerlink" title="HTTP资源"></a>HTTP资源</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96top250/HTTP%E5%8D%8F%E8%AE%AE.png"></p>
<h3 id="返回对象"><a href="#返回对象" class="headerlink" title="返回对象"></a>返回对象</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96top250/requests%E8%BF%94%E5%9B%9E.png"></p>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96top250/requests%E5%BC%82%E5%B8%B8.png"></p>
<h2 id="二-请求头"><a href="#二-请求头" class="headerlink" title="二 请求头"></a>二 请求头</h2><p>爬虫爬取异常，返回错误码<code>503</code>，考虑修改请求头</p>
<p>常用请求头：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_agent = [</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:38.0) Gecko/20100101 Firefox/38.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; InfoPath.3; rv:11.0) like Gecko&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; en) Presto/2.8.131 Version/11.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Opera/9.80 (Windows NT 6.1; U; en) Presto/2.8.131 Version/11.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_0) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Maxthon 2.0)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; TencentTraveler 4.0)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; The World)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SE 2.X MetaSr 1.0; SE 2.X MetaSr 1.0; .NET CLR 2.0.50727; SE 2.X MetaSr 1.0)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Avant Browser)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;UCWEB7.0.2.37/28/999&quot;</span>,</span><br><span class="line">    <span class="string">&quot;NOKIA5700/ UCWEB7.0.2.37/28/999&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Openwave/ UCWEB7.0.2.37/28/999&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999&quot;</span>,</span><br><span class="line">	<span class="string">&quot;Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25&quot;</span>,</span><br><span class="line">]</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: random.choice(user_agent)&#125;</span><br><span class="line"><span class="comment"># 随机获取一个请求头</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_agent</span>():</span></span><br><span class="line">    <span class="keyword">return</span> random.choice(USER_AGENTS)</span><br></pre></td></tr></table></figure>

<p>使用<code>fake_useragent</code>模块随机生成请求头，（其实是一个从一个API获取到的）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机heard头</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="comment"># 随机生成User-Agent</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_ua</span>():</span></span><br><span class="line">    ua = UserAgent()        <span class="comment"># 创建User-Agent对象</span></span><br><span class="line">    useragent = ua.random</span><br><span class="line">    <span class="keyword">return</span> useragent</span><br><span class="line">kv = &#123;<span class="string">&quot;user-agent&quot;</span>: get_random_ua()&#125;  <span class="comment"># 将请求标识改为标准的浏览器编识，返回状态码是403的话考虑这么做</span></span><br><span class="line">r = requests.get(url, timeout=<span class="number">50</span>, headers=kv)  <span class="comment"># 发送请求并取得返回值</span></span><br></pre></td></tr></table></figure>

<h2 id="三-Cookie"><a href="#三-Cookie" class="headerlink" title="三 Cookie"></a>三 Cookie</h2><h3 id="直接将Cookie写在header头部"><a href="#直接将Cookie写在header头部" class="headerlink" title="直接将Cookie写在header头部"></a>直接将Cookie写在header头部</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">cookie = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;cisession&quot;:&quot;19dfd70a27ec0eecf1fe3fc2e48b7f91c7c83c60&quot;,</span></span><br><span class="line"><span class="string">&quot;CNZZDATA100020196&quot;:&quot;1815846425-1478580135-https%253A%252F%252Fwww.baidu.com%252F%7C1483922031&quot;,</span></span><br><span class="line"><span class="string">&quot;Hm_lvt_f805f7762a9a237a0deac37015e9f6d9&quot;:&quot;1482722012,1483926313&quot;,</span></span><br><span class="line"><span class="string">&quot;Hm_lpvt_f805f7762a9a237a0deac37015e9f6d9&quot;:&quot;1483926368&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">header = &#123;</span><br><span class="line">	<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;Cookie&#x27;</span>: cookie</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;https://kankandou.com/book/view/22353.html&#x27;</span></span><br><span class="line">wbdata = requests.get(url,headers=header).text</span><br><span class="line">soup = BeautifulSoup(wbdata,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup)</span><br></pre></td></tr></table></figure>

<h3 id="使用requests插入Cookie"><a href="#使用requests插入Cookie" class="headerlink" title="使用requests插入Cookie"></a>使用requests插入Cookie</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">cookie = &#123;</span><br><span class="line"><span class="string">&quot;cisession&quot;</span>:<span class="string">&quot;19dfd70a27ec0eecf1fe3fc2e48b7f91c7c83c60&quot;</span>,</span><br><span class="line"><span class="string">&quot;CNZZDATA100020196&quot;</span>:<span class="string">&quot;1815846425-1478580135-https%253A%252F%252Fwww.baidu.com%252F%7C1483922031&quot;</span>,</span><br><span class="line"><span class="string">&quot;Hm_lvt_f805f7762a9a237a0deac37015e9f6d9&quot;</span>:<span class="string">&quot;1482722012,1483926313&quot;</span>,</span><br><span class="line"><span class="string">&quot;Hm_lpvt_f805f7762a9a237a0deac37015e9f6d9&quot;</span>:<span class="string">&quot;1483926368&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;https://kankandou.com/book/view/22353.html&#x27;</span></span><br><span class="line">wbdata = requests.get(url,cookies=cookie).text</span><br><span class="line">soup = BeautifulSoup(wbdata,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">print(soup)</span><br></pre></td></tr></table></figure>

<h2 id="四-代理"><a href="#四-代理" class="headerlink" title="四 代理"></a>四 代理</h2><p>同一个IP访问过于频繁，可能会被ban，可以考虑挂代理IP池访问。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96top250/ip%E8%A2%ABban.png"></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>匿名度：<br> 　<strong>- 透明</strong>：知道是代理ip，也会知道你的真实ip<br> 　<strong>- 匿名</strong>：知道是代理ip，不会知道你的真实ip<br> 　<strong>- 高匿</strong>：不知道是代理ip，不会知道你的真实ip</p>
<p><strong>类型</strong>：</p>
<ul>
<li>http：只能请求http开头的url</li>
<li>https：只能请求https开头的url</li>
</ul>
<p>分类：</p>
<ul>
<li><strong>正向代理</strong>：代理客户端获取数据。正向代理是为了保护客户端防止被追究责任</li>
<li><strong>反向代理</strong>：代理服务器提供数据。反向代理是为了保护服务器或负责负载均衡</li>
</ul>
<h3 id="代理使用"><a href="#代理使用" class="headerlink" title="代理使用"></a>代理使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代理的使用</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">proxy_list = [</span><br><span class="line">     &#123;<span class="string">&quot;http&quot;</span>: <span class="string">&quot;112.115.57.20:3128&quot;</span>&#125;,        </span><br><span class="line">     &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;121.41.171.223:3128&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 随机获取代理IP</span></span><br><span class="line">proxy = random.choice(proxy_list)</span><br><span class="line"><span class="comment"># 标准请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">     <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 测试连接</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s?wd=ip&#x27;</span></span><br><span class="line"><span class="comment"># 拿到页面</span></span><br><span class="line">page_text = requests.get(url=url,headers=headers,proxies=proxy).text</span><br></pre></td></tr></table></figure>

<h3 id="免费IP池"><a href="#免费IP池" class="headerlink" title="免费IP池"></a>免费IP池</h3><p>从免费ip提供网站爬取<code>ip</code> <code> port</code> </p>
<ul>
<li>快代理免费：<a href="https://www.kuaidaili.com/free/inha/1/">https://www.kuaidaili.com/free/inha/1/</a> 已测试，无效</li>
<li>全网IP代理免费： <a href="http://www.goubanjia.com/">http://www.goubanjia.com/</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试快代理免费IP池的可用性</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetProxy</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试快代理提供的免费proxy有效性&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.url = <span class="string">&#x27;https://www.kuaidaili.com/free/inha/1/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_random_ua</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;随机生成User-Agent&quot;&quot;&quot;</span></span><br><span class="line">        ua = UserAgent()  <span class="comment"># 创建User-Agent对象</span></span><br><span class="line">        useragent = ua.random</span><br><span class="line">        <span class="keyword">return</span> useragent</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_proxy</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;快代理网站上获取随机的代理IP&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: self.get_random_ua()&#125;</span><br><span class="line">        html = requests.get(url=self.url, headers=headers, timeout=<span class="number">5</span>).content.decode(<span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        proxy = []</span><br><span class="line">        <span class="keyword">for</span> ip, port <span class="keyword">in</span> <span class="built_in">zip</span>(soup(<span class="string">&quot;td&quot;</span>, attrs=&#123;<span class="string">&quot;data-title&quot;</span>: <span class="string">&quot;IP&quot;</span>&#125;), soup(<span class="string">&quot;td&quot;</span>, attrs=&#123;<span class="string">&quot;data-title&quot;</span>: <span class="string">&quot;PORT&quot;</span>&#125;)):</span><br><span class="line">            proxy.append(ip.get_text() + <span class="string">&quot;:&quot;</span> + port.get_text())</span><br><span class="line">        print(proxy)</span><br><span class="line">        <span class="keyword">return</span> proxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_proxy</span>(<span class="params">self, proxy</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试抓取的代理IP是否可用&quot;&quot;&quot;</span></span><br><span class="line">    L = proxy.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    proxy_ip = &#123;</span><br><span class="line">        <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(L[<span class="number">0</span>], L[<span class="number">1</span>]),</span><br><span class="line">        <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;https://&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(L[<span class="number">0</span>], L[<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    test_url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(url=test_url, proxies=proxy_ip, timeout=<span class="number">8</span>)</span><br><span class="line">        <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">            print(L[<span class="number">0</span>], <span class="string">&quot;:&quot;</span>, L[<span class="number">1</span>], <span class="string">&#x27;Success&#x27;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;proxies.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(L[<span class="number">0</span>] + <span class="string">&#x27;:&#x27;</span> + L[<span class="number">1</span>] + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    	print(L[<span class="number">0</span>], L[<span class="number">1</span>], <span class="string">&#x27;Failed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">for</span> proxy <span class="keyword">in</span> self.get_proxy():</span><br><span class="line">        self.test_proxy(proxy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    spider = GetProxy()</span><br><span class="line">    spider.main()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从文件读取，并转化为可用数据</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_proxies</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;proxies.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        result = f.readlines()                  <span class="comment"># 读取所有行并返回列表</span></span><br><span class="line">        proxy_ip = random.choice(result)[:-<span class="number">1</span>]       <span class="comment"># 深拷贝获取所有代理IP，随机抽取</span></span><br><span class="line">        L = proxy_ip.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        proxy_ip = &#123;</span><br><span class="line">            <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(L[<span class="number">0</span>], L[<span class="number">1</span>]),</span><br><span class="line">            <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;https://&#123;&#125;:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(L[<span class="number">0</span>], L[<span class="number">1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proxy_ip</span><br><span class="line"><span class="comment"># 直接返回给requests.get(url=url,headers=headers,proxies=get_proxies())</span></span><br></pre></td></tr></table></figure>


<h3 id="私密代理"><a href="#私密代理" class="headerlink" title="私密代理"></a>私密代理</h3><p>常用在vpn等方面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 私密代理格式</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">	<span class="string">&#x27;协议&#x27;</span>:<span class="string">&#x27;协议://用户名:密码@IP:端口号&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://用户名:密码@IP:端口号&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;https://用户名:密码@IP:端口号&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://309435365:szayclhp@106.75.71.140:16816&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;https://309435365:szayclhp@106.75.71.140:16816&#x27;</span>,</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h2 id="五-BeatifulSoup库"><a href="#五-BeatifulSoup库" class="headerlink" title="五 BeatifulSoup库"></a>五 BeatifulSoup库</h2><blockquote>
<p><a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/">漂亮汤官方文档</a>   需要代理</p>
</blockquote>
<p>也可以直接看这个快速上手：<a href="https://www.jianshu.com/p/5c239bcd05a3">简书</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;http://python123.io/ws/demo.html&quot;</span>)</span><br><span class="line">demo = r.text</span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">解析器有：</span></span><br><span class="line"><span class="string">    bs4的html解析器：    BeautifulSoup(mk,&quot;html.parser&quot;)    [安装bs4库]</span></span><br><span class="line"><span class="string">    lxml的html解析器:    BeautifulSoup(mk,&quot;lxml&quot;)           [pip install lxml]</span></span><br><span class="line"><span class="string">    lxml的xml解析器：    BeautifulSoup(mk,&quot;xml&quot;)             [pip install lxml]</span></span><br><span class="line"><span class="string">    html5lib的解析器:   BeautifulSoup(mk,&quot;html5lib&quot;)        [pip install html5lib]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">print(soup.prettify())  <span class="comment"># 格式化</span></span><br><span class="line">print(soup.title)   <span class="comment"># 标题包括尖括号</span></span><br><span class="line">print(soup.title.string)    <span class="comment"># 标题尖括号本身链接的内容</span></span><br><span class="line">print(soup.head.contents)    <span class="comment"># [&lt;title&gt;this is a python demo page&lt;/title&gt;]</span></span><br><span class="line">print(soup.a)   <span class="comment"># 第一个a标签内容</span></span><br><span class="line">print(soup.a.name)  <span class="comment"># a标签的标签名（a）</span></span><br><span class="line">print(soup.a.parent.name)   <span class="comment"># a标签的父标签标签名</span></span><br><span class="line">print(soup.a.parent.parent.name)    <span class="comment"># 父标签可以嵌套</span></span><br><span class="line">print(soup.a.attrs, <span class="built_in">type</span>(soup.a.attrs))  </span><br><span class="line"><span class="comment"># a标签的一整个属性内容，打包成字典，不包含a标签的的string本身内容</span></span><br><span class="line">print(soup.a.attrs[<span class="string">&#x27;class&#x27;</span>])    <span class="comment"># 对a标签字典内容的键取值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">...更多内容直接看官方文档吧</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>个人常用的几个解析函数：</p>
<ul>
<li><a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/index.html?highlight=find_all">find_all()</a> </li>
<li><a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/index.html?highlight=select">select()</a></li>
<li><a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/index.html?highlight=get_text">get_text()</a></li>
<li><a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/index.html?highlight=contents">contents()</a></li>
</ul>
<h2 id="六-yaml文件读写"><a href="#六-yaml文件读写" class="headerlink" title="六 yaml文件读写"></a>六 yaml文件读写</h2><h3 id="写"><a href="#写" class="headerlink" title="写"></a>写</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件写</span></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">movies = []</span><br><span class="line">movie = &#123;</span><br><span class="line">    <span class="string">&quot;top&quot;</span>: movie_num,</span><br><span class="line">    <span class="string">&quot;titles&quot;</span>: movie_titles_list,</span><br><span class="line">    <span class="string">&quot;star&quot;</span>: movie_star,</span><br><span class="line">    <span class="string">&quot;link&quot;</span>: movie_link,</span><br><span class="line">    <span class="string">&quot;cover&quot;</span>: movie_cover,</span><br><span class="line">    <span class="string">&quot;quote&quot;</span>: movie_quote,</span><br><span class="line">    <span class="string">&quot;director&quot;</span>: movie_director,</span><br><span class="line">    <span class="string">&quot;actor&quot;</span>: movie_actor,</span><br><span class="line">    <span class="string">&quot;year&quot;</span>: movie_year,</span><br><span class="line">    <span class="string">&quot;country&quot;</span>: movie_country,</span><br><span class="line">    <span class="string">&quot;theme&quot;</span>: movie_theme,</span><br><span class="line">    <span class="string">&quot;story&quot;</span>: movie_story,</span><br><span class="line">&#125;</span><br><span class="line">movies.append(movie)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;movie.yaml&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># &quot;w&quot;只能写字符串，字典里有些键的值是数字，懒得转了，直接用wb，最后dump还是会编码为utf-8</span></span><br><span class="line">    f.write(yaml.dump(movies, encoding=<span class="string">&#x27;utf-8&#x27;</span>, allow_unicode=<span class="literal">True</span>, indent=<span class="number">4</span>))</span><br><span class="line">    <span class="comment"># data数据中有汉字时，加上：encoding=&#x27;utf-8&#x27;,allow_unicode=True</span></span><br></pre></td></tr></table></figure>

<h3 id="读"><a href="#读" class="headerlink" title="读"></a>读</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件读</span></span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> billboard <span class="keyword">import</span> get_HTML</span><br><span class="line"><span class="comment"># 从yaml读取并获取zip(cover)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;movie.yaml&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    movie_list = yaml.load(f.read(), Loader=yaml.FullLoader)</span><br><span class="line">urls = []  <span class="comment"># 从yaml文件获取图片链接地址</span></span><br><span class="line">titles = []</span><br><span class="line">top = <span class="number">0</span></span><br><span class="line"><span class="comment"># 将封面链接和标题分块打包</span></span><br><span class="line"><span class="keyword">for</span> movie <span class="keyword">in</span> movie_list:</span><br><span class="line">    urls.append(movie[<span class="string">&quot;cover&quot;</span>])</span><br><span class="line">    titles.append(movie[<span class="string">&quot;titles&quot;</span>][<span class="number">0</span>])</span><br><span class="line"><span class="comment"># [(标题,封面链接),(标题,封面链接)...]</span></span><br><span class="line"><span class="keyword">for</span> title, url <span class="keyword">in</span> <span class="built_in">zip</span>(titles, urls):</span><br><span class="line">    top += <span class="number">1</span></span><br><span class="line">    path = <span class="string">&quot;./pic/&quot;</span> + title + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">    <span class="comment"># 懒下载</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(path):</span><br><span class="line">        print(<span class="string">&quot;top&quot;</span>, top, <span class="string">&quot;:&quot;</span>, title, <span class="string">&quot;&lt;&quot;</span>, url, <span class="string">&quot;&gt;：已经下载！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(get_HTML(url, <span class="string">&quot;content&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;top&quot;</span>, top, <span class="string">&quot;:&quot;</span>, title, <span class="string">&quot;&lt;&quot;</span>, url, <span class="string">&quot;&gt;：已经下载！&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="七-请求时延"><a href="#七-请求时延" class="headerlink" title="七 请求时延"></a>七 请求时延</h2><p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96top250/%E8%AF%B7%E6%B1%82%E6%97%B6%E5%BB%B6.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模拟人手动访问网页，网站这还ban建议诅咒阿三程序员直接去世</span></span><br><span class="line"><span class="comment"># 在循环中插入</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">time.sleep(random.randint(<span class="number">4</span>,<span class="number">5</span>))  <span class="comment"># 4s-5s取随机</span></span><br></pre></td></tr></table></figure>


<h2 id="八-实例"><a href="#八-实例" class="headerlink" title="八 实例"></a>八 实例</h2><p>从豆瓣爬取TOP250电影</p>
<p><code>billboard.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_ua</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;随机生成User-Agent&quot;&quot;&quot;</span></span><br><span class="line">    ua = UserAgent()  <span class="comment"># 创建User-Agent对象</span></span><br><span class="line">    useragent = ua.random</span><br><span class="line">    print(<span class="string">&quot;useragent&quot;</span>, useragent)</span><br><span class="line">    <span class="keyword">return</span> useragent</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_HTML</span>(<span class="params">url, <span class="built_in">type</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取整个页面&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        proxies = &#123;     <span class="comment"># 没用的代理</span></span><br><span class="line">            <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;39.81.60.251:9000&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;123.55.106.158:9999&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        kv = &#123;<span class="string">&quot;user-agent&quot;</span>: get_random_ua()&#125;  <span class="comment"># 将请求标识改为标准的浏览器编识，返回状态码是403的话考虑这么做</span></span><br><span class="line">        r = requests.get(url, timeout=<span class="number">50</span>, headers=kv)  <span class="comment"># 发送请求并取得返回值</span></span><br><span class="line">        print(r.request.headers)</span><br><span class="line">        r.raise_for_status()  <span class="comment"># 如果状态码不是200，引发HTTPError异常</span></span><br><span class="line">        r.encoding = <span class="string">&#x27;utf-8&#x27;</span>  <span class="comment"># r.encoding代表头文件提示编码，r.apparent_encoding代表分析内容得出的编码</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;text&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> r.text  <span class="comment"># HTTP响应内容的字符串形式，content为二进制形式</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">type</span> == <span class="string">&quot;content&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> r.content</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        exit(<span class="string">&quot;大概是豆瓣把你禁了&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">&quot;pic&quot;</span>):  <span class="comment"># 无文件夹时创建</span></span><br><span class="line">        os.makedirs(<span class="string">&quot;pic&quot;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    movies = []</span><br><span class="line">    <span class="keyword">while</span> i &lt;= <span class="number">25</span>:  <span class="comment"># 豆瓣提供250部</span></span><br><span class="line">        url = <span class="string">f&quot;https://movie.douban.com/top250?start=<span class="subst">&#123;i&#125;</span>&amp;filter=&quot;</span></span><br><span class="line">        <span class="comment"># print(get_HTML_text(url)[:16])</span></span><br><span class="line">        soup = BeautifulSoup(get_HTML(url, <span class="string">&quot;text&quot;</span>), <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> soup.select(<span class="string">&quot;ol.grid_view &gt; li&quot;</span>):</span><br><span class="line">            print(<span class="string">&quot;------------------------------------------&quot;</span>)</span><br><span class="line">            <span class="comment"># print(li(&quot;em&quot;)[0].string) # 排名</span></span><br><span class="line">            movie_num = <span class="built_in">int</span>(li(<span class="string">&quot;em&quot;</span>)[<span class="number">0</span>].string)</span><br><span class="line">            print(<span class="string">&quot;top:&quot;</span>, movie_num)  <span class="comment"># 排名</span></span><br><span class="line">            <span class="comment"># print(li(&quot;span&quot;, class_=&quot;title&quot;)) # 标题</span></span><br><span class="line">            movie_titles = re.sub(<span class="string">r&#x27;(&lt;span class=&quot;title&quot;&gt;|&lt;/span&gt;|\xa0|\/|\[|\])&#x27;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                                  <span class="built_in">str</span>(li(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;title&quot;</span>)))</span><br><span class="line">            movie_titles_list = re.split(<span class="string">r&#x27;, &#x27;</span>, movie_titles)  <span class="comment"># 列表化标题</span></span><br><span class="line">            print(<span class="string">&quot;titles:&quot;</span>, movie_titles, movie_titles_list)  <span class="comment"># 标题</span></span><br><span class="line">            <span class="comment"># print(li(attrs=&#123;&quot;property&quot;: &quot;v:average&quot;&#125;)) # 评分</span></span><br><span class="line">            movie_star = <span class="built_in">str</span>(li(attrs=&#123;<span class="string">&quot;property&quot;</span>: <span class="string">&quot;v:average&quot;</span>&#125;))</span><br><span class="line">            movie_star = <span class="built_in">float</span>(re.findall(<span class="string">r&#x27;\d.\d&#x27;</span>, movie_star)[<span class="number">0</span>])  <span class="comment"># 评分</span></span><br><span class="line">            print(<span class="string">&quot;star:&quot;</span>, movie_star)</span><br><span class="line">            <span class="comment"># print(str(li(&quot;a&quot;)[0]))    # 链接</span></span><br><span class="line">            movie_link = <span class="built_in">str</span>(re.findall(<span class="string">r&#x27;href=&quot;.+&quot;&#x27;</span>, <span class="built_in">str</span>(li(<span class="string">&quot;a&quot;</span>)[<span class="number">0</span>])))</span><br><span class="line">            movie_link = re.sub(<span class="string">r&#x27;(href=&quot;|&quot;|\&#x27;|\[|\])&#x27;</span>, <span class="string">&quot;&quot;</span>, movie_link).strip()</span><br><span class="line">            print(<span class="string">&quot;link:&quot;</span>, movie_link)  <span class="comment"># 链接</span></span><br><span class="line">            movie_cover = <span class="built_in">str</span>(re.findall(<span class="string">r&#x27;src=&quot;.+&quot;&#x27;</span>, <span class="built_in">str</span>(li(<span class="string">&quot;a&quot;</span>)[<span class="number">0</span>])))</span><br><span class="line">            movie_cover = re.sub(<span class="string">r&#x27;(src=&quot;|&quot;|\&#x27;|\[|\]|width.+|\xa0)&#x27;</span>, <span class="string">&quot;&quot;</span>, movie_cover).strip()</span><br><span class="line">            print(<span class="string">&quot;cover:&quot;</span>, movie_cover)  <span class="comment"># 封面链接</span></span><br><span class="line">            <span class="comment"># 频繁访问页面，防止ip被ban，设置时延  采用ip池可以关闭此项</span></span><br><span class="line">            time.sleep(random.randint(<span class="number">4</span>, <span class="number">6</span>))</span><br><span class="line">            soup_detail = BeautifulSoup(get_HTML(movie_link, <span class="string">&quot;text&quot;</span>), <span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># 前往片子的详细地址爬取电影大纲</span></span><br><span class="line">            movie_story = <span class="built_in">str</span>(soup_detail.find_all(attrs=&#123;<span class="string">&quot;property&quot;</span>: <span class="string">&quot;v:summary&quot;</span>&#125;))</span><br><span class="line">            movie_story = re.sub(<span class="string">r&#x27;(&lt;span| class=&quot;&quot;| property=&quot;v:summary&quot;&gt;)|&lt;br/&gt;|&lt;/span&gt;|\[|\]|  *|\n&#x27;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                                 movie_story)</span><br><span class="line">            movie_story = re.sub(<span class="string">r&#x27;　　&#x27;</span>, <span class="string">&#x27;\n\t&#x27;</span>, movie_story)  <span class="comment"># 排一下段落</span></span><br><span class="line">            print(<span class="string">&quot;story:&quot;</span>, movie_story)  <span class="comment"># 大纲</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># print(li(&quot;p&quot;))  # 介绍</span></span><br><span class="line">                movie_quote = <span class="built_in">str</span>(li(<span class="string">&quot;p&quot;</span>)[<span class="number">1</span>])  <span class="comment"># 谏言</span></span><br><span class="line">                movie_quote = re.sub(<span class="string">r&#x27;(&lt;p class=&quot;quote&quot;&gt;|\n|&lt;span class=&quot;inq&quot;&gt;|&lt;/span&gt;|&lt;/p&gt;)&#x27;</span>, <span class="string">&quot;&quot;</span>, movie_quote)</span><br><span class="line">                print(<span class="string">&quot;quote:&quot;</span>, movie_quote)  <span class="comment"># 谏言</span></span><br><span class="line">                movie_intro = <span class="built_in">str</span>(li(<span class="string">&quot;p&quot;</span>)[<span class="number">0</span>])  <span class="comment"># 介绍</span></span><br><span class="line">                movie_intro = re.sub(<span class="string">r&#x27;(&lt;p class=&quot;&quot;&gt;|\n|&lt;br/&gt;|&lt;/p&gt;)&#x27;</span>, <span class="string">&quot;&quot;</span>, movie_intro)</span><br><span class="line">                movie_intro = re.split(<span class="string">r&#x27; &#123;28&#125;&#x27;</span>, movie_intro)</span><br><span class="line">                movie_intro.remove(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="comment"># print(movie_intro) # 介绍</span></span><br><span class="line">                movie_director, movie_actor = re.split(<span class="string">r&#x27;\xa0+&#x27;</span>, movie_intro[<span class="number">0</span>])[<span class="number">0</span>], re.split(<span class="string">r&#x27;\xa0+&#x27;</span>, movie_intro[<span class="number">0</span>])[<span class="number">1</span>]</span><br><span class="line">                movie_year, movie_country, movie_theme = movie_intro[<span class="number">1</span>].split(<span class="string">&quot;\xa0/\xa0&quot;</span>)</span><br><span class="line">                movie_year = <span class="built_in">int</span>(movie_year)</span><br><span class="line">                movie_country_list = movie_country.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">                movie_theme = re.sub(<span class="string">r&#x27;  +&#x27;</span>, <span class="string">&#x27;&#x27;</span>, movie_theme)</span><br><span class="line">                movie_theme_list = movie_theme.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">                print(<span class="string">&quot;director：&quot;</span>, movie_director)  <span class="comment"># 导演</span></span><br><span class="line">                print(<span class="string">&quot;actor：&quot;</span>, movie_actor)  <span class="comment"># 主演</span></span><br><span class="line">                print(<span class="string">&quot;year：&quot;</span>, movie_year)  <span class="comment"># 年份</span></span><br><span class="line">                print(<span class="string">&quot;country：&quot;</span>, movie_country, movie_country_list)  <span class="comment"># 国家</span></span><br><span class="line">                print(<span class="string">&quot;theme：&quot;</span>, movie_theme, movie_theme_list)  <span class="comment"># 题材</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                print(<span class="string">&quot;此片子爬不到！！&quot;</span>)</span><br><span class="line">                movie_quote = <span class="string">&quot;未爬取&quot;</span></span><br><span class="line">                movie_director = <span class="string">&quot;未爬取&quot;</span></span><br><span class="line">                movie_actor = <span class="string">&quot;未爬取&quot;</span></span><br><span class="line">                movie_year = <span class="string">&quot;未爬取&quot;</span></span><br><span class="line">                movie_country_list = <span class="string">&quot;未爬取&quot;</span></span><br><span class="line">                movie_theme_list = <span class="string">&quot;未爬取&quot;</span></span><br><span class="line">            movie = &#123;</span><br><span class="line">                <span class="string">&quot;top&quot;</span>: movie_num,</span><br><span class="line">                <span class="string">&quot;titles&quot;</span>: movie_titles_list,</span><br><span class="line">                <span class="string">&quot;star&quot;</span>: movie_star,</span><br><span class="line">                <span class="string">&quot;link&quot;</span>: movie_link,</span><br><span class="line">                <span class="string">&quot;cover&quot;</span>: movie_cover,</span><br><span class="line">                <span class="string">&quot;quote&quot;</span>: movie_quote,</span><br><span class="line">                <span class="string">&quot;director&quot;</span>: movie_director,</span><br><span class="line">                <span class="string">&quot;actor&quot;</span>: movie_actor,</span><br><span class="line">                <span class="string">&quot;year&quot;</span>: movie_year,</span><br><span class="line">                <span class="string">&quot;country&quot;</span>: movie_country_list,</span><br><span class="line">                <span class="string">&quot;theme&quot;</span>: movie_theme_list,</span><br><span class="line">                <span class="string">&quot;story&quot;</span>: movie_story,</span><br><span class="line">            &#125;</span><br><span class="line">            movies.append(movie)</span><br><span class="line">        i += <span class="number">25</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;movie.yaml&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># data数据中有汉字时，加上：encoding=&#x27;utf-8&#x27;,allow_unicode=True</span></span><br><span class="line">        f.write(yaml.dump(movies, encoding=<span class="string">&#x27;utf-8&#x27;</span>, allow_unicode=<span class="literal">True</span>, indent=<span class="number">4</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>billboard.py</code>运行结果：</p>
<p><code>movie.yaml</code></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96top250/yaml%E6%96%87%E4%BB%B6.png"></p>
<p>从<code>movie.yaml</code>读取信息并运行<code>billboard_cover.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> billboard <span class="keyword">import</span> get_HTML</span><br><span class="line"><span class="comment"># 从yaml读取并获取zip(cover)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;movie.yaml&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    movie_list = yaml.load(f.read(), Loader=yaml.FullLoader)</span><br><span class="line">urls = []  <span class="comment"># 从yaml文件获取图片链接地址</span></span><br><span class="line">titles = []</span><br><span class="line">top = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> movie <span class="keyword">in</span> movie_list:</span><br><span class="line">    urls.append(movie[<span class="string">&quot;cover&quot;</span>])</span><br><span class="line">    titles.append(movie[<span class="string">&quot;titles&quot;</span>][<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> title, url <span class="keyword">in</span> <span class="built_in">zip</span>(titles, urls):</span><br><span class="line">    top += <span class="number">1</span></span><br><span class="line">    path = <span class="string">&quot;./pic/&quot;</span> + title + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(path):</span><br><span class="line">        print(<span class="string">&quot;top&quot;</span>, top, <span class="string">&quot;:&quot;</span>, title, <span class="string">&quot;&lt;&quot;</span>, url, <span class="string">&quot;&gt;：已经下载！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(get_HTML(url, <span class="string">&quot;content&quot;</span>))</span><br><span class="line">        print(<span class="string">&quot;top&quot;</span>, top, <span class="string">&quot;:&quot;</span>, title, <span class="string">&quot;&lt;&quot;</span>, url, <span class="string">&quot;&gt;：已经下载！&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>billboard_cover.py</code></p>
<p>运行结果：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96top250/pic.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>常用浏览器请求头:    <a href="https://pengshiyu.blog.csdn.net/article/details/80182397">https://pengshiyu.blog.csdn.net/article/details/80182397</a></p>
<p>代理:    <a href="https://www.jianshu.com/p/5958b0cb3de2">https://www.jianshu.com/p/5958b0cb3de2</a></p>
<p>代理服务:</p>
<ul>
<li><p>穷逼看这里：（测了一下快代理的免费名单，炸了，大概可能是我的姿势不对吧）</p>
<p>快代理：<a href="https://www.kuaidaili.com/free/inha/1/">https://www.kuaidaili.com/free/inha/1/</a></p>
<p>全国代理ip：<a href="http://www.goubanjia.com/">http://www.goubanjia.com/</a></p>
</li>
<li><p>石油佬：</p>
<p>讯代理：<a href="http://www.xdaili.cn/">http://www.xdaili.cn/</a></p>
<p>蜻蜓代理：<a href="https://proxy.horocn.com/">https://proxy.horocn.com/</a></p>
</li>
</ul>
<p>爬虫使用cookie:    <a href="https://blog.csdn.net/weixin_38706928/article/details/80376572">https://blog.csdn.net/weixin_38706928/article/details/80376572</a></p>
<p>yaml文件读写:    <a href="https://blog.csdn.net/lmj19851117/article/details/78843486">https://blog.csdn.net/lmj19851117/article/details/78843486</a></p>
<p>漂亮汤官方文档：  <a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/">https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/</a></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96top250/%E6%AD%A3%E5%88%99%E5%B8%B8%E7%94%A81.png"></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/%E8%B1%86%E7%93%A3%E7%88%AC%E5%8F%96top250/%E6%AD%A3%E5%88%99%E5%B8%B8%E7%94%A82.png"></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>C#程序设计教程-语法速览</title>
    <url>/2021/03/04/c-cheng-xu-she-ji-jiao-cheng-yu-fa-su-lan/</url>
    <content><![CDATA[<h1 id="C-程序设计教程-语法速览"><a href="#C-程序设计教程-语法速览" class="headerlink" title="C#程序设计教程-语法速览"></a>C#程序设计教程-语法速览</h1><blockquote>
<p><a href="http://www.tup.tsinghua.edu.cn/bookscenter/book_07841001.html">《C#程序设计教程-第二版-蒙祖强-清华大学出版社》</a><br><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/tour-of-csharp/">C# 介绍 - C# 指南 | Microsoft Docs</a></p>
</blockquote>
<p>学校定的C#教程，从零开始那种。<br>从开始到P130是基础部分，P130-P250是GUI部分，P250往后是高级特性和程序设计应用。<br>基础部分比较像C++和Java的杂交语法，可以光速看完。<br>然后把其中一些特性或者生疏点在此摘记一下。</p>
<h2 id="P31-2-5-2-枚举类型"><a href="#P31-2-5-2-枚举类型" class="headerlink" title="P31 : 2.5.2-枚举类型"></a>P31 : 2.5.2-枚举类型</h2><p>定义</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> weekdays &#123;Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday&#125;</span><br><span class="line">weekdays day;</span><br><span class="line">day = weekdays.Sunday;</span><br></pre></td></tr></table></figure>

<p>枚举类型在定义时按照从左到右的顺序依次给枚举元素分配了整数值：0, 1, 2, … 。利用这些值，可以灵活访问枚举类型变量。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">String[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    weekdays day;</span><br><span class="line">    day = weekdays.Sunday;        <span class="comment">//Output      //index notes</span></span><br><span class="line">    Console.WriteLine(day);       <span class="comment">// Sunday     //0</span></span><br><span class="line">    day++;Console.WriteLine(day); <span class="comment">// Monday     //1</span></span><br><span class="line">    day++;Console.WriteLine(day); <span class="comment">// Tuesday    //2</span></span><br><span class="line">    day++;Console.WriteLine(day); <span class="comment">// Wednesday  //3</span></span><br><span class="line">    day++;Console.WriteLine(day); <span class="comment">// Thursday   //4</span></span><br><span class="line">    day++;Console.WriteLine(day); <span class="comment">// Friday     //5</span></span><br><span class="line">    day++;Console.WriteLine(day); <span class="comment">// Saturday   //6</span></span><br><span class="line">    day++;Console.WriteLine(day); <span class="comment">// 7</span></span><br><span class="line">	Console.ReadKey();</span><br></pre></td></tr></table></figure>

<h2 id="P34-2-6-3-多维数组"><a href="#P34-2-6-3-多维数组" class="headerlink" title="P34 : 2.6.3-多维数组"></a>P34 : 2.6.3-多维数组</h2><p>定义</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> [ , ] a;</span><br><span class="line">a = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">int</span> [ , ] a = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<p>定义时赋值</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> [ , ] a = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>,<span class="number">3</span>]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"><span class="comment">// 4 5 6</span></span><br><span class="line"><span class="comment">// a.Length=6</span></span><br></pre></td></tr></table></figure>

<h2 id="P52-3-6-2-foreach遍历哈希表、枚举"><a href="#P52-3-6-2-foreach遍历哈希表、枚举" class="headerlink" title="P52 : 3.6.2-foreach遍历哈希表、枚举"></a>P52 : 3.6.2-foreach遍历哈希表、枚举</h2><p>foreach特性和Java、Python3的foreach(int a : a[])、for i in range一致</p>
<ul>
<li>遍历数组</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;；</span><br><span class="line"><span class="keyword">foreach</span>(<span class="built_in">int</span> i <span class="keyword">in</span> a)&#123;</span><br><span class="line">    Console.WriteLine(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>遍历哈希表</li>
</ul>
<p>Hashtable是命名空间System.Collections中的一个容器，它类似于Python中的字典。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">foreachExam</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Hashtable ht = <span class="keyword">new</span> Hashtable();</span><br><span class="line">            ht.Add(<span class="number">201001</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            ht.Add(<span class="number">201002</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">            ht.Add(<span class="number">201003</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">            ht.Add(<span class="number">201004</span>, <span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;学号为奇数的学生：&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;---------------&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;学号       姓名&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="built_in">int</span> stuid <span class="keyword">in</span> ht.Keys)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((stuid + <span class="number">1</span>) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                    Console.WriteLine(stuid+<span class="string">&quot;      &quot;</span>+ht[stuid]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>遍历枚举</li>
</ul>
<p>typeof()获取类型的System.Type对象，Enum.GetValues()用于获取指定枚举类型的枚举值。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">foreachEnum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">enum</span> weeddays &#123; Sundays,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">foreach</span>(weeddays item <span class="keyword">in</span> Enum.GetValues(<span class="keyword">typeof</span>(weeddays)))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="P62-4-1-1-运算符重载"><a href="#P62-4-1-1-运算符重载" class="headerlink" title="P62 : 4.1.1-运算符重载"></a>P62 : 4.1.1-运算符重载</h2><p>从C++那里学过来的运算符重载。</p>
<p>对象是引用传参。所以最后return new出来的对象。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">InmaginaryNumber</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Complex</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">double</span> Rp, Ip;<span class="comment">//实部和虚部</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getRp</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> Rp; &#125;<span class="comment">//get实部</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">getIp</span>(<span class="params"></span>)</span> &#123; <span class="keyword">return</span> Ip; &#125;<span class="comment">//get虚部</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Complex</span>(<span class="params"></span>)</span> &#123; Rp = Ip = <span class="number">0</span>; &#125;<span class="comment">//默认构造</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Complex</span>(<span class="params"><span class="built_in">double</span> Rp, <span class="built_in">double</span> Ip</span>)<span class="comment">//带参构造</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Rp = Rp;</span><br><span class="line">            <span class="keyword">this</span>.Ip = Ip;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Complex <span class="keyword">operator</span> +(Complex c1, Complex c2)<span class="comment">//二元+重载符</span></span><br><span class="line">        &#123;</span><br><span class="line">            Complex c = <span class="keyword">new</span> Complex(c1.Rp + c2.Rp, c1.Ip + c2.Ip);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Complex <span class="keyword">operator</span> -(Complex c1, Complex c2)<span class="comment">//二元-重载符</span></span><br><span class="line">        &#123;</span><br><span class="line">            Complex c = <span class="keyword">new</span> Complex(c1.Rp - c2.Rp, c1.Ip - c2.Ip);</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Complex <span class="keyword">operator</span> -(Complex c)<span class="comment">//一元-负号重载</span></span><br><span class="line">        &#123;</span><br><span class="line">            Complex c2 = <span class="keyword">new</span> Complex(-c.Rp, -c.Ip);</span><br><span class="line">            <span class="keyword">return</span> c2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">implicit</span> <span class="keyword">operator</span> <span class="title">Complex</span>(<span class="params"><span class="built_in">string</span> s</span>) <span class="comment">//隐式string-&gt;Complex</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//trim是清空前后空格，trimEnd从末尾删除i，直到遇到不为i的就结束</span></span><br><span class="line">            s = s.Trim().TrimEnd(<span class="string">&#x27;i&#x27;</span>);<span class="comment">//&#x27;i&#x27;截断</span></span><br><span class="line">            s = s.Trim().TrimEnd(<span class="string">&#x27;*&#x27;</span>);<span class="comment">//&#x27;*&#x27;截断</span></span><br><span class="line">            <span class="built_in">string</span>[] digits = s.Split(<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>);<span class="comment">//以&#x27;+&#x27;或者&#x27;-&#x27;划分字符</span></span><br><span class="line">            Complex c;</span><br><span class="line">            <span class="comment">//余下的string显转double,带参构造</span></span><br><span class="line">            c = <span class="keyword">new</span> Complex(Convert.ToDouble(digits[<span class="number">0</span>]), Convert.ToDouble(digits[<span class="number">1</span>]));</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">putIN</span>(<span class="params"></span>) <span class="comment">//类属性打包成string输出</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            String output = Convert.ToString(Rp) + <span class="string">&quot;+&quot;</span> + Convert.ToString(Ip) + <span class="string">&quot;*i&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> output;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Complex c1 = <span class="keyword">new</span> Complex();</span><br><span class="line">            Complex c2 = <span class="keyword">new</span> Complex(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;c1=&quot;</span>+c1.putIN());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;c2=&quot;</span>+c2.putIN());</span><br><span class="line">            Complex c3 = <span class="string">&quot;100+200*i&quot;</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;c3=&quot;</span>+c3.putIN());</span><br><span class="line">            Complex c4 = c2 - c1 + (-c3);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;c4=&quot;</span>+c4.putIN());</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="P71-4-2-3-类的构造和析构"><a href="#P71-4-2-3-类的构造和析构" class="headerlink" title="P71 : 4.2.3-类的构造和析构"></a>P71 : 4.2.3-类的构造和析构</h2><p>C#有垃圾回收了！！！<del>C++学着点。</del>非必要可不写析构。<br>另外，C#默认类成员属性私有。<br>C#没有指针，这里使用类创建单向链表。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">linkUsingClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">link_node</span> <span class="comment">//链表节</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> data;   <span class="comment">//数据</span></span><br><span class="line">        <span class="keyword">public</span> link_node next;  <span class="comment">//链结</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">link_node</span>(<span class="params"><span class="built_in">int</span> data</span>)</span> &#123; <span class="keyword">this</span>.data = data; &#125; <span class="comment">//带数据构造链表节</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            link_node head, point, point_bak;</span><br><span class="line">            point = <span class="keyword">new</span> link_node(<span class="number">1</span>);head = point;</span><br><span class="line">            point_bak = point; point = <span class="keyword">new</span> link_node(<span class="number">2</span>); point_bak.next = point;</span><br><span class="line">            point_bak = point; point = <span class="keyword">new</span> link_node(<span class="number">3</span>); point_bak.next = point;</span><br><span class="line">            point_bak = point; point = <span class="keyword">new</span> link_node(<span class="number">4</span>); point_bak.next = point;</span><br><span class="line">            point_bak = point; point = <span class="keyword">new</span> link_node(<span class="number">5</span>); point_bak.next = point;</span><br><span class="line">            point_bak = point;</span><br><span class="line">            point = head;<span class="comment">//指针指回头指针</span></span><br><span class="line">            <span class="keyword">while</span> (point != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(point.data);</span><br><span class="line">                point = point.next;</span><br><span class="line">            &#125;</span><br><span class="line">            point = head;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1,2,3,4,5</span></span><br></pre></td></tr></table></figure>

<h2 id="P72-4-2-4-类的属性"><a href="#P72-4-2-4-类的属性" class="headerlink" title="P72 : 4.2.4-类的属性"></a>P72 : 4.2.4-类的属性</h2><p>类的属性定义类似于javabean，是对成员变量的一种拓展。<br>javabean的作用:</p>
<p>1、所有属性为private<br>2、提供默认构造方法<br>3、提供getter和setter<br>4、实现serializable接口，用于对象的序列化和反序列化</p>
<p>我能看到最直接的作用是控制变量的读写权限。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">X</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> x,y,z;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">X</span>(<span class="params"></span>)</span> &#123; x = <span class="number">1</span>;y = <span class="number">2</span>;z = <span class="number">3</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> atx <span class="comment">//可读写</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; x = <span class="keyword">value</span>; &#125;<span class="comment">//value是一种特殊的变量，用于接受赋值参数。</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> aty <span class="comment">//只读</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> atz <span class="comment">//只写</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">set</span> &#123; x=<span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            X meber=<span class="keyword">new</span> X();</span><br><span class="line">            meber.atx = <span class="number">100</span>;  <span class="comment">//x写</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;x=&#123;0&#125;&quot;</span>,meber.atx);  <span class="comment">//x读</span></span><br><span class="line">            <span class="comment">//meber_x.aty = 200; 错误,y只读</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;y=&#123;0&#125;&quot;</span>,meber.aty); <span class="comment">//y写，错误，y只读</span></span><br><span class="line">            meber.atz = <span class="number">300</span>; <span class="comment">//z只写</span></span><br><span class="line">            <span class="comment">//Console.WriteLine(&quot;z=&#123;0&#125;&quot;,meber.atz); //z读取，错误，z只写</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="P76-4-2-6-成员方法的四种参数类型"><a href="#P76-4-2-6-成员方法的四种参数类型" class="headerlink" title="P76 : 4.2.6-成员方法的四种参数类型"></a>P76 : 4.2.6-成员方法的四种参数类型</h2><p><strong>回顾</strong></p>
<p>java传参：基本类型外向内单向传参，数组可修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">param</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] a=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> aa=<span class="number">10000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">change_value</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> aa)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--形参改变的方法内参数--&quot;</span>);</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        aa+=<span class="number">1</span>;</span><br><span class="line">        print_array(a,aa);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print_array</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> aa)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : a)&#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(aa);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        change_value(a,aa);</span><br><span class="line">        System.out.println(<span class="string">&quot;--方法块父级域参数，类静态--&quot;</span>);</span><br><span class="line">        print_array(a,aa);</span><br><span class="line">        <span class="keyword">int</span>[] b=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> bb=<span class="number">10000</span>;</span><br><span class="line">        change_value(b,bb);</span><br><span class="line">        System.out.println(<span class="string">&quot;--方法块父级域参数--&quot;</span>);</span><br><span class="line">        print_array(b,bb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">--形参改变的方法内参数--</span></span><br><span class="line"><span class="comment">1 2 3 4 5 10001</span></span><br><span class="line"><span class="comment">--方法块父级域参数，类静态--</span></span><br><span class="line"><span class="comment">1 2 3 4 5 10000</span></span><br><span class="line"><span class="comment">--形参改变的方法内参数--</span></span><br><span class="line"><span class="comment">1 2 3 4 5 10001</span></span><br><span class="line"><span class="comment">--方法块父级域参数--</span></span><br><span class="line"><span class="comment">1 2 3 4 5 10000</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>python传参：基本类型外向内单向传参，数组可修改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aa=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">a=<span class="number">10000</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span>(<span class="params">list_a,int_a</span>):</span></span><br><span class="line">    list_a.append(<span class="number">1</span>)</span><br><span class="line">    int_a+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">&quot;方法内&quot;</span>,list_a,int_a)</span><br><span class="line">change(aa,a)</span><br><span class="line">print(<span class="string">&quot;同块  &quot;</span>,aa,a)</span><br><span class="line"><span class="comment"># 方法内 [1, 2, 3, 4, 5, 1] 10001</span></span><br><span class="line"><span class="comment"># 同块   [1, 2, 3, 4, 5, 1] 10000</span></span><br></pre></td></tr></table></figure>

<p><strong>C#的传参</strong></p>
<ol>
<li>值类型参数。和常见语言的方法调用参数特性一致（java，python）。基本变量在方法内有自己的生存周期。</li>
<li>引用型参数ref。有点像C++的传引用，方法内外双向传参。</li>
<li>输出型参数out。C#新类型，方法块内向外传值，因此方法内必须对值进行初始化。</li>
<li>输入型参数in。形参成为实参的别名。必须是变量。</li>
<li>数组型参数params。C#新类型，数组参数可以省去定义变量名，可以一次传入若干变量。</li>
</ol>
<blockquote>
<p>这里in参数书上没提，补充一下：<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/in-parameter-modifier">in 参数修饰符 - C# 参考 | Microsoft Docs</a><br><code>ref</code> 修饰符，指定参数由引用传递，可以由调用方法读取或写入。<br><code>out</code> 修饰符，指定参数由引用传递，必须由调用方法写入。<br><code>in</code> 修饰符，指定参数由引用传递，可以由调用方法读取，但不可以写入。</p>
</blockquote>
<p>当我们传递一个数组给一个方法时，参数数组的元素可以被<strong>改变</strong>，出了方法继续使用，但new出来的数组如果不return的话会被垃圾回收。<br>这一点我们想到java的传参。实际上，java传参是值传递。C#既有值传递也有引用传递。</p>
<blockquote>
<p><strong>java传参：</strong></p>
<p>如果参数是基本类型，传递的是基本类型的字面量值的拷贝。<br>如果参数是引用类型，传递的是该参量所引用的对象在堆中地址值的拷贝。</p>
</blockquote>
<p>当你new一个新对象赋值给“copy”变量名后，“copy”修改的是new出来的地址。出函数后，“origin”查看的值还是原来的地址。java的传参是值传递。</p>
<blockquote>
<p><a href="https://www.zhihu.com/question/31203609/answer/50992895">Java 到底是值传递还是引用传递？ - 知乎 (zhihu.com)</a></p>
</blockquote>
<p>一个例子看懂C#传参：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace @ref</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change_value</span>(<span class="params"><span class="built_in">int</span> i ,<span class="built_in">int</span>[] j</span>) <span class="comment">//值类型参数，从外到内单向传递</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            i += <span class="number">10000</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> ii = <span class="number">0</span>; ii &lt; j.Length; ii++)</span><br><span class="line">            &#123;</span><br><span class="line">                j[ii] += <span class="number">10000</span>*(ii+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change_ref</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">int</span> i,<span class="keyword">ref</span> <span class="built_in">int</span>[] j</span>) <span class="comment">//ref引用型参数，外部内部双向传递</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            i += <span class="number">10000</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> ii = <span class="number">0</span>; ii &lt; j.Length; ii++)</span><br><span class="line">            &#123;</span><br><span class="line">                j[ii] += <span class="number">10000</span> * (ii + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change_out</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> i,<span class="keyword">out</span> <span class="built_in">int</span>[] j</span>)    <span class="comment">//out型参数，由内到外单向传递</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//i += 10000; //错误，out参数需要在方法内初始化变量</span></span><br><span class="line">            i = <span class="number">10000</span>;</span><br><span class="line">            j =<span class="keyword">new</span> <span class="built_in">int</span>[]&#123; <span class="number">10000</span>,<span class="number">20000</span>,<span class="number">30000</span>&#125;;</span><br><span class="line">            <span class="comment">//注：补充，表达式无法作为out输出参数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change_params</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">int</span>[] j</span>) <span class="comment">//数组型参数，和ref参数类似</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> ii = <span class="number">0</span>; ii &lt; j.Length; ii++)</span><br><span class="line">            &#123;</span><br><span class="line">                j[ii] += <span class="number">10000</span> * (ii + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change_value</span>(<span class="params"><span class="built_in">int</span>[] j</span>) <span class="comment">//值类型参数，调用方式与以上数组类型参数对比</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            j = <span class="keyword">new</span> <span class="built_in">int</span>[] &#123; <span class="number">10000</span>, <span class="number">20000</span>, <span class="number">30000</span> &#125;;<span class="comment">//数组j(外部?栈)并没有指向堆中新的数组，因此此处new的j(内部?堆)如果不返回则被垃圾回收</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span>(<span class="params"><span class="built_in">int</span> i,<span class="built_in">int</span>[] j</span>) <span class="comment">//打印输出</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(i);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="built_in">int</span> jj <span class="keyword">in</span> j)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(<span class="string">&quot;&#123;0&#125; &quot;</span>,jj);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">int</span> i,<span class="keyword">out</span> <span class="built_in">int</span>[] j</span>) <span class="comment">//初始化</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            j =<span class="keyword">new</span> <span class="built_in">int</span>[]&#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">int</span> i;</span><br><span class="line">            <span class="built_in">int</span>[] j;</span><br><span class="line">            <span class="keyword">init</span>(<span class="keyword">out</span> i, <span class="keyword">out</span> j);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;原值：&quot;</span>);</span><br><span class="line">            output(i, j);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">init</span>(<span class="keyword">out</span> i, <span class="keyword">out</span> j);</span><br><span class="line">            change_value(i, j);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;常规值参数&quot;</span>);</span><br><span class="line">            output(i, j);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">init</span>(<span class="keyword">out</span> i, <span class="keyword">out</span> j);</span><br><span class="line">            change_ref(<span class="keyword">ref</span> i, <span class="keyword">ref</span> j);   <span class="comment">//ref型参数需要在函数调用中指明</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ref型参数&quot;</span>);</span><br><span class="line">            output(i, j);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">init</span>(<span class="keyword">out</span> i, <span class="keyword">out</span> j);</span><br><span class="line">            change_out(<span class="keyword">out</span> i, <span class="keyword">out</span> j);   <span class="comment">//out型参数需要在函数调用中指明</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;out型参数&quot;</span>);</span><br><span class="line">            output(i, j);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">init</span>(<span class="keyword">out</span> i, <span class="keyword">out</span> j);</span><br><span class="line">            change_params(j);   <span class="comment">//params型参数</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;params型参数&quot;</span>);</span><br><span class="line">            output(i, j);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">init</span>(<span class="keyword">out</span> i, <span class="keyword">out</span> j);</span><br><span class="line">            change_params(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">//prarams的特有写法</span></span><br><span class="line">            <span class="comment">// change_value(0, 0, 0); //错误，值类型参数无法直接(0,0,0)</span></span><br><span class="line">            change_value(j); <span class="comment">// new出的对象出了方法就失联了</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;new出的对象出了方法就失联了&quot;</span>);</span><br><span class="line">            output(i, j);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">原值：</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">0 0 0</span></span><br><span class="line"><span class="comment">常规值参数</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">10000 20000 30000</span></span><br><span class="line"><span class="comment">ref型参数</span></span><br><span class="line"><span class="comment">10000</span></span><br><span class="line"><span class="comment">10000 20000 30000</span></span><br><span class="line"><span class="comment">out型参数</span></span><br><span class="line"><span class="comment">10000</span></span><br><span class="line"><span class="comment">10000 20000 30000</span></span><br><span class="line"><span class="comment">params型参数</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">10000 20000 30000</span></span><br><span class="line"><span class="comment">new出的对象出了方法就失联了</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">0 0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="P78-4-3-1-继承"><a href="#P78-4-3-1-继承" class="headerlink" title="P78 : 4.3.1-继承"></a>P78 : 4.3.1-继承</h2><p>C#比起C++少了指针和多重继承。赋值兼容大体还是按照C++那套来的。</p>
<p><strong>重载</strong></p>
<ol>
<li>不能重载静态成员方法</li>
<li>方法名相同，参数表不同，不看返回值类型</li>
</ol>
<p><strong>多态</strong></p>
<ol>
<li>编译时多态：方法重载</li>
<li>运行时多态：重写虚方法</li>
</ol>
<p><strong>继承</strong></p>
<ol>
<li>子类作基类使用时，子类使用从基类继承来的属性和方法，无视隐藏</li>
<li>子类使用基类的构造方法，构造的是来自基类的属性，可被新同名属性隐藏</li>
<li>方法里，子类的this和可以复写基类的this。</li>
</ol>
<p>类被继承后，子类包含：新定义的属性和方法+重写基类的属性和方法+继承来自基类的属性和方法；<br>重写基类的属性和方法后，子类继承过来的属性和方法不是被覆盖，而是被隐藏。</p>
<p>例子：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Success</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> String name = <span class="string">&quot;形状&quot;</span>; <span class="comment">// private属性不被继承</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="built_in">double</span> pi; <span class="comment">// protected属性被继承</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Shape</span>(<span class="params"></span>) <span class="comment">// 基本构造；注意返回值不同无法重载</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            pi = <span class="number">3.14</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Shape</span>(<span class="params"><span class="built_in">double</span> pi</span>) <span class="comment">// 带参构造，参数列表不同，与无参构造重载</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.pi = pi; <span class="comment">// 重载函数：编译时多态</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show_name</span>(<span class="params"></span>) <span class="comment">// public属性被继承</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">double</span> <span class="title">circle_area</span>(<span class="params"><span class="built_in">double</span> len, <span class="built_in">double</span> pi = <span class="number">3.14</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;                                <span class="comment">// 可选参数必须出现在必须参数之后</span></span><br><span class="line">            <span class="comment">// todo</span></span><br><span class="line">            <span class="comment">// 基类 虚函数 运行时多态</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Circle</span>:<span class="title">Shape</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> String name = <span class="string">&quot;圆&quot;</span>;</span><br><span class="line">        <span class="comment">// public int pi = 3;  // 提示“Circle.pi”隐藏继承成员“Shape.pi”。如果有意隐藏，请使用关键字new</span></span><br><span class="line">        <span class="keyword">new</span> <span class="keyword">public</span> <span class="built_in">double</span> pi=<span class="number">3</span>; <span class="comment">// 覆盖基类的pi，属性protected-&gt;public，带参构造里的pi因此无效</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">double</span> len;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>        &#123; </span><br><span class="line">           pi = <span class="number">3.1415926535</span>;</span><br><span class="line">           len = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Circle</span>(<span class="params"><span class="built_in">double</span> len,<span class="built_in">double</span> pi</span>) :<span class="title">base</span>(<span class="params">pi</span>) <span class="comment">// 使用基类的带参构造</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;--圆的带参构造--&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;pi= &#123;0&#125;&quot;</span>, pi); <span class="comment">// 此处的pi是base.pi</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;this.pi= &#123;0&#125;&quot;</span>, <span class="keyword">this</span>.pi);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;base.pi= &#123;0&#125;&quot;</span>, <span class="keyword">base</span>.pi);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;--------------&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.len = len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show_name</span>(<span class="params"></span>) <span class="comment">// 方法实际隐藏了基类</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="keyword">this</span>.name); <span class="comment">// 虽然和基类的show_name()写法上完全相同，但this不是同一对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">double</span> <span class="title">circle_area</span>(<span class="params"><span class="built_in">double</span> len, <span class="built_in">double</span> pi</span>)</span></span><br><span class="line"><span class="function"></span>        &#123; <span class="comment">//基类的虚方法和派生类中重写方法的方法名、参数列表、还有返回值必须完全一致（可选参数可以不同）</span></span><br><span class="line">            <span class="built_in">double</span> area = pi * len * len;</span><br><span class="line">            <span class="keyword">return</span> area;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span>(<span class="params">Shape shape</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            shape.show_name();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Shape shape = <span class="keyword">new</span> Shape();</span><br><span class="line">            shape.show_name();</span><br><span class="line">            show(shape);</span><br><span class="line">            Circle circle = <span class="keyword">new</span> Circle();</span><br><span class="line">            circle.show_name();</span><br><span class="line">            show(circle); <span class="comment">// C++赋值兼容规则：对象切片</span></span><br><span class="line">            Circle circle2=<span class="keyword">new</span> Circle(<span class="number">10</span>,<span class="number">3.1514</span>);</span><br><span class="line">            Shape shape2 = circle2; </span><br><span class="line">            shape2.show_name(); <span class="comment">//对象切片的显示写法</span></span><br><span class="line">            Console.WriteLine(circle2.len);</span><br><span class="line">            Console.WriteLine(circle2.pi);</span><br><span class="line">            Console.WriteLine(circle2.circle_area(circle2.len,circle2.pi)); </span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">形状</span></span><br><span class="line"><span class="comment">形状</span></span><br><span class="line"><span class="comment">圆</span></span><br><span class="line"><span class="comment">形状</span></span><br><span class="line"><span class="comment">--圆的带参构造--</span></span><br><span class="line"><span class="comment">pi= 3.1514</span></span><br><span class="line"><span class="comment">this.pi= 3</span></span><br><span class="line"><span class="comment">base.pi= 3.1514</span></span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line"><span class="comment">形状</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">300</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="P86-4-5-1-接口"><a href="#P86-4-5-1-接口" class="headerlink" title="P86 : 4.5.1-接口"></a>P86 : 4.5.1-接口</h2><p>定义：</p>
<p>接口成员不允许修饰符，默认公有成员。<br>成员可以分为四类：方法、属性、事件和索引器，不包含成员变量。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">I</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span>(<span class="params"><span class="built_in">int</span> x</span>)</span>;                           <span class="comment">//方法</span></span><br><span class="line">    <span class="built_in">int</span> att&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;                     <span class="comment">//属性（可读、可写）</span></span><br><span class="line">    <span class="keyword">event</span> EventHandler OnDraw;               <span class="comment">//事件</span></span><br><span class="line">    <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index] &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;     <span class="comment">//索引器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>C#通过对接口的多重继承实现，来达到C++里多重继承的效果。实现过程需要满足所有方法的实现。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">I1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span>(<span class="params"><span class="built_in">int</span> x</span>)</span>;                           <span class="comment">//方法</span></span><br><span class="line">    <span class="built_in">int</span> att &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;                     <span class="comment">//属性（可读、可写）</span></span><br><span class="line">    <span class="keyword">event</span> EventHandler OnDraw;               <span class="comment">//事件</span></span><br><span class="line">    <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index] &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;     <span class="comment">//索引器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">I2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span> : <span class="title">I1</span>, <span class="title">I2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] strs = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">100</span>];  <span class="comment">//新增变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">g</span>(<span class="params"></span>)</span> &#123; &#125;                       <span class="comment">//实现I2方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span>(<span class="params"><span class="built_in">int</span> x</span>)</span> &#123; &#125;                  <span class="comment">//实现I1方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> EventHandler OnDraw           <span class="comment">//实现I1事件</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">add</span> &#123; &#125; </span><br><span class="line">        <span class="keyword">remove</span> &#123; &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> att                             <span class="comment">//实现I1属性</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]              <span class="comment">//实现I1索引</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt;=<span class="number">0</span> || index &gt;= <span class="number">100</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> strs[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(index &lt; <span class="number">0</span> || index &gt;= <span class="number">100</span>)) strs[index] = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="P88-4-6-委托"><a href="#P88-4-6-委托" class="headerlink" title="P88 : 4.6-委托"></a>P88 : 4.6-委托</h2><ul>
<li><p>解释：<br>  函数指针。</p>
</li>
<li><p>作用：<br>  方法回调。通俗来说就是：可以让一个方法伪装成一个对象，作为参数被其它方法调用。<br>  个人感觉在不同类的方法耦合调用的情景下，这东西很方便。<br>  <code>b.function(new Delegate(A.function));</code></p>
</li>
<li><p>定义：</p>
  <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">属性 修饰符 <span class="built_in">delegate</span> 返回类型 委托类型名(参数表);</span><br></pre></td></tr></table></figure>

<p>  属性、修饰符：new、public、internal、protected、private。</p>
</li>
<li><p>实例化：</p>
  <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">委托对象 = <span class="keyword">new</span> 委托类型 (关联方法);</span><br></pre></td></tr></table></figure>

<p>  以下例子中，fg是a.f的委托；static_fg是A.g的委托。</p>
</li>
<li><p>条件：<br>  参数表相同，返回类型相同。</p>
</li>
<li><p>组合委托：<br>  同类型委托之间可以使用 + - 运算；<br>  必须是同类型的委托才能组合，（同返回类型，同参数表）；<br>  委托列表所有委托统一使用组合委托传入的参数；<br>  带返回的委托组合在一起时，组合委托返回的是委托列表最后一个委托的返回值。</p>
</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">fun([delegate_fun],s1,s2)</span><br><span class="line">&#123;                  |  |</span><br><span class="line">     &quot;class_a.fun&quot;(s1,s2)</span><br><span class="line">&#125;</span><br><span class="line">----------------------------</span><br><span class="line">fun(   object_?   ,s1,s2)</span><br><span class="line">&#123;                  |  |</span><br><span class="line">       class_a.fun(s1,s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上图，使用委托[上]，和传入对象[下]。使用委托仅限对象某一特定方法进入，相对来说更加安全。</p>
<p><strong>案例</strong></p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">simpledelegate</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;     <span class="comment">//声明委托</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;方法f:&quot;</span>+msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">static_f</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;方法static_f:&quot;</span>+msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">B</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">h</span>(<span class="params">MyDelegate m</span>) <span class="comment">//B.h -&gt; MyDelegate(?) -?-&gt; static_f/f/...</span></span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            m(<span class="string">&quot;这里是B，使用委托偷来了A的方法&quot;</span> + m.Method.Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">delegate</span> <span class="built_in">string</span> <span class="title">MyDelegateWithReturn</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;     <span class="comment">//声明带返回委托</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">C</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">g</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;方法g:&quot;</span> + msg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">static_g</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;方法static_g:&quot;</span> + msg;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            MyDelegate static_fd = <span class="keyword">new</span> MyDelegate(A.static_f); <span class="comment">//MyDelegate(static_fd) -&gt; A.static_f</span></span><br><span class="line">            A a = <span class="keyword">new</span> A();</span><br><span class="line">            MyDelegate fd = <span class="keyword">new</span> MyDelegate(a.f);</span><br><span class="line">            static_fd(<span class="string">&quot;A.static_f委托给static_fd&quot;</span>);            </span><br><span class="line">            A.static_f(<span class="string">&quot;原来的A.static_f&quot;</span>);            <span class="comment">// A.static_f</span></span><br><span class="line">            fd(<span class="string">&quot;a.f委托给fd&quot;</span>);                         <span class="comment">// MyDelegate(fd) -&gt; a.f</span></span><br><span class="line">            a.f(<span class="string">&quot;原来的a.f&quot;</span>);                          <span class="comment">// a.f</span></span><br><span class="line"></span><br><span class="line">            B b = <span class="keyword">new</span> B();</span><br><span class="line">            b.h(fd);                                   <span class="comment">// B.h -&gt; MyDelegate(static_f) -&gt; static_f</span></span><br><span class="line">            b.h(static_fd);                            <span class="comment">// B.h -&gt; MyDelegate(f) -&gt; f</span></span><br><span class="line"></span><br><span class="line">            MyDelegate togather_f = fd + static_fd;      <span class="comment">// 无返回组合委托</span></span><br><span class="line">            togather_f(<span class="string">&quot;无返回委托组合&quot;</span>);</span><br><span class="line"></span><br><span class="line">            C c = <span class="keyword">new</span> C();                               <span class="comment">// 带返回组合委托</span></span><br><span class="line">            MyDelegateWithReturn static_fg = <span class="keyword">new</span> MyDelegateWithReturn(C.static_g);</span><br><span class="line">            MyDelegateWithReturn fg = <span class="keyword">new</span> MyDelegateWithReturn(c.g);</span><br><span class="line">            MyDelegateWithReturn togather_g = fg + static_fg;      <span class="comment">// 组合委托,static_fg是委托列表的最后委托，使用它的return</span></span><br><span class="line">            Console.WriteLine(togather_g(<span class="string">&quot;带返回委托组合&quot;</span>));        <span class="comment">// 如果组合委托列表关联的方法有返回值，委托返回最后一个委托的返回值</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//togather_f = fg + fd; //错误   // 必须是同类型的委托才能组合，（同返回类型，同参数表），委托列表所有委托统一使用组合委托传入的参数</span></span><br><span class="line"></span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法static_f:A.static_f委托给static_fd</span></span><br><span class="line"><span class="comment">方法static_f:原来的A.static_f</span></span><br><span class="line"><span class="comment">方法f:a.f委托给fd</span></span><br><span class="line"><span class="comment">方法f:原来的a.f</span></span><br><span class="line"><span class="comment">方法f:这里是B，使用委托偷来了A的方法f</span></span><br><span class="line"><span class="comment">方法static_f:这里是B，使用委托偷来了A的方法static_f</span></span><br><span class="line"><span class="comment">方法f:无返回委托组合</span></span><br><span class="line"><span class="comment">方法static_f:无返回委托组合</span></span><br><span class="line"><span class="comment">方法static_g:带返回委托组合</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="P96-4-7-泛型类"><a href="#P96-4-7-泛型类" class="headerlink" title="P96 : 4.7-泛型类"></a>P96 : 4.7-泛型类</h2><p>字面意思，支持各种类型的类。</p>
<p>定义一个函数，使其能交换两个参数的值，参数类型包括数组、对象、值等等。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">generic</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">B</span>&lt;<span class="title">T</span>&gt; <span class="comment">//多用T作为参数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span>(<span class="params"><span class="keyword">ref</span> T x,<span class="keyword">ref</span> T y</span>) <span class="comment">//不定义引用是换不出去的</span></span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                T t = x;</span><br><span class="line">                x = y;</span><br><span class="line">                y = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">int</span> a, b;</span><br><span class="line">            a = <span class="number">100</span>;b = <span class="number">200</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;交换前:a=&#123;0&#125;,b=&#123;1&#125;&quot;</span>,a,b);</span><br><span class="line">            B&lt;<span class="built_in">int</span>&gt;.swap(<span class="keyword">ref</span> a, <span class="keyword">ref</span> b);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;交换后:a=&#123;0&#125;,b=&#123;1&#125;&quot;</span>,a,b);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> s1, s2;</span><br><span class="line">            s1 = <span class="string">&quot;西游记&quot;</span>;s2 = <span class="string">&quot;红楼live&quot;</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;交换前:s1=&#123;0&#125;,s2=&#123;1&#125;&quot;</span>,s1,s2);</span><br><span class="line">            B&lt;<span class="built_in">string</span>&gt;.swap(<span class="keyword">ref</span> s1, <span class="keyword">ref</span> s2);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;交换后:s1=&#123;0&#125;,s2=&#123;1&#125;&quot;</span>,s1,s2);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">交换前:a=100,b=200</span></span><br><span class="line"><span class="comment">交换后:a=200,b=100</span></span><br><span class="line"><span class="comment">----------------------</span></span><br><span class="line"><span class="comment">交换前:s1=西游记,s2=红楼live</span></span><br><span class="line"><span class="comment">交换后:s1=红楼live,s2=西游记</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>泛型类用的多的还是泛型数组List<T>类。特性较多，不抄了，直接搬库：</p>
<blockquote>
<p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-5.0">List Class (System.Collections.Generic) | Microsoft Docs</a></p>
</blockquote>
<h2 id="P110-4-9-命名空间"><a href="#P110-4-9-命名空间" class="headerlink" title="P110 : 4.9-命名空间"></a>P110 : 4.9-命名空间</h2><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">namespace 命名空间名</span><br><span class="line">&#123;</span><br><span class="line">	命名空间成员;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>命名空间可以是任意合法的标识符，命名空间成员通常是类，还可以是接口、枚举、委托、其它命名空间。<br>命名空间的修饰符为隐含的public类型，不能在声明时显式指定任何修饰符。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Math;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Outlander</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;this is Outlander.classA.print()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Here</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> Out = Outlander.A; <span class="comment">//起别名</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">A</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;this is Here.classA.print()&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(PI);</span><br><span class="line">            Outlander.A.print();</span><br><span class="line">            Out.print();</span><br><span class="line">            A.print();</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">3.14159265358979</span></span><br><span class="line"><span class="comment">this is Outlander.classA.print()</span></span><br><span class="line"><span class="comment">this is Outlander.classA.print()</span></span><br><span class="line"><span class="comment">this is Here.classA.print()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>常规导入：using Outlander;<br>相当于：import Outlander.*;</p>
<p>其它实用方式：</p>
<ol>
<li>using指令：引入命名空间</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Namespace1.SubNameSpace;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>using static 指令：无需指定类型名称即可访问其静态成员的类型</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">static</span> System.Math;</span><br><span class="line">Console.WriteLine(PI); <span class="comment">// 直接使用System.Math.PI</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>起别名</li>
</ol>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Out =Outlander.A;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>using语句：将实例与代码绑定</li>
</ol>
<blockquote>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/using-statement">using 语句 - C# 参考 | Microsoft Docs</a></p>
</blockquote>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> StringReader </span><br><span class="line">    left = <span class="keyword">new</span> StringReader(numbers),</span><br><span class="line">    right = <span class="keyword">new</span> StringReader(letters);</span><br></pre></td></tr></table></figure>

<h2 id="P120-5-1-异常"><a href="#P120-5-1-异常" class="headerlink" title="P120 : 5.1-异常"></a>P120 : 5.1-异常</h2><p>常用异常类：</p>
<table>
<thead>
<tr>
<th>类</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>ArithmeticException</td>
<td>在进行算术运算时可能产生的异常，是DivideByZeroException和OverflowException的基类</td>
</tr>
<tr>
<td>ArrayTypeMismatchException</td>
<td>但储存元素类型与数组元素类型不匹配而导致储存失败产生此异常</td>
</tr>
<tr>
<td>Exception</td>
<td>所有异常类的基类，可捕获所有异常</td>
</tr>
<tr>
<td>FormatException</td>
<td>参数格式错误而引发的异常</td>
</tr>
<tr>
<td>DivideByZeroException</td>
<td>当用零除一个整数数据时会产生此异常</td>
</tr>
<tr>
<td>IndexOutOfRangeException</td>
<td>用一个小于零或者大于数组边界的下标来访问一个数组元素时会产生此异常</td>
</tr>
<tr>
<td>IOException</td>
<td>该类用户处理进行文件输入输出操作所引发的异常</td>
</tr>
<tr>
<td>NullReferenceException</td>
<td>试图以null作为对象名来引用对象的成员会产生此异常</td>
</tr>
<tr>
<td>OutOfMemeryException</td>
<td>当使用new来申请内存而失败时会产生此异常</td>
</tr>
<tr>
<td>OverflowException</td>
<td>但选中的上下文中所进行的算术运算、类型运算等而导致存储单元溢出会产生此异常</td>
</tr>
<tr>
<td>SqlException</td>
<td>SQL操作引发的异常</td>
</tr>
<tr>
<td>TypeInitializationException</td>
<td>静态构造函数抛出异常且没有任何catch结构来捕获它时会产生此异常</td>
</tr>
</tbody></table>
<p>注意：</p>
<ul>
<li><p>Message：string类型的只读属性，包含异常原因描述。</p>
</li>
<li><p>InnerException：Exception类型的只读属性，如果其值为null，表明异常不是由另一个异常引发，而是由系统内部产生或者根据相关条件抛出；如果不是null，表示当前异常是对另一个异常的回应而被抛出，<strong>“另一个异常”则保存在InnerException属性中</strong>。</p>
</li>
<li><p>catch (异常类 对象名){ … }中的 (异常类 对象名)可以省略，即catch { … }。如果省略该部分，不管在try中产生什么异常，程序都会转向执行catch中的代码，这种情况无法获取此异常的任何信息。</p>
</li>
<li><p>当try语句块中可能产生多个异常，遇到第一个异常后直接进入catch。此时若使用多个catch结构捕获，存在catch块顺序上的要求。<strong>派生类异常的catch块必须放到基类catch块的前面，因为基类catch块的捕获范围更大</strong>。如果两catch块异常同级则顺序随意。</p>
</li>
<li><p>使用try-catch-finally结构时，哪怕catch块最后要执行return语句（try-catch(return)-finally），依然会执行finally块。</p>
</li>
</ul>
<p><strong>异常抛出</strong></p>
<ul>
<li>直接抛出，异常重发<br>  throw e;</li>
<li>使用捕获的异常创建新的异常后抛出<br>  throw new Exception([参数表]);<br>  —或者—<br>  Exception 异常对象=new Exception([参数表]);<br>  throw 异常对象;</li>
</ul>
<p>直接抛出和二次打包的差别</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace @throw</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">testException</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mistake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="built_in">int</span> n = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">int</span> m = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;  </span><br><span class="line">                n = n / (n - m);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;无任何异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            catch(Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;mistake():&quot;</span> + e.Message, e); <span class="comment">//二次打包后抛出</span></span><br><span class="line">                <span class="comment">//throw e; //直接抛出，异常重发</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            testException te = <span class="keyword">new</span> testException();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                te.mistake();</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;当前捕获的异常：&quot;</span>+e.Message);  <span class="comment">//打包后的异常</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;当前异常内部异常（原异常）&quot;</span> + e.InnerException.Message); <span class="comment">//原异常</span></span><br><span class="line">                <span class="comment">//异常如果被throw e直接抛出，而不是经过throw new Exception(e)打包抛出，则不存在所谓这里的打包内部异常InnerException，值为null</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当前捕获的异常：mistake():尝试除以零。</span></span><br><span class="line"><span class="comment">当前异常内部异常（原异常）尝试除以零。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>异常的运用实例：用户自定义异常</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyException</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">UserException</span> : <span class="title">Exception</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UserException</span>(<span class="params"></span>)</span> &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UserException</span>(<span class="params"><span class="built_in">string</span> ms</span>) : <span class="title">base</span>(<span class="params">ms</span>)</span> &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UserException</span>(<span class="params"><span class="built_in">string</span> ms, Exception inner</span>) : <span class="title">base</span>(<span class="params">ms, inner</span>)</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">double</span> score;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span>(<span class="params"><span class="built_in">string</span> name,<span class="built_in">double</span> score</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.Length &gt; <span class="number">8</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> (<span class="keyword">new</span> UserException(<span class="string">&quot;姓名长度超过8个字节&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> (<span class="keyword">new</span> UserException(<span class="string">&quot;非法的分数&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.score = score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            student s = <span class="keyword">new</span> student();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                s.setInfo(<span class="string">&quot;张三&quot;</span>,<span class="number">999</span>);</span><br><span class="line">            &#125;catch(Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;产生异常:&#123;0&#125;&quot;</span>,e.Message);</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">产生异常:非法的分数</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="P133-6-1-简易文本编辑器"><a href="#P133-6-1-简易文本编辑器" class="headerlink" title="P133 : 6.1-简易文本编辑器"></a>P133 : 6.1-简易文本编辑器</h2><p>文本编辑器包含文件打开和保存的操作，使用到系统的一个轮子：openFileDialog和saveFileDialog。课本代码有误，或只给出部分代码（将部分变量初始化代码写在外层的窗体初始化函数中），或课本过时（2010出版），说明一下：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//open file 菜单项</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openfileToolStripMenuItem_Click</span>(<span class="params"><span class="built_in">object</span> sender,EventArgs e</span>)</span>&#123;</span><br><span class="line">	OpenFileDialog open=<span class="keyword">new</span> OpenFileDialog();</span><br><span class="line">	open.Fileter=<span class="string">&quot;txt files(*.txt) | *.txt&quot;</span>;  <span class="comment">//此处注意， | 左右包含一个空格</span></span><br><span class="line">	<span class="keyword">if</span>(open.showDialog()==DialogResult.OK)</span><br><span class="line">	&#123;</span><br><span class="line">   	 	richTextBox1.LoadFile(open.FileName,RichTextBoxStreamType.PlainText);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...保存项同理</span></span><br></pre></td></tr></table></figure>

<p>此外，第六章大都是组件和控件的介绍，实在没啥必要精读，用时拖着玩两下就会了，IDE代码补全里的介绍甚至比课本详细。</p>
<hr>
<div class="note default"><p>2021/06/04更新</p>
</div>

<p>咳咳，说来真不好意思。平时作业写完要么学高数去了，要么玩游戏去了，没心情更博客了，拖到现在。本来是初学记录的，目前C#大作业都整完了。</p>
<p>剩下还有这些东西要补充的：</p>
<p>P208 : 7.2-目录<br>P212 : 7.3-文件<br>P247 : 9.1-多线程<br>P275 : 10.1-数据库<br>P312 : 11.1-ASP.NET Web</p>
<p><strong>to be continue…</strong></p>
<p>以后有缘再更到新文章里。<br>此文完结。<br>说到大作业，其实我只把目录、文件、数据库看了一遍，多线程和网页ASP没学，重点学了下treeView和DataGridView两个控件，连了下SQL Server，写了个学生管理系统，完了。<br>这个学期的C#就学到这里。<br>准备期末答辩了。</p>
<p>以后还是会细说一下C#多线程的。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>win10+manjaro双系统</title>
    <url>/2021/02/24/win10-manjaro-shuang-xi-tong/</url>
    <content><![CDATA[<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301222036.png"></p>
<h1 id="win10-manjaro双系统"><a href="#win10-manjaro双系统" class="headerlink" title="win10+manjaro双系统"></a>win10+manjaro双系统</h1><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>我没有纯manjaro的打算，adobe全家桶、office365、qq、微信、游戏等软件还得是win10，仅仅把manjaro作为开发+媒体娱乐+编辑性办公，已经够用了。linux大多数情况下开发体验都优于win10。<br>除了qq接收文件的体验一般，其他方面并不存在跨系统操作不同步的不适，win-lin资料共用，浏览器书签及时同步，已经能满足日用要求。<br>linux日用的最大的问题是：渣渣驱动太耗电了。使用时间比win节电模式短。<br>下面是准备步骤。</p>
<h2 id="跨浏览器书签共享"><a href="#跨浏览器书签共享" class="headerlink" title="跨浏览器书签共享"></a>跨浏览器书签共享</h2><details class="note "><summary><p>warming</p>
</summary>
<p>2021.03.25更新：linux的edge dev版本已经支持账户登陆同步了，需要在dege://flags开启。忽略以下内容全平台向edge靠拢即可。</p>

</details>

<p>linux下的edge目前是残疾状态，没有登陆功能，所以建议先chrome，但又不想放弃win下edge体验。<br>可使用<strong>floccus+坚果云</strong>同步方案：</p>
<blockquote>
<p>楔子：<a href="https://zhuanlan.zhihu.com/p/103281301">如何在 Chrome、Firefox、Edge、Safari 之间进行跨平台书签同步？ - 知乎 (zhihu.com)</a><br>具体步骤：<a href="https://blog.naibabiji.com/skill/jian-guo-yun-floccus-shu-qian-tong-bu.html">不同浏览器书签同步方案：坚果云+Floccus_详细使用教程 - 奶爸建站笔记 (naibabiji.com)</a><br>视频演示：<a href="https://www.bilibili.com/video/BV1pk4y1C7b4">WebDAV+Floccus 利用浏览器扩展在Chrome和Firefox之间实现书签同步_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>
</blockquote>
<p><strong>注意：</strong></p>
<p>只需要一个 floccus插件+坚果云注册账号，不需要坚果云客户端。<br>初始化坚果云书签保存文件的下载地址：<a href="https://mednight4.lanzoui.com/ixsPWm8y9wf">bookmarks.xbel</a><br>edge浏览器根下有三个主文件夹：收藏夹栏、移动收藏夹、其它收藏夹。如果想在不同浏览器书签全同步，需要为这三个文件夹分别建立数据文件。<br>设置旁边的向上向下箭头分别是推送和拉取，同步功能取并集。<br>坚果云账户-书签文件-更多-历史版本-恢复：回滚历史书签。<br>如果没有移动收藏夹，可能需要手机端下载应用同步后才自动创建。</p>
<p><strong>我的配置：</strong></p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/Snipaste_2021-02-27_18-06-30.png"></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210302122701.png"></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210302122811.png"></div></div></div>

<p>这个同步功能挺有意思的，我弄不清楚它的实现逻辑：<br>假如远程仓库增删了文件，本地点击同步，是将本地的数据推送到云，还是将云端更改拉取到本地呢？</p>
<ul>
<li>如果是仅仅从本地推送到云，那当A浏览器执行增删推送到云后，B浏览器又会将本地未修改数据推送到云，导致跨浏览器无法更新数据，云成了一个彻底的垃圾站；</li>
<li>如果是仅仅从云端拉取到本地，那我只使用一个浏览器就永远无法删除书签了。</li>
</ul>
<p>所以当我们点击同步按钮的时候，后台做了什么？</p>
<h2 id="Win10准备"><a href="#Win10准备" class="headerlink" title="Win10准备"></a>Win10准备</h2><p>本留了一块1t空机械盘安装新系统，已删除所有分区。后打算留400G做资料共享，余下的装系统。</p>
<ol>
<li><p>进入win10。新建分区400G（/dev/sda1），初始化为exfat(或者ntfs等双方支持的文件系统，manjaro开箱支持ntfs文件驱动<del>ntfs-3g</del>)，作为win-linxu文件共享区。</p>
</li>
<li><p>备份资料至此分区，win常用的图片，视频，代码项目等等。</p>
</li>
<li><p>备份待安装软件配置到此分区，浏览器扩展，扩展导出配置，vscode插件（C:\Users\用户\.vscode\extensions），picgo，typora主题等。</p>
</li>
<li><p>备份win10字体（C:\Windows\Fonts），majaro默认的字体渲染真难看。</p>
</li>
<li><p>查看主板架构，Win8及更高版本系统：按<strong>Win+R</strong> - <strong>msinfo32</strong>：如果BIOS：传统，表示系统启动方式为Legacy BIOS；如果为UEFI，则显示UEFI。<a href="https://www.ithome.com/html/win10/146588.htm">-&gt;</a></p>
<p> <strong>以下采用UEFI/GPT。</strong></p>
</li>
<li><p>manjaro<a href="">官网</a>下载镜像，<a href="https://rufus.ie/">Rufus</a>制作U盘启动，最新版rufus无法选择GPT，github发布页下载<a href="https://github.com/pbatard/rufus/tags?after=v3.4">旧版3.0</a>。</p>
</li>
<li><p>rufus制作manjaro启动器，只能以dd模式写入；openSUSE可选ISO模式。</p>
</li>
<li><p>关机esc+f10进bios，禁用安全启动（Secure Boot）。opensuse可免去这步<a href="https://forum.suse.org.cn/t/topic/9833">-&gt;</a>。</p>
</li>
<li><p>开机优先项选择 u盘 &gt; 系统管理员配置…，从U盘启动。</p>
</li>
<li><p>安装manjaro。安装过程见下一节。</p>
</li>
<li><p>安装结束后将以上两步bios设置（安全启动，U盘启动）还原。</p>
</li>
</ol>
<p>补充说明一下，直接移动vscode插件会无法使用，应该是环境和路径问题，手动安装吧。</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/Snipaste_2021-02-27_16-12-32.png"></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/Snipaste_2021-02-25_17-34-09.png"></div></div></div>

<h2 id="系统安装与删除"><a href="#系统安装与删除" class="headerlink" title="系统安装与删除"></a>系统安装与删除</h2><div class="note danger"><p>若想以后和平删除linux，不建议将lin的efi和win的efi装到一个分区，否则格式化lin的磁盘后win将缺失引导</p>
</div>

<h3 id="引导"><a href="#引导" class="headerlink" title="引导"></a>引导</h3><blockquote>
<p><a href="https://www.jianshu.com/p/90dca469e8f8">UEFI/GPT 模式下使用 rEFInd 引导 Win10 &amp; Linux 双系统的方案 - 简书 (jianshu.com)</a><br><a href="https://www.bilibili.com/video/BV1yU4y1x7d5">不讲武德的年轻人，竟想通过Windows引导多系统？？？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a><br><a href="https://www.jianshu.com/p/ed9e2facba5d">坑爹的Secure Boot设置 - 简书 (jianshu.com)</a><br><a href="https://diy.zol.com.cn/608/6088274.html">硬件大讲堂：MBR和GPT分区表的那些事儿_DIY攒机-中关村在线 (zol.com.cn)</a></p>
</blockquote>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221653.jpg"></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221711.jpg"></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221726.jpg"></div></div></div>

<p>如图，新建fat32挂载lin的efi，以后可随时格盘，在数个系统安装间反复横跳。</p>
<p>我先使用kde桌面，相比于openSUSE，manjaro的kde打磨得并不如意，因此回到了gnome3，gnome的设置项反人类，而且应用开启反应迟钝，又用回kde。因为是新系统，直接重装系统比更换桌面环境更加便捷。</p>
<p>能反复横跳建立在lin的引导独立于win这一前提，否则对lin格盘后win会炸掉，需要非常麻烦地修复BCD引导。</p>
<p>另外，新机若想先安装lin再安装win：不建议，因为win的BCD引导会覆盖lin的grub2，最后还是要修复lin的引导。修复grub2引导：</p>
<blockquote>
<p><a href="https://cnzhx.net/blog/restore-grub2-boot-menu-with-uefi/">恢复 UEFI 模式的 GRUB2 启动项 | 水景一页 (cnzhx.net)</a></p>
</blockquote>
<p>将lin的引导写入win的引导分区有何好处呢？可以通过第三方设置（<a href="https://neosmart.net/EasyBCD/">easyBCD</a>-<a href="https://neosmart.net/wiki/easybcd/neogrub/">Neogrub</a>），直接从win的manage boot跳转到grub2引导lin。理论见：<a href="https://www.bilibili.com/video/BV1yU4y1x7d5">不讲武德的年轻人，竟想通过Windows引导多系统？？？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p>
<p>两种方式(UEFI)的区别：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">grub2 -- linux</span><br><span class="line">      -- manage boot -- windows</span><br><span class="line">                     --	wePE</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-- manage boot -- windwos</span><br><span class="line">               -- wePE</span><br><span class="line">               -- Neogrub -- grub2 -- linux             </span><br></pre></td></tr></table></figure>

<p>分区分别挂载efi，采用第一种方式。</p>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>插入U盘启动，根据系统硬件选择驱动，我Intel+NVIDIA选择闭源驱动，free选项是开源。进入live点击安装，manjaro将为你默认使用ubuntu的prime驱动方案，另可选大黄蜂方案和N卡独显，详情见安装后。<br>kde桌面可选择office套件，选择第一项不需要office，后续自行安装wps；gnome则默认装好。<br>我用kde。忘记拍照了。文字说明下分区：</p>
<blockquote>
<p><a href="https://blog.csdn.net/flyyufenfei/article/details/79187656">Windows + Ubuntu 16.04 双系统安装详细教程_flyyufenfei的博客-CSDN博客_ubuntu系统</a><br><a href="https://zhuanlan.zhihu.com/p/143505691">手把手教你Windows Linux双系统的安装与卸载 - 知乎 (zhihu.com)</a><br><a href="https://blog.csdn.net/u012052268/article/details/77145427">安装Ubuntu Linux系统时硬盘分区最合理的方法_博客堂-CSDN博客_ubuntu分区</a>的评论区<br><a href="https://blog.csdn.net/xiaoyaotan_77/article/details/84837981">Windows+Manjaro双系统安装_xiaoyaotan_77的博客-CSDN博客_manjaro双系统</a></p>
</blockquote>
<ol>
<li><p>首先选择硬盘，机械盘sda，固态nvme，千万不要选择win所在的盘。</p>
</li>
<li><p>分区有三个选项：【1】并存安装【2】取代一个分区【3】抹除磁盘【4】手动分区，盗一张图：</p>
<p> <img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221739.png"></p>
<p> <strong>并存安装</strong>：lin的引导装到win的引导分区下<br> <strong>取代一个分区</strong>：格式化掉一个分区安装<br> <strong>抹除磁盘</strong>：格式化所有分区安装<br> <strong>手动分区</strong>：在手动分区安装</p>
</li>
<li><p>手动分区。<br> 新建分区-2048Mib-fat32-类型efi-标记/boot/efi-完成<br> 新建分区-剩余-ext4-类型/-标记/root</p>
</li>
<li><p>概览(见上图)-安装</p>
</li>
</ol>
<p>关于分区我只分了/和引导。相当于在win下单走一个C。如果是服务器，为了数据安全必须细化分区，个人桌面系统则不需要。开启timeshift定时快照即可。<br>/swap不需要，如果内存太小可以分出一个，公认建议两倍大小于内存。内存8G、16G的机器就没有必要分了。吃鸡都爆不了你的内存还交换个锤子。<br>/home随意，我从win下吸取的教学，不分区。希望在linux下不会打脸。<br>/boot包含引导，启动项和内核，我留了2G，主流建议是1G，如想多存几个内核可以留大点。对了，抹除磁盘安装默认留了300Mib。</p>
<p>虽然游戏软件和日用软件所需的性能完全不在一个维度，但总体来说，这是一个硬件性能过剩的时代。储存磁盘什么的，请大方点用吧，哪怕用坏了换新的也不贵。</p>
<h2 id="Pacman-amp-yay"><a href="#Pacman-amp-yay" class="headerlink" title="Pacman &amp; yay"></a>Pacman &amp; yay</h2><blockquote>
<p><a href="https://www.jianshu.com/p/47cce454f200">pacman命令详解 - 简书 (jianshu.com)</a><br><a href="https://www.jianshu.com/p/ea651cdc5530">Pacman常用命令 - 简书 (jianshu.com)</a><br><a href="https://printempw.github.io/setting-up-manjaro-linux/">Manjaro Linux 踩坑调教记录 - PRIN BLOG (printempw.github.io)</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -U string.pkg.tar.gz <span class="comment"># 从本地文件安装</span></span><br><span class="line">pacman -U http://www.example.com/repo/example.pkg.tar.xz  <span class="comment"># 安装一个远程包(不在pacman的源里)</span></span><br><span class="line"></span><br><span class="line">pacman -Su                  <span class="comment"># 直接升级系统</span></span><br><span class="line">pacman -Syu                 <span class="comment"># 升级整个系统，y 是更新数据库，yy 是强制更新，u 是升级软件</span></span><br><span class="line">pacman -Syyu                <span class="comment"># 同步仓库，强制升级</span></span><br><span class="line">pacman -Sc                  <span class="comment"># 清理当前未被安装的软件包缓存，位于/var/cache/pacman/pkg</span></span><br><span class="line">pacman -Scc                 <span class="comment"># 完全清理包缓存</span></span><br><span class="line">pacman -Qdt                 <span class="comment"># 列出所有不再作为依赖的软件包(孤立orphans)</span></span><br><span class="line">pacman -S $(pacman -Qq | grep -v “$(pacman -Qmq)”)  <span class="comment"># 重新安装系统所有软件包</span></span><br><span class="line"></span><br><span class="line">pacman -S package           <span class="comment"># 安装软件</span></span><br><span class="line">pacman -S extra/package     <span class="comment"># 安装不同仓库中的版本</span></span><br><span class="line">pacman -Ss string           <span class="comment"># 查找软件</span></span><br><span class="line">pacman -Si package          <span class="comment"># 显示软件的详细信息</span></span><br><span class="line"></span><br><span class="line">pacman -Rsn package         <span class="comment"># 删除软件，及其伴随依赖，及其配置文件</span></span><br><span class="line">pacman -R package           <span class="comment"># 删除单个软件，保留其全部已经安装的依赖关系</span></span><br><span class="line">pacman -Rs package          <span class="comment"># 删除指定软件，及其没有被其他已安装软件使用的依赖关系</span></span><br><span class="line">pacman -Rd package          <span class="comment"># 删除包时不检查依赖</span></span><br><span class="line">pacman -Rsc package         <span class="comment"># 删除包的同时，删除所有依赖这个软件包的程序</span></span><br><span class="line">pacman -Rn package          <span class="comment"># 删除软件包时要同时删除相应的配置文件</span></span><br><span class="line">pacman -Sw package          <span class="comment"># 只下载包，不安装</span></span><br><span class="line"></span><br><span class="line">pacman -Ql package          <span class="comment"># 获取已安装软件所包含的文件列表 | grep string</span></span><br><span class="line">pacman -Qs string           <span class="comment"># 查询已安装的软件包</span></span><br><span class="line">pacman -Qi package          <span class="comment"># 查询本地安装包的详细信息</span></span><br><span class="line">pacman -Qo /path/file       <span class="comment"># 查询某个文件对应的软件包</span></span><br><span class="line">pactree package             <span class="comment"># 显示软件的依赖树</span></span><br><span class="line">LANG=C pacman -Qi | sed -n ‘/^Name[^:]*: (.*)/&#123;s//1 /;x&#125;;/^Installed[^:]*: (.*)/&#123;s//1/;H;x;s/n//;p&#125;’ | sort -nk2    <span class="comment"># 获取本地软件包和它们大小的一个已排序清单列表</span></span><br><span class="line"></span><br><span class="line">IgnorePkg = package         <span class="comment"># 跳过升级软件包</span></span><br><span class="line">IgnoreGroup = group         <span class="comment"># 跳过升级软件包组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># yay同上</span></span><br><span class="line">yay package                 <span class="comment"># 从 AUR 搜索选择安装软件包</span></span><br><span class="line">yay -S package              <span class="comment"># 从 AUR 安装软件包</span></span><br><span class="line">yay -Rns package            <span class="comment"># 删除包</span></span><br><span class="line">yay -Syu                    <span class="comment"># 升级所有已安装的包</span></span><br><span class="line">yay -c                      <span class="comment"># 卸载所有无用的依赖，类似apt autoremove</span></span><br><span class="line">yay -Ps                     <span class="comment"># 打印系统统计信息</span></span><br></pre></td></tr></table></figure>

<p><strong>加速AUR软件包构建（可选）</strong></p>
<p>默认情况下 <code>makepkg</code> 构建 AUR 包时会启用压缩，构建完了安装又要再解压一次，如果只是自己机器上使用的话没必要（大软件包压缩很慢）。<br>设置构建包时不进行压缩：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sed -i <span class="string">&quot;s/PKGEXT=&#x27;.pkg.tar.xz&#x27;/PKGEXT=&#x27;.pkg.tar&#x27;/g&quot;</span> /etc/makepkg.conf</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><div class="note info"><p>如果pacman里安装失败就用yay安装，我有些包源记混了。</p>
</div>

<h3 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h3><blockquote>
<p><a href="https://www.cnblogs.com/Jaywhen-xiang/p/11561661.html">win10环境下安装manjaro kde（双系统） - Jaywhenxiang - 博客园 (cnblogs.com)</a><br><a href="https://mrswolf.github.io/zh-cn/2019/05/24/manjaro%E8%B8%A9%E5%9D%91%E8%AE%B0/">manjaro踩坑记 - swolf的博客 (mrswolf.github.io)</a></p>
</blockquote>
<p>开机后有一个引导页面，提供了开箱软件安装选择。我只需要VLC和timeshift。（以后卸载火狐似乎系统滚动的时候会帮你装回来，否则需要额外进行配置；此时卸载则避免滚回预装软件的情况）</p>
<p><strong>删除文件</strong></p>
<p><code>alias rm=&quot;rm -iv&quot;</code></p>
<ul>
<li><p><strong>基础方案一</strong>：自己巧用alias自定命令给终端删除加保险</p>
<blockquote>
<p><a href="https://blog.csdn.net/itodouble/article/details/53503570">Linux下命令行删除到回收站_搬砖-CSDN博客</a></p>
</blockquote>
<ol>
<li><p>删除文件<br> <code>alias del=&#39;mv -t ~/.local/share/Trash/files --backup=t&#39;</code></p>
</li>
<li><p><strong>rl</strong>命令，查看回收站的内容；<strong>ur</strong>命令，恢复上一步的删除命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> rl=<span class="string">&#x27;ls ~/.local/share/Trash/files&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ur=undelfile</span><br><span class="line"><span class="function"><span class="title">undelfile</span></span>()&#123;</span><br><span class="line">  mv -i ~/.<span class="built_in">local</span>/share/Trash/files/<span class="variable">$@</span> ./</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>进阶方案二</strong>：直接白嫖 trash-cli 项目。等后续系统准备完毕后 <code>pip install trash-cli</code></p>
<blockquote>
<p><a href="https://github.com/andreafrancia/trash-cli">andreafrancia/trash-cli: Command line interface to the freedesktop.org trashcan. (github.com)</a></p>
</blockquote>
</li>
</ul>
<p><strong>更改镜像源</strong></p>
<p><code>sudo pacman-mirrors -c China -m rank</code></p>
<p>弹窗，时间表示同步周期。</p>
<p><strong>中文社区源</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/pacman.conf</span><br><span class="line"><span class="comment"># &gt;&gt;</span></span><br><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = http://mirrors.163.com/archlinux-cn/<span class="variable">$arch</span></span><br><span class="line"><span class="comment"># Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch # 清华源</span></span><br><span class="line"><span class="comment"># ^x y</span></span><br></pre></td></tr></table></figure>

<p>添加archlinuxcn后需要安装钥匙环<br><code> sudo pacman -Sy archlinuxcn-keyring</code><br>开启 pacman 和 yay 的彩色输出<br><code>sudo sed -i &quot;s/#Color/Color/g&quot; /etc/pacman.conf</code></p>
<p><strong>系统更新</strong></p>
<p><code>sudo pacman -Syu</code></p>
<p><strong>pip换源</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.config/pip</span><br><span class="line">nano ~/.config/pip/pip.conf</span><br><span class="line"><span class="comment"># &gt;&gt; </span></span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="comment"># ^x y</span></span><br></pre></td></tr></table></figure>

<p><strong>开机自动挂载分区</strong></p>
<blockquote>
<p><a href="https://wiki.archlinux.org/index.php/fstab">https://wiki.archlinux.org/index.php/fstab</a></p>
</blockquote>
<p>对于其它磁盘，文件管理器点击进入磁盘后系统会将其挂载到/run/media/[your_user_name]/[disk_name]文件下；我需要开机自动挂载到固定挂载点，从而给图片、Code、音乐、等文件夹建立快捷方式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /mnt/Share  <span class="comment"># 建立挂载点文件夹</span></span><br><span class="line">sudo mount | grep sda   <span class="comment"># 查看分区号，我的是sda1</span></span><br><span class="line">sudo nano /etc/fstab</span><br><span class="line"><span class="comment"># 将分区/sda1挂载到新建的文件夹/mnt/Share </span></span><br><span class="line"><span class="comment"># &gt;&gt; </span></span><br><span class="line">/dev/sda1   /mnt/Share exfat   rw,users  0 0 </span><br><span class="line"><span class="comment"># ^S ^X</span></span><br></pre></td></tr></table></figure>

<p>挂载成功后，分区根目录下有两个固定文件，<code>$RECYCLE.BIN</code>和<code>System Volume Information</code>，win默认为每个分区建立回收站文件夹并隐藏，win的隐藏方式和lin不一致，不建议在lin下修改这两个文件。如想彻底删掉这两个文件，win下回收站-高级，去除此卷的回收站功能，删除文件将不会将其移到回收站，而是直接删除。不建议。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221750.png"></p>
<p><strong>AUR包管理</strong></p>
<p><code>sudo pacman -S yay base-devel</code><br>yay是aur仓库包管理工具，base-devel是打包工具。<br>没有打包工具可能导致后续从aur仓库源码打包软件安装时出现以下错误：</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221801.png"></p>
<p><strong>科学上网</strong></p>
<p><code>yay -S v2ray qv2ray</code></p>
<blockquote>
<p>qv2ray介绍：<a href="https://qv2ray.net/getting-started/step1.html">下载 Qv2ray | Qv2ray</a></p>
</blockquote>
<p>qv2ray启动失败，双系统时间同步：<br><code>timedatectl set-local-rtc true</code>或者图形界面：打开本地时区的硬件时钟<br><code>timedatectl set-local-rtc false</code>还原</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221810.png"></p>
<p><strong>改内核</strong></p>
<p>我要长期支持版。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221824.png"></p>
<p><strong>输入法</strong></p>
<p>采用fcitx5 + rime</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/114296129">Manjaro-KDE安装配置全攻略 - 知乎 (zhihu.com)</a><br>rime输入方案<a href="https://github.com/fkxxyz/rime-cloverpinyin/wiki/linux">linux · fkxxyz/rime-cloverpinyin Wiki (github.com)</a><br>中文维基词库配置<a href="https://zhuanlan.zhihu.com/p/287774005">fcitx(5)+rime的畅快体验 - 知乎 (zhihu.com)</a><br>主题美化<a href="https://github.com/hosxy/Fcitx5-Material-Color">hosxy/Fcitx5-Material-Color: 一款使用Material Design 配色的 fcitx5 皮肤</a><br>nord主题<a href="https://github.com/ayamir/fcitx5-nord">ayamir/fcitx5-nord: Fcitx5 theme based on Nord color. (github.com)</a><br>Gruvbox主题<a href="https://github.com/ayamir/fcitx5-gruvbox">ayamir/fcitx5-gruvbox: Fcitx5 Gruvbox Skin (github.com)</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装fcitx5输入法框架，全选</span></span><br><span class="line">yay -S fcitx5-im  </span><br><span class="line"><span class="comment"># 配置fcitx5的环境变量</span></span><br><span class="line">sudo nano ~/.pam_environment </span><br><span class="line"><span class="comment"># &gt;&gt;</span></span><br><span class="line">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class="line">XMODIFIERS    DEFAULT=\@im=fcitx</span><br><span class="line">SDL_IM_MODULE DEFAULT=fcitx</span><br><span class="line"><span class="comment"># ^x y</span></span><br><span class="line"><span class="comment"># 安装fcitx5-rime输入法引擎</span></span><br><span class="line">yay -S fcitx5-rime </span><br><span class="line"><span class="comment"># 安装rime-cloverpinyin输入方案</span></span><br><span class="line">yay -S rime-cloverpinyin </span><br><span class="line">sudo mkdir -p ~/.<span class="built_in">local</span>/share/fcitx5/rime</span><br><span class="line">nano ~/.<span class="built_in">local</span>/share/fcitx5/rime/default.custom.yaml</span><br><span class="line"><span class="comment"># &gt;&gt;</span></span><br><span class="line">patch:</span><br><span class="line">  <span class="string">&quot;menu/page_size&quot;</span>: 5</span><br><span class="line">  schema_list:</span><br><span class="line">    - schema: clover</span><br><span class="line"><span class="comment"># ^x y </span></span><br><span class="line"><span class="comment"># 安装中文维基百科词库</span></span><br><span class="line">yay -S fcitx5-pinyin-zhwiki-rime  </span><br><span class="line"><span class="comment"># 配置主题</span></span><br><span class="line">yay -S fcitx5-material-color </span><br></pre></td></tr></table></figure>

<p>重启。改下配置，win下激活ctrl+shift，lin下激活ctrl+space。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221837.png"></p>
<p><strong>浏览器</strong><br><code>yay -S google-chrome</code></p>
<p><strong>显卡</strong></p>
<blockquote>
<p><a href="https://www.v2ex.com/t/630119">manjaro 安装 Nvidia 显卡驱动， Intel + Nvidia 双显卡解决方案。（已解决） - V2EX</a></p>
</blockquote>
<p>intel+nvidia默认使用ubuntu的prime驱动方案，如想手动更改驱动，看上面。<br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221845.png"></p>
<p><strong>卸载不需要的软件</strong></p>
<p>善用<code>sudo pacman -Qs string</code> , <code>sudo pacman -Rns package </code>自己看着办。</p>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221854.png"></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221906.png"></div></div></div>

<h3 id="PPPOE拨号"><a href="#PPPOE拨号" class="headerlink" title="PPPOE拨号"></a>PPPOE拨号</h3><h4 id="rp-pppoe"><a href="#rp-pppoe" class="headerlink" title="rp-pppoe"></a><del>rp-pppoe</del></h4><blockquote>
<p>楔子，<a href="https://zhuanlan.zhihu.com/p/72025955">Manjaro安装与初始化 - 知乎 (zhihu.com)</a><br>ppp原理，<a href="https://wiki.archlinux.org/index.php/Ppp">arch wiki - ppp</a><br>对各发行版的讲解，<a href="https://vvl.me/2017/09/Linux-PPPoE/">在 Linux 上拨号上网 (PPPoE)</a><br>大致步骤，<a href="https://blog.csdn.net/chenyiyue/article/details/81161004">arch linux 配置pppoe，实现ADSL拨号上网</a><br>硬核拨号，<a href="https://blog.51cto.com/11396852/1894255">pppoe拨号上网安装Arch Linux</a></p>
</blockquote>
<p>如果是校园网，一般有专门的拨号软件，多数不会适配linux，需要手动拨号。比如我校的拨号软件为netkeeper，无linux版。win10可以无需软件直接网络连接拨号，建议先用win10尝试，成功后确认账号密码无误再去linux。</p>
<ol>
<li><p>电信宽带，短信发送460到中国电信10001，查看宽带帐号和密码。</p>
</li>
<li><p>kde查看网络连接，或者ipconfig。<br><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221919.png"></p>
</li>
<li><p>DNS：202.101.224.69；网卡设备eno1。</p>
</li>
<li><p>命令行快速拨号软件<br><code>yay -S rp-pppoe</code></p>
</li>
</ol>
<p><strong>关于：manjaro下的rp-pppoe</strong></p>
<p>进入配置选项：pppoe-setup<br>开始连接：pppoe-start<br>断开连接：pppoe-stop<br>查看状态：pppoe-status</p>
<p>关闭网卡：ifconfig 网卡 down<br>开启网卡：ifconfig 网卡 up</p>
<p><strong>一次完整的拨号过程：</strong></p>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">sudo pppoe-setup </span><br><span class="line">USER NAME：宽带帐号</span><br><span class="line">INTERFACE：网卡号</span><br><span class="line">demand：no（默认）</span><br><span class="line">DNS：上面查看的DNS地址</span><br><span class="line">PASSWORD：宽带密码</span><br><span class="line">FIREWALLING：<span class="number">0</span>（NONE）</span><br><span class="line">adjust configuration files ? y</span><br><span class="line">sudo pppoe-<span class="built_in">start</span> </span><br><span class="line">connected!</span><br></pre></td></tr></table></figure>

<p>最后保存配置文件时，每次setup将重写配置文件，上一份配置文件拷贝到-bak，以下是文件位置：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Accept these settings and adjust configuration files (y/n)? y</span><br><span class="line">Adjusting /etc/ppp/pppoe.conf</span><br><span class="line">Adjusting /etc/resolv.conf</span><br><span class="line">(But first backing it up to /etc/resolv.conf-bak)</span><br><span class="line">Adjusting /etc/ppp/pap-secrets and /etc/ppp/chap-secrets</span><br><span class="line">(But first backing it up to /etc/ppp/pap-secrets-bak)</span><br><span class="line">(But first backing it up to /etc/ppp/chap-secrets-bak)</span><br></pre></td></tr></table></figure>

<p>使用rp-pppoe拨号连接成功，但是上不了网，tmd，怪起来了。网上相关帖子少，自己又太菜，找找其它的办法。</p>
<h4 id="openkeeper"><a href="#openkeeper" class="headerlink" title="openkeeper"></a>openkeeper</h4><p>查了一下netkeeper for linux，又看到一篇帖子，重庆那边电信也是用netkeeper作为校园客户端，有大佬写了一个拨号程序openkeeper作为netkeeper的替代品。</p>
<blockquote>
<p><a href="https://blog.csdn.net/haoxiangtianxia/article/details/20294381">重邮等高校在linux下使用openkeeper代替netkeeper连接网络</a><br>项目地址：<a href="https://github.com/Eventide/openkeeper-cli">Eventide/openkeeper-cli</a></p>
</blockquote>
<p>项目不提供现成包，其它linux发行系的安装需要make install，aur查了一下，arch系已经有人打包好了。</p>
<p><code>yay openkeeper</code> ，只有一个包，直接安装。感谢这位打包侠。</p>
<p>该软件十分简洁，man了一下openkeeper-cli，没有手册页条目哈哈。软件命令详情看readme。</p>
<blockquote>
<p><strong>Install</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/Eventide/openkeeper-cli.git</span><br><span class="line">$ <span class="built_in">cd</span> openkeeper-cli</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span></span><br><span class="line">$ make </span><br><span class="line">$ sudo make install </span><br></pre></td></tr></table></figure>

<p><strong>Use</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ok-config <span class="comment"># 配置连接</span></span><br><span class="line">sudo ok        <span class="comment"># 连接</span></span><br><span class="line">sudo ok-stop   <span class="comment"># 断开连接</span></span><br></pre></td></tr></table></figure>
</blockquote>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210305191353.png"></div><div class="group-picture-column"><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210305191411.png"></div></div></div>

<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><blockquote>
<p><a href="https://wiki.archlinux.org/index.php/Fonts_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#Microsoft_%E5%AD%97%E4%BD%93">Fonts (简体中文) - ArchWiki (archlinux.org)</a></p>
</blockquote>
<p><strong>默认字体方案</strong></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221932.png"></p>
<h4 id="开源字体"><a href="#开源字体" class="headerlink" title="开源字体"></a><strong>开源字体</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文泉驿</span></span><br><span class="line">sudo pacman -S wqy-microhei wqy-bitmapfont wqy-zenhei wqy-microhei-lite</span><br><span class="line"><span class="comment"># 爱逗比</span></span><br><span class="line">sudo pacman -S adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts</span><br><span class="line"><span class="comment"># 西文</span></span><br><span class="line">sudo pacman -S ttf-dejavu noto-fonts noto-fonts-extra noto-fonts-emoji noto-fonts-cjk monaco</span><br></pre></td></tr></table></figure>

<h4 id="开源Nerd字体"><a href="#开源Nerd字体" class="headerlink" title="开源Nerd字体"></a><strong>开源Nerd字体</strong></h4><p>这里选择jb家的字体：</p>
<blockquote>
<p><a href="https://github.com/ryanoasis/nerd-fonts/releases">Releases · ryanoasis/nerd-fonts (github.com)</a> –下载-&gt; <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/JetBrainsMono.zip">JetBrainsMono.zip</a></p>
</blockquote>
<p>解压下载完的字体压缩包，假设目录名是JetBrainsMono</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.<span class="built_in">local</span>/share/fonts</span><br><span class="line">cp -vr JetBrainsMono/ ~/.<span class="built_in">local</span>/share/fonts</span><br><span class="line">fc-cache -vf</span><br></pre></td></tr></table></figure>

<p>konsole把字体改成JetBrainsMono Nerd Font</p>
<h4 id="win10字体"><a href="#win10字体" class="headerlink" title="win10字体"></a><strong>win10字体</strong></h4><blockquote>
<p><a href="https://blog.csdn.net/sinat_33528967/article/details/93380729">archlinux使用Windows字体及相关配置_ixum-CSDN博客</a></p>
</blockquote>
<p>windows字体（C:\Windows\Fonts）拷贝到linux（winfonts_path/）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存放路径</span></span><br><span class="line">sudo mkdir -p /usr/share/fonts/winfonts/</span><br><span class="line">sudo cp winfonts_path/* /usr/share/fonts/winfonts/</span><br><span class="line"><span class="built_in">cd</span> /usr/share/fonts/winfonts/</span><br><span class="line">rm *.fon</span><br><span class="line"><span class="comment"># 更新缓存</span></span><br><span class="line">sudo mkfontscale</span><br><span class="line">sudo mkfontdir</span><br><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure>

<p><strong>我的字体方案</strong></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301231416.png"></p>
<h3 id="KDE"><a href="#KDE" class="headerlink" title="KDE"></a>KDE</h3><blockquote>
<p><a href="https://store.kde.org/browse/cat/">KDE Store</a><br><a href="https://www.pling.com/p/1398841/">pling.com</a></p>
</blockquote>
<h4 id="dock栏"><a href="#dock栏" class="headerlink" title="dock栏"></a><strong>dock栏</strong></h4><p><code>sudo pacman -S latte-dock</code></p>
<h4 id="kde部件"><a href="#kde部件" class="headerlink" title="kde部件"></a><strong>kde部件</strong></h4><p><code>Translator</code></p>
<p>翻译部件。小部件获取，商店在线 </p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301221941.png"></p>
<p><code>Netspeed Widget</code></p>
<p>网速部件。小部件获取，商店在线。</p>
<p><code>Thermal Monitor</code></p>
<p>温度部件。小部件获取，商店在线。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301222001.png"></p>
<p><code>Application title</code></p>
<p>全局菜单的活动应用。小部件获取，商店在线。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301222011.png"></p>
<p><code>Materia Dark KDE</code></p>
<p>下拉终端Yakuake主题美化。Yakuake主题获取，商店在线。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301222020.png"></p>
<p><code>bl1nk konsole color schemed</code></p>
<p>终端颜色主题。终端配置，获取更多，商店在线。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301222029.png"></p>
<h4 id="平铺kde"><a href="#平铺kde" class="headerlink" title="平铺kde"></a><strong>平铺kde</strong></h4><blockquote>
<p>演示：<a href="https://www.youtube.com/watch?v=N1Bg-H9Lpzs&feature=youtu.be">Grid-Tiling KWin - YouTube</a><br>安装：<a href="https://opensuse.bwsl.wang/opensuse/%E5%B9%B3%E9%93%BAKDE.html">平铺KDE - openSUSE使用记录 (bwsl.wang)</a></p>
</blockquote>
<p>半自动部署：</p>
<ol>
<li>从项目地址下载项目并解压。设解压的路径为<code>path</code>。</li>
<li>安装<code>kpackagetool5 --type KWin/Script -i path</code></li>
<li><code>mkdir -p ~/.local/share/kservices5</code></li>
<li><code>cp path/metadata.desktop/ ~/.local/share/kservices5/kwin-script-grid-tiling.desktop</code></li>
<li>安装完成，前往<code>KDE设置—窗口管理—KWin脚本</code>中激活<code>Grid-Tiling</code>即可。</li>
</ol>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301222036.png"></p>
<h4 id="kde主题"><a href="#kde主题" class="headerlink" title="kde主题"></a>kde主题</h4><blockquote>
<p><a href="https://segmentfault.com/a/1190000023939494">KDE美化—Manjaro KDE - SegmentFault 思否</a><br><a href="https://github.com/cathaysia/awesome_kde_theme/">cathaysia/awesome_kde_theme: 一系列美观的kde主题 (github.com)</a></p>
</blockquote>
<p><a href="https://www.pling.com/p/1398841/">WhiteSur</a>全局主题</p>
<blockquote>
<p><a href="https://github.com/vinceliuice/WhiteSur-kde">vinceliuice/WhiteSur-kde: MacOS big sur theme for kde plasma (github.com)</a></p>
</blockquote>
<p>kde设置里下载主题不走qv2ray设置的全局代理，像图标这类的大文件不要从设置里下载。建议从github下载按照说明步骤安装</p>
<p><a href="https://www.pling.com/p/1355701/">McMojave cursors</a>鼠标</p>
<blockquote>
<p><a href="https://github.com/vinceliuice/McMojave-cursors">vinceliuice/McMojave-cursors: McMojave cursors for linux desktops (github.com)</a></p>
</blockquote>
<p>图标：原生</p>
<h4 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h4><blockquote>
<p>Manjaro Linux 踩坑调教记录 - PRIN BLOG (printempw.github.io)</p>
</blockquote>
<p><strong>home英文</strong></p>
<p>将用户目录下的中文文件夹修改为英文</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S xdg-user-dirs-gtk</span><br><span class="line"><span class="built_in">export</span> LANG=en_US</span><br><span class="line">xdg-user-dirs-gtk-update</span><br><span class="line"><span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>

<p>窗口提示语言更改，更新名称即可<br>重启电脑，如果提示语言更改，保留旧的名称即可</p>
<p><strong>笔记本合盖行为</strong></p>
<p>外接显示器时合盖也不挂起（睡眠）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/logind.conf</span><br><span class="line">HandleLidSwitch=<span class="built_in">suspend</span></span><br><span class="line">HandleLidSwitchExternalPower=<span class="built_in">suspend</span></span><br><span class="line">HandleLidSwitchDocked=ignore</span><br></pre></td></tr></table></figure>

<p><strong>鼠标滚轮速度</strong></p>
<blockquote>
<p><a href="https://wiki.archlinux.org/index.php/IMWheel">IMWheel - ArchWiki (archlinux.org)</a><br><a href="https://printempw.github.io/setting-up-manjaro-linux/">Manjaro Linux 踩坑调教记录 - PRIN BLOG (printempw.github.io)</a></p>
</blockquote>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p><strong>timeshift</strong></p>
<p>系统自带。设置后开机触发快照。保留设置存档数量，溢出存档数量删除旧快照。</p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210301222055.png"></p>
<p><strong>wps</strong><br><code>yay -S wps-office wps-office-mui-zh-cn ttf-wps-fonts </code> 中文选择cn<br>若使用fcitx5的话，需要修改<code>/usr/bin/wps</code>和<code>/usr/bin/wpp</code>，将下面这行代码加到<strong>文件开头</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /usr/bin/wps</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=<span class="string">&quot;fcitx5&quot;</span></span><br><span class="line">^x y</span><br><span class="line">sudo nano /usr/bin/wpp</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=<span class="string">&quot;fcitx5&quot;</span></span><br><span class="line">^x y</span><br></pre></td></tr></table></figure>

<p><strong>flameshot</strong><br><code>yay -S flameshot</code></p>
<p><strong>typora</strong><br><code>yay -S typora</code></p>
<p><strong>picgo</strong><br><code>yay picgo </code>       可选GUI的picgo和核心picgo-core</p>
<p><strong>proxychains</strong><br>命令行程序代理（<a href="https://github.com/rofl0r/proxychains-ng/issues/199#issuecomment-340183417">对 Go 编写的程序无效</a>）</p>
<blockquote>
<p><a href="https://github.com/rofl0r/proxychains-ng">rofl0r/proxychains-ng: proxychains ng (new generation) - a preloader which hooks calls to sockets in dynamically linked programs and redirects it through one or more socks/http proxies. continuation of the unmaintained proxychains project. </a></p>
</blockquote>
<p><strong>motrix</strong><br><code>yay -S motrix</code>     下种子</p>
<p><strong>lx-music</strong></p>
<p><code>yay lx-music</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yay lx-music   </span><br><span class="line">3 aur/lx-music 1.7.1-2 (+0 0.00) (已安装)</span><br><span class="line">    一个基于 electron 的音乐软件</span><br><span class="line">2 aur/lx-music-desktop-appimage 1.7.1-1 (+0 0.00) (孤立) </span><br><span class="line">    A music assistant based on Electron + Vue.</span><br><span class="line">1 aur/lx-music-desktop-bin 1.7.1-1 (+2 0.78) </span><br><span class="line">    A music software based on Electron + Vue. 一个基于 Electron + Vue 开发的音乐软件。</span><br><span class="line">==&gt; 要安装的包 (示例: 1 2 3, 1-3 或 ^4)</span><br><span class="line">==&gt; 3</span><br></pre></td></tr></table></figure>

<h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><blockquote>
<p><a href="https://yqsas.com/2019/03/03/manjaro-in-t480s/">折腾之 Manjaro 安装使用指北 - yqsas的博客 | Yqsas Blog</a><br><a href="https://zhuanlan.zhihu.com/p/114296129">Manjaro-KDE安装配置全攻略 - 知乎 (zhihu.com)</a></p>
</blockquote>
<p><strong>命令行必备</strong></p>
<p><code>sudo pacman -S vim tree</code></p>
<p><strong>装逼</strong></p>
<p><code>sudo pacman -S lolcat neofetch</code></p>
<p><strong>命令速记</strong></p>
<p>tldr(Too Long Don’t Read)<br><code>yay -S tldr</code> 或者 <code>pip install --user tldr</code></p>
<p><strong>ranger</strong></p>
<p><code>sudo pacman -S ranger</code></p>
<blockquote>
<p>快捷键：<a href="http://www.mikewootc.com/wiki/linux/usage/ranger_file_manager.html">linux终端文件管理器ranger使用详解 (mikewootc.com)</a></p>
</blockquote>
<p><strong>zsh</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /usr/bin/zsh  </span><br><span class="line"><span class="comment"># 修改默认shell为zsh</span></span><br><span class="line"><span class="comment"># (可选)为github相关域名添加DNS解析</span></span><br><span class="line">sudo nano /etc/hosts</span><br><span class="line">&gt;&gt;</span><br><span class="line"><span class="comment"># GitHub Start</span></span><br><span class="line">151.101.64.133 raw.githubusercontent.com</span><br><span class="line"><span class="comment"># GitHub End</span></span><br><span class="line">^x y</span><br><span class="line"><span class="built_in">source</span> /etc/hosts</span><br><span class="line"><span class="comment"># (可选) curl 使用代理</span></span><br><span class="line">curl -x <span class="string">&quot;127.0.0.1:7890&quot;</span></span><br><span class="line"><span class="comment"># 安装ohmyzsh</span></span><br><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line"><span class="comment"># zsh-completions插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-completions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-completions</span><br><span class="line"><span class="comment"># zsh-syntax-highlighting插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="comment"># autosuggestions插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"><span class="comment"># (可选，命令预览，拖慢zsh速度)incr插件</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/makeitjoe/incr.zsh <span class="variable">$ZSH_CUSTOM</span>/plugins/incr</span><br><span class="line"><span class="comment"># 启用插件</span></span><br><span class="line">nano ~/.zshrc</span><br><span class="line"><span class="comment"># plugins=(git) -&gt;</span></span><br><span class="line">plugins=(git zsh-syntax-highlighting zsh-autosuggestions zsh-completions docker docker-compose sudo extract)</span><br><span class="line"><span class="comment"># 主题 https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span></span><br><span class="line">theme=ys</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="built_in">autoload</span> -U compinit &amp;&amp; compinit</span><br></pre></td></tr></table></figure>

<p>终端-常规-命令-<code>/bin/zsh</code></p>
<p>插件说明：<br><strong>sudo</strong>是ohmyzsh自带的插件，功能是在你输入的命令的开头添加sudo ，双击Esc<br><strong>extract</strong>也是自带插件，不用记不同文件的解压命令，extract +你要解压的文件名</p>
<p><strong>终端文件图标</strong></p>
<blockquote>
<p>演示：<a href="https://www.bilibili.com/video/BV1vx411q731/">GNOME 3.26 | 终端显示文件类型图标_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a><br>项目地址：<a href="https://github.com/athityakumar/colorls/tree/v1.4.3">athityakumar/colorls at v1.4.3 (github.com)</a></p>
</blockquote>
<p><strong>终端高级编辑器</strong></p>
<blockquote>
<p>VimPlus：<a href="https://github.com/chxuan/vimplus">chxuan/vimplus: An automatic configuration program for vim (github.com)</a><br>或者<br>Emacs：<a href="https://github.com/hlissner/doom-emacs">hlissner/doom-emacs: An Emacs framework for the stubborn martian hacker (github.com)</a></p>
</blockquote>
<h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p><strong>java</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S jdk-openjdk</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<p><code>yay -S visual-studio-code-bin</code>    vscode<br><code>yay -S postman-bin</code>   postman<br><code>yay -S jetbrains-toolbox</code>  jb全家桶<br><code>yay -S wechat-devtools</code>   微信开发者工具</p>
<p><strong>miniconda</strong></p>
<blockquote>
<p><a href="https://mrswolf.github.io/zh-cn/2019/05/24/manjaro%E8%B8%A9%E5%9D%91%E8%AE%B0/">manjaro踩坑记 - swolf的博客 (mrswolf.github.io)</a></p>
</blockquote>
<p>miniconda管理环境并安装python相关package。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">sh Miniconda3-latest-Linux-x86_64.sh </span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑 ~/.bash_profile,在最后添加如下环境变量（注意PATH要在前面）</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/miniconda3/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑完成后</span></span><br><span class="line"><span class="built_in">source</span> .bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># miniconda的pypi换源</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入base环境或新建的python环境</span></span><br><span class="line"><span class="built_in">source</span> activate</span><br><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p><strong>docker</strong></p>
<blockquote>
<p><a href="https://www.jianshu.com/p/5e7726d1cb16">Arch Linux 2020-07 安装kde桌面环境 - 简书 (jianshu.com)</a></p>
</blockquote>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">sudo pacman -S docker  <span class="comment">//并尽可能安装可选依赖</span></span><br><span class="line">sudo gpasswd -a $(whoami) docker   <span class="comment">//不用sudo即可运行docker</span></span><br><span class="line">sudo systemctl restart docker  <span class="comment">//重启docker</span></span><br><span class="line">sudo echo <span class="string">&quot;&#123;&quot;</span>registry-mirrors<span class="string">&quot;: [&quot;</span>http:<span class="comment">//hub-mirror.c.163.com&quot;]&#125;&quot; &gt;&gt; /etc/docker/daemon.json  //写入网易镜像源</span></span><br></pre></td></tr></table></figure>

<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><strong>nodejs</strong></p>
<blockquote>
<p><a href="https://mrswolf.github.io/zh-cn/2019/05/24/manjaro%E8%B8%A9%E5%9D%91%E8%AE%B0/#%E5%AE%89%E8%A3%85nodejs">manjaro踩坑记 - swolf的博客 (mrswolf.github.io)</a></p>
</blockquote>
<p>nodejs - hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装nvm版本管理（直接安装nodejs会有权限错误）</span></span><br><span class="line">yay -S nvm</span><br><span class="line"><span class="built_in">source</span> /usr/share/nvm/init-nvm.sh</span><br><span class="line">nvm install node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装npm和hexo</span></span><br><span class="line">sudo pacman -S npm</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org  <span class="comment"># 淘宝源，下载大多数软件可加速</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/  <span class="comment"># 改回官方源，小部分软件还是得靠官方源</span></span><br></pre></td></tr></table></figure>

<p>复制博客文件到linux下，配置git。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;user_name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;user_email&quot;</span></span><br><span class="line">git config user.name  <span class="comment"># 查看回显</span></span><br><span class="line">git config user.email</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;user_email&quot;</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub </span><br><span class="line"><span class="comment"># copy cat回显</span></span><br></pre></td></tr></table></figure>

<p>github - Setting - SSH and GPG keys - new SSH key - name/cat回显 - 确定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (yes/no/[fingerprint])? yes</span><br><span class="line">Hi mednight4! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string">sudo hexo d -g</span></span><br></pre></td></tr></table></figure>

<p>注意一下git的分支问题：<a href="https://helloliwen.github.io/870ed150.html">使用hexo，如果换了电脑怎么保留配置和更新博客</a>。</p>
<p>在此另补充一个git错误：<br>OpenSSL SSL_read: Connection was  reset, errno 10054：服务器的SSL证书没有经过第三方机构的签署。<br>关闭权限认证即可。<br><code>git config --global http.sslVerify &quot;false&quot;</code></p>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210302124857.png"></p>
<h4 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h4><blockquote>
<p><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p>
</blockquote>
<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210305210422.png"></p>
<h4 id="后续补充"><a href="#后续补充" class="headerlink" title="后续补充"></a>后续补充</h4><p>两个系统nodejs版本跨度太大可能会导致博客环境炸掉，而linux滚完的nodejs一般都是最新的…尽量在统一的环境下generate-deploy吧。</p>
<h2 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h2><h3 id="软件-1"><a href="#软件-1" class="headerlink" title="软件"></a>软件</h3><p><strong>软件集整合推荐</strong></p>
<blockquote>
<p><a href="https://www.biaodianfu.com/install-manjaro-linux.html#comment-161818">Manjaro Linux 安装与使用 – 标点符 (biaodianfu.com)</a><br><a href="https://yqsas.com/2019/03/03/manjaro-in-t480s/">折腾之 Manjaro 安装使用指北 - yqsas的博客 | Yqsas Blog</a><br><a href="https://juejin.cn/post/6844903910168068109">Manjaro 安装体验小结 (juejin.cn)</a><br><a href="https://blog.kaaass.net/archives/1205">Arch Linux (Manjaro) 配置与常用软件安装指南 | KAAAsS’s blog</a><br><a href="https://blog.csdn.net/weixin_30687587/article/details/97824447?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">archlinux/manjaro常用软件推荐_weixin_30687587的博客-CSDN博客</a><br><a href="https://zhuanlan.zhihu.com/p/89847601">KDE美化之路 - 知乎 (zhihu.com)</a></p>
</blockquote>
<p><strong>deepin全家桶</strong></p>
<p>喜欢dde桌面可入。</p>
<blockquote>
<p><a href="https://www.biaodianfu.com/install-manjaro-linux.html#comment-161818">Manjaro Linux 安装与使用 – 标点符 (biaodianfu.com)</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S deepin-movie </span><br><span class="line">sudo pacman -S deepin-music</span><br><span class="line">sudo pacman -S deepin-calculator</span><br><span class="line">sudo pacman -S deepin-file-manager</span><br><span class="line">sudo pacman -S deepin-calendar</span><br><span class="line">sudo pacman -S deepin-draw</span><br><span class="line">sudo pacman -S deepin-image-viewer</span><br><span class="line">sudo pacman -S deepin-picker</span><br><span class="line">sudo pacman -S deepin-screen-recorder</span><br><span class="line">sudo pacman -S deepin-screenshot</span><br><span class="line">sudo pacman -S deepin-system-monitor</span><br><span class="line">sudo pacman -S deepin-voice-recorder</span><br><span class="line">sudo pacman -S deepin-editor </span><br><span class="line">yay -S deepin-wine-tim</span><br><span class="line">yay -S deepin-wine-wechat</span><br><span class="line">yay -S deepin.com.thunderspeed</span><br><span class="line">yay -S deepin-wine-qq</span><br><span class="line">yay -S electron-wechat</span><br></pre></td></tr></table></figure>

<p><strong>QQ（建议）</strong></p>
<p>哪个有用试哪个</p>
<ul>
<li><p><del><code>yay -S deepin.com.qq.office</code> （2021.3.5测试：版本过低，无法使用)</del></p>
<p>  或者</p>
</li>
<li><p><code>yay -S deepin-wine-qq</code> <a href="https://github.com/countstarlight/deepin-wine-qq-arch">安装介绍</a></p>
<p>  或者</p>
</li>
<li><p><code>yaourt -S  aur/com.qq.tim.spark   </code><br>  <a href="https://printempw.github.io/setting-up-manjaro-linux/">Manjaro Linux 踩坑调教记录 - PRIN BLOG (printempw.github.io)</a></p>
</li>
</ul>
<p><strong>以下是第三个：</strong><br>修复 TIM 字体发虚<br><code>yay -S lib32-freetype2-infinality-ultimate</code><br>Wine HiDPI 屏缩放<br><code>env WINEPREFIX=&quot;$HOME/.deepinwine/Deepin-TIM&quot; deepin-wine winecfg</code></p>
<p><strong>deepin-wine-tim安装（兼容性问题，不建议）</strong></p>
<p>我试装了yay默认提供的tim，出现了兼容性问题，某些字体显示口口口。按需安装吧。</p>
<blockquote>
<p>安装过程看：<a href="https://github.com/countstarlight/deepin-wine-tim-arch">deepin-wine-tim-arch: 在Archlinux及衍生发行版上运行TIM</a></p>
</blockquote>
<p>Tim字体发虚</p>
<blockquote>
<p>摘录自：<a href="https://zhuanlan.zhihu.com/p/114296129">Manjaro-KDE安装配置全攻略 - 知乎 (zhihu.com)</a></p>
</blockquote>
<p>切换deepin-wine环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh /opt/deepinwine/apps/Deepin-Tim/run.sh -d</span><br><span class="line">env WINEPREFIX=<span class="string">&quot;<span class="variable">$HOME</span>/.deepinwine/Deepin-TIM&quot;</span> /usr/bin/deepin-wine winecfg</span><br></pre></td></tr></table></figure>

<p>在弹出的窗口中选择windows xp，将DPI调大（默认是96），调成120</p>
<p><strong>deepin-wine-wechat微信字体发虚</strong></p>
<p>同上，把tim改为wechat</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/opt/apps/com.qq.weixin.deepin/files/run.sh -d</span><br><span class="line">env WINEPREFIX=<span class="string">&quot;<span class="variable">$HOME</span>/.deepinwine/Deepin-WeChat&quot;</span> /usr/bin/deepin-wine winecfg</span><br></pre></td></tr></table></figure>

<p> <strong>VMware</strong></p>
<blockquote>
<p><a href="https://my.oschina.net/u/4172591/blog/3190284">Linux笔记:Manjaro 基本操作及命令(更新中) - pollora的个人空间 - OSCHINA - 中文开源技术交流社区</a></p>
</blockquote>
<p><strong>OneDrive</strong></p>
<blockquote>
<p><a href="https://github.com/abraunegg/onedrive/">abraunegg/onedrive: OneDrive Client for Linux (github.com)</a></p>
</blockquote>
<p><strong>其他软件</strong></p>
<p><code>yay -S netease-cloud-music</code>     网易云音乐<br><code>yay -S yesplaymusic  </code>     网易云第三方</p>
<blockquote>
<p><a href="https://github.com/qier222/YesPlayMusic">qier222/YesPlayMusic: 高颜值的第三方网易云播放器</a></p>
</blockquote>
<p><code>yay -S iease-music</code>   网易云第三方</p>
<blockquote>
<p><a href="https://github.com/trazyn/ieaseMusic">ieaseMusic: 网易云第三方播放器</a></p>
</blockquote>
<p><code>yay -S qqmusic-bin</code>      qq音乐<br><code>yay -S baidunetdisk</code>    度盘客户端<br><code>yay -S baidupcs-go</code>       度盘CLI<br><code>yay -S nutstore </code>       坚果云<br><code>yay -S notion-app</code>     notion<br><code>yay -S xdman</code>     xdm</p>
<blockquote>
<p><a href="https://subhra74.github.io/xdm/#downloads">XDM Home (subhra74.github.io)</a></p>
</blockquote>
<p><code>yay -S calibre</code>       calibre电子书<br><code>yay -S gimp </code>       gimp，photoshop的替代品<br><code>yay -S krita</code>        krita，绘画软件，photoshop的替代品<br><code>yay -S xmind-zen</code>       思维导图<br><code>yay -S foxit</code>  福昕阅读器</p>
<h3 id="命令增强"><a href="#命令增强" class="headerlink" title="命令增强"></a>命令增强</h3><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/347596983">Rust Everything On GNU/Linux - 知乎 (zhihu.com)</a><br>视频演示：<a href="https://www.youtube.com/watch?v=dQa9mveTSV4">Rust Programs Every Linux User Should Know About - YouTube</a><br><a href="https://printempw.github.io/setting-up-manjaro-linux/">Manjaro Linux 踩坑调教记录 - PRIN BLOG (printempw.github.io)</a></p>
</blockquote>
<p><strong>ls -&gt; exa</strong></p>
<p>更丰富的输出信息和用法</p>
<blockquote>
<p><a href="https://github.com/ogham/exa">ogham/exa: A modern replacement for ‘ls’. (github.com)</a></p>
</blockquote>
<p><strong>grep -&gt; ripgrep</strong></p>
<p>更快的文本搜索工具</p>
<blockquote>
<p><a href="https://github.com/BurntSushi/ripgrep">BurntSushi/ripgrep: ripgrep recursively searches directories for a regex pattern while respecting your gitignore (github.com)</a></p>
</blockquote>
<p><strong>fzf</strong> </p>
<p>模糊搜索</p>
<blockquote>
<p><a href="https://github.com/junegunn/fzf">junegunn/fzf: A command-line fuzzy finder (github.com)</a></p>
</blockquote>
<p><strong>find/mlocate -&gt; fd</strong></p>
<p>更快的文件搜索工具</p>
<blockquote>
<p><a href="https://github.com/sharkdp/fd">sharkdp/fd: A simple, fast and user-friendly alternative to ‘find’ (github.com)</a></p>
</blockquote>
<p><strong>cat -&gt; bat</strong></p>
<p>带语法高亮的cat</p>
<blockquote>
<p><a href="https://github.com/sharkdp/bat">sharkdp/bat: A cat(1) clone with wings. (github.com)</a></p>
</blockquote>
<p><strong>autojump</strong></p>
<p>cd增强补全</p>
<blockquote>
<p><a href="https://github.com/wting/autojump">wting/autojump: A cd command that learns - easily navigate directories from the command line (github.com)</a></p>
</blockquote>
<p><strong>thefuck</strong></p>
<p>错误命令输入提示</p>
<blockquote>
<p><a href="https://github.com/nvbn/thefuck">nvbn/thefuck: Magnificent app which corrects your previous console command. (github.com)</a></p>
</blockquote>
<p><strong>ps -&gt; procs</strong></p>
<p>输出信息、用法更丰富的ps</p>
<blockquote>
<p><a href="https://github.com/dalance/procs">dalance/procs: A modern replacement for ps written in Rust (github.com)</a></p>
</blockquote>
<p><strong>tokei</strong></p>
<p>统计不同类型文件信息</p>
<blockquote>
<p><a href="https://github.com/XAMPPRocky/tokei">XAMPPRocky/tokei: Count your code, quickly. (github.com)</a></p>
</blockquote>
<p><strong>alacritty</strong></p>
<p>拥有GPU加速的跨平台vim风格用法的终端模拟器</p>
<blockquote>
<p><a href="https://github.com/alacritty/alacritty">alacritty/alacritty: A cross-platform, OpenGL terminal emulator. (github.com)</a></p>
</blockquote>
<p><strong>kitty</strong></p>
<p>加速终端模拟器</p>
<blockquote>
<p><a href="https://github.com/kovidgoyal/kitty">kovidgoyal/kitty: Cross-platform, fast, feature-rich, GPU based terminal (github.com)</a></p>
</blockquote>
<p> <strong>starship</strong></p>
<p>精简、快速、可定制的Shell(bash/zsh/fish)命令提示符</p>
<blockquote>
<p><a href="https://github.com/starship/starship/blob/master/docs/zh-CN/guide/README.md">starship/README.md at master · starship/starship (github.com)</a></p>
</blockquote>
<p><strong>pdfgrep -&gt; ripgrep-all</strong></p>
<p>扩展的ripgrep，支持pdf等的搜索</p>
<blockquote>
<p><a href="https://github.com/phiresky/ripgrep-all">phiresky/ripgrep-all: rga: ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, etc. (github.com)</a></p>
</blockquote>
<h3 id="grub美化"><a href="#grub美化" class="headerlink" title="grub美化"></a>grub美化</h3><blockquote>
<p><a href="https://www.gnome-look.org/browse/cat/109/order/latest/">GRUB Themes - Gnome-look.org (gnome-look.org)</a></p>
</blockquote>
<p>挑选按照github官方说明安装。</p>
<h1 id="后续问题"><a href="#后续问题" class="headerlink" title="后续问题"></a>后续问题</h1><h2 id="grub添加win10引导"><a href="#grub添加win10引导" class="headerlink" title="grub添加win10引导"></a>grub添加win10引导</h2><p>2021-03-8：滚动更新了grub（似乎警告了一句配置文件迁移），生成了新的grub默认配置文件，没有自动添加win10引导，导致grub选择页面缺失windows manage boot，无法直接点击进win10了。好在两个系统的引导还在，只是互相没有关联了，麻烦点可以从bios更改引导顺序进入不同的系统。</p>
<p>为了方便还是手动把manage boot添加到grub。</p>
<p><strong>grub语法</strong></p>
<p>在开机后grub页有个C按键可进入Command，grub有自己的一套命令。目前要用到的基本是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">insmod part_gpt      <span class="comment"># 磁盘格式是gpt</span></span><br><span class="line">insmod fat           <span class="comment"># 分区格式fat</span></span><br><span class="line">ls                   <span class="comment"># 列出(hd0,gpt0)、(hd0)等等</span></span><br><span class="line"><span class="built_in">set</span> root=(hd1,gpt1)  <span class="comment"># 选择此磁盘为启动根目录</span></span><br><span class="line">ls /     <span class="comment"># 此时可以查看此磁盘下的文件，efi分区下都有efi文件夹，可以ls (hdX,X)/一圈，选到微软的efi分区为止</span></span><br><span class="line">chainloader /EFI/Microsoft/Boot/bootmgfw.efi    <span class="comment"># 加载此引导文件，路径固定</span></span><br><span class="line">boot                 <span class="comment"># go</span></span><br></pre></td></tr></table></figure>

<p>在grub如此一番操作可以手动选择引导进入win10，然后我们把这波操作写到开机配置文件。<br>进入系统后，<strong>grub配置文件地址</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动配置</span></span><br><span class="line">/boot/grub/grub.cfg <span class="comment"># 30_os-prober</span></span><br><span class="line"><span class="comment"># 功能配置</span></span><br><span class="line">/etc/grub.d/30_os-prober <span class="comment">## 这个可以不管它</span></span><br></pre></td></tr></table></figure>

<p>进入配置文件，并添加配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l <span class="comment"># 查看磁盘 我win10的efi是/dev/nvme0n1p1</span></span><br><span class="line">sudo grub-probe -t fs_uuid -d /dev/nvme0n1p1 <span class="comment"># 查看该磁盘的uuid</span></span><br><span class="line">sudo vim /boot/grub/grub.cfg</span><br><span class="line"><span class="comment"># BEGIN /etc/grub.d/30_os-prober</span></span><br><span class="line">menuentry <span class="string">&#x27;Microsoft Windows 10&#x27;</span> &#123;</span><br><span class="line">	insmod part_gpt</span><br><span class="line">	insmod fat</span><br><span class="line">	insmod chain</span><br><span class="line">	<span class="built_in">set</span> root=<span class="string">&#x27;(hd1,gpt1)&#x27;</span> <span class="comment">## 这里一定要选对，选不对就看参考文章用变量代替</span></span><br><span class="line">	chainloader /EFI/Microsoft/Boot/bootmgfw.efi</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># END /etc/grub.d/30_os-prober</span></span><br><span class="line">shutdown now</span><br></pre></td></tr></table></figure>

<p><img data-src="https://raw.githubusercontent.com/mednight4/picbed/master/win10%2Bmanjaro%E5%8F%8C%E7%B3%BB%E7%BB%9F/20210310173846.png"></p>
<p>配置文件被配烂了可以重新生成。不过在此之前，其实grub可以自动检测到win10然后把它添加到引导菜单：</p>
<blockquote>
<p>注：<a href="http://lanlingzi.cn/post/notes/2016/0313_grub_win10/">后经验证，grub-mkconfig无法扫描到win10，是由于少安装了os-prober：</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S os-prober</span><br><span class="line"><span class="comment"># 生成文件</span></span><br><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class="line"><span class="comment"># 或者 更新文件</span></span><br><span class="line">sudo update-grub</span><br><span class="line"><span class="comment"># 或者 linux重装引导</span></span><br><span class="line">sudo grub-install /dev/XXX <span class="comment"># XXX=你的引导设备</span></span><br><span class="line"><span class="comment">## 重装引导时不要没装完就退出了，引导文件丢了很麻烦</span></span><br></pre></td></tr></table></figure>

<p><strong>参考</strong></p>
<blockquote>
<p><a href="https://wiki.archlinux.org/index.php/GRUB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BC%95%E5%AF%BC%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">GRUB (简体中文) - ArchWiki (archlinux.org)</a>|</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 链式加载 UEFI 模式下安装的 Windows/Linux</span></span><br><span class="line">insmod fat  <span class="comment"># 文件系统</span></span><br><span class="line"><span class="built_in">set</span> root=(hd1,gpt1) <span class="comment"># 选择磁盘</span></span><br><span class="line">chainloader (<span class="variable">$&#123;root&#125;</span>)/EFI/Microsoft/Boot/bootmgfw.efi <span class="comment"># win10的引导地址，路径是固定的</span></span><br><span class="line">boot <span class="comment"># go</span></span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_43669969/article/details/110820419">为双系统grub添加Windows10引导启动项_Scar~let的博客-CSDN博客_grub2引导win10</a><br><a href="https://www.jb51.net/article/47645.htm">grub命令行启动系统简明教程_Linux_脚本之家 (jb51.net)</a></p>
</blockquote>
<hr>
<p><strong>3.10补充</strong></p>
<p>manjaro已经卸了。<br>之后一段时间不会都动新系统了，太折腾。滚动发行版注定是要当主力机用的，但是目前环境下还是win适合办事。manjaro滚更了一个引导就折腾了小半天。<br>当下老老实实学好C#，整懂汇编，做完高数才是正道。<br>等我考完研再慢慢折腾吧。</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
